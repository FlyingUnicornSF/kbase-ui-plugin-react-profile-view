{"version":3,"sources":["assets/nouserpic.png","redux/reducer.ts","redux/store.ts","components/Profile.tsx","components/Narratives.tsx","util/dateDisplay.tsx","util/API.tsx","components/SearchUsers.tsx","components/SearchUsersRedux.tsx","pages/Home.tsx","pages/HomeRedux.tsx","App.tsx","index.tsx"],"names":["module","exports","__webpack_require__","p","reducer","state","action","baseState","baseReducer","makeInitialStoreState","_objectSpread","makeBaseStoreState","Meta","Profile","props","gravatar","profile","userProfile","jobTitle","gravatarURL","affiliations","title","organization","started","ended","researchInterests","orgs","name","url","profileloading","profileloaded","orgloading","orgsloaded","Array","isArray","jobTitleOther","gravatarHash","gravatarDefault","react_default","a","createElement","style","maxWidth","margin","alt","src","nouserpic","es_row","padding","gutter","col","span","card","loading","textAlign","userName","userID","department","city","country","fundingSource","map","interest","key","org","index","href","target","rel","researchStatement","position","Narratives","data","narrativesloaded","colums","dataIndex","width","render","text","row","wsID","sorter","b","nameA","toUpperCase","nameB","day","date","delta","Date","now","dayString","toString","slice","dayAndTime","toFixed","dateDisplay","last_saved","popover","placement","content","lastSavedA","lastSavedB","i","narratives","length","narrative","permission","Object","keys","users","push","narrativeDetail","user","creator","table","columns","dataSource","getBFFServiceUrl","_x","_x2","_getBFFServiceUrl","apply","this","arguments","_callee","token","baseURL","body","stringBody","response","responseJson","regenerator_default","wrap","_context","prev","next","id","method","version","params","module_name","JSON","stringify","fetch","mode","headers","Authorization","sent","json","abrupt","result","stop","_callee2","bffServiceUrl","_context2","status","console","warn","error","t0","fetchNarrativesAPI","_x6","_x7","_x8","_fetchNarrativesAPI","_callee3","param","_context3","_callee4","_context4","_callee5","searchValue","res","_context5","filter","Content-Type","Option","SearchUsers","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","mouseLeave","onChangeHandler","bind","assertThisInitialized","onSearchHandler","onMouseLeaveHandler","onMouseEnterHandler","value","_this2","_x12","_x13","_x14","_filteredUserAPI","filteredUserAPI","then","setState","username","realname","window","open","es_select","allowClear","showSearch","placeholder","showArrow","onSearch","onChange","onMouseLeave","onMouseEnter","optionFilterProp","filterOption","inputValue","option","item","React","Component","connect","mapStateToProps","components_SearchUsers","auth","userAuthorization","app","config","baseUrl","TabPane","tabs","Home","tabTitle","postalCode","avatarOption","userProfileLoaded","narrativesLoaded","sharedNarratives","sharedNarrativesLoaded","organizations","organizationsLoaded","setTitle","authUsername","_x3","_x4","_x5","_fetchProfileAPI","fetchProfileAPI","_x9","_x10","_x11","_fetchOrgsOfProfileAPI","fetchOrgsOfProfileAPI","orgArr","forEach","profileID","location","search","replace","narrative_detail","publicNarratives","Promise","all","values","sharedNarrativeList","narrativeList","allNarratives","concat","prevProps","prevState","type","defaultActiveKey","tab","components_Profile","components_Narratives","components_SearchUsersRedux","ownProps","_state$app","rawParams","runtime","navigation","Error","dispatch","sendTitle","Content","store","createStore","compose","applyMiddleware","thunk","App","es","lib","required","className","layout","minHeight","backgroundColor","HomeRedux","ReactDOM","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.b962aba3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nouserpic.9af42ba9.png\";","import { Action, Reducer } from \"redux\";\nimport { baseReducer } from \"@kbase/ui-lib\";\nimport { BaseStoreState } from \"@kbase/ui-lib\";\nimport { StoreState } from \"./store\";\n\nconst reducer: Reducer<StoreState | undefined, Action> = (state: StoreState | undefined, action: Action) => {\n  const baseState = baseReducer(state as BaseStoreState, action);\n  if (baseState) {\n    return baseState as StoreState;\n  }\n  return state;\n};\n\nexport default reducer;","import { BaseStoreState, makeBaseStoreState } from \"@kbase/ui-lib\";\nimport { createStore, compose, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport reducer from \"./reducer\";\n\nexport interface StoreState extends BaseStoreState {}\n\nexport function makeInitialStoreState(): StoreState {\n  const baseStoreState = makeBaseStoreState();\n  return {\n    ...baseStoreState\n  };\n}\n\nexport function createReduxStore() {\n  return createStore(reducer, makeInitialStoreState(), compose(applyMiddleware(thunk)));\n}","import React from 'react';\nimport { UserName, ProfileData, OrgProp } from '../pages/Home';\nimport { Row, Col, Card } from 'antd';\nimport nouserpic from '../assets/nouserpic.png';\nconst { Meta } = Card;\n\n/**\n *  Profile.tsx is a view component\n *  Parent componenet - pages/Home.tsx\n *\n */\n\ninterface Props {\n    token: string;\n    userName: UserName;\n    userProfile: ProfileData;\n    orgs: Array<OrgProp>;\n    gravatarHash: string;\n    profileloaded: Boolean;\n    orgsloaded: Boolean;\n}\n\n/**\n * Returns profile component.\n * @param props\n */\nfunction Profile(props: Props) {\n    const profile = props.userProfile;\n    // Set initial value to props for initial render and no-data\n    let jobTitle = '';\n    let gravatarURL = '';\n    let affiliations = [\n        {\n            title: '',\n            organization: '',\n            started: '',\n            ended: ''\n        }\n    ];\n    let researchInterests: Array<string> = [];\n    let orgs = [\n        {\n            name: '',\n            url: ''\n        }\n    ];\n    let profileloading = true;\n    let gravatar;\n    if (props.profileloaded) {\n        profileloading = false;\n    }\n    let orgloading = true;\n    if (props.orgsloaded) {\n        orgloading = false;\n    }\n    // Set affiliations\n    if (typeof profile.affiliations !== 'undefined') {\n        affiliations = profile.affiliations;\n    }\n\n    // Set researchInterests\n    if (typeof profile.researchInterests !== 'undefined' && Array.isArray(profile.researchInterests)) {\n        researchInterests = profile.researchInterests;\n    }\n    // Set jobTitle\n    if (profile.jobTitle === 'Other' && typeof profile.jobTitle !== 'undefined') {\n        jobTitle = profile.jobTitleOther;\n    } else if (typeof profile.jobTitle !== 'undefined') {\n        jobTitle = profile.jobTitle;\n    } else {\n        jobTitle = '';\n    }\n    // set orgs\n    if (props.orgs) {\n        orgs = props.orgs;\n    }\n    // Set gravatarURL\n    if (profile['avatarOption'] === 'silhoutte' || !props.gravatarHash) {\n        gravatar = <img style={{ maxWidth: '100%', margin: '8px 0px' }} alt=\"avatar\" src={nouserpic} />;\n    } else if (props.gravatarHash) {\n        gravatarURL =\n            'https://www.gravatar.com/avatar/' + props.gravatarHash + '?s=300&amp;r=pg&d=' + profile.gravatarDefault;\n        gravatar = <img style={{ maxWidth: '100%', margin: '8px 0px' }} alt=\"avatar\" src={gravatarURL} />;\n    }\n\n    return (\n        <Row style={{ padding: 16 }}>\n            <Row gutter={8}>\n                <Col span={8}>\n                    <Card loading={profileloading} style={{ margin: '8px 0px', textAlign: 'center' }}>\n                        {/* <img style={{ maxWidth: '100%', margin: '8px 0px' }} alt='avatar' src={ gravatarURL } /> */}\n                        {gravatar}\n                    </Card>\n                    <Card\n                        loading={profileloading}\n                        style={{ margin: '8px 0px', textAlign: 'left' }}\n                        title={props.userName.name}\n                    >\n                        <Meta title=\"User ID\" />\n                        <p>{props.userName.userID}</p>\n                        <Meta title=\"Position\" />\n                        <p>{jobTitle}</p>\n                        <Meta title=\"Department\" />\n                        <p>{profile.department}</p>\n                        <Meta title=\"Organization\" />\n                        <p>{profile.organization}</p>\n                        <Meta title=\"Location\" />\n                        <p>\n                            {profile.city}, {profile.state}, {profile.country}\n                        </p>\n                        <Meta title=\"Primary Funding Source\" />\n                        <p>{profile.fundingSource}</p>\n                    </Card>\n                </Col>\n                <Col span={16}>\n                    <Row gutter={8}>\n                        <Col span={12}>\n                            <Card loading={profileloading} style={{ margin: '8px 0px' }} title=\"Research Interests\">\n                                <ul style={{ textAlign: 'left' }}>\n                                    {researchInterests.map((interest) => (\n                                        <li key={interest}>{interest}</li>\n                                    ))}\n                                </ul>\n                            </Card>\n                        </Col>\n                        <Col span={12}>\n                            <Card loading={orgloading} style={{ margin: '8px 0px' }} title=\"Organizations\">\n                                <ul style={{ textAlign: 'left' }}>\n                                    {orgs.map((org, index) => (\n                                        <li key={index}>\n                                            <a href={org.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                                                {org.name}\n                                            </a>\n                                        </li>\n                                    ))}\n                                </ul>\n                            </Card>\n                        </Col>\n                    </Row>\n                    <Row>\n                        {/* TODO:AKIYO FIX - when the box is very small it doesn't break or hide word */}\n                        <Card\n                            loading={profileloading}\n                            style={{ margin: '8px 0px' }}\n                            title=\"Research or Personal Statement\"\n                        >\n                            {profile.researchStatement}\n                        </Card>\n                        <Card loading={profileloading} style={{ margin: '8px 0px' }} title=\"Afflications\">\n                            <ul style={{ textAlign: 'left' }}>\n                                {affiliations.map((position, index) => (\n                                    <li key={index}>\n                                        {position.title} @ {position.organization}, {position.started} -{' '}\n                                        {position.ended}{' '}\n                                    </li>\n                                ))}\n                            </ul>\n                        </Card>\n                    </Row>\n                </Col>\n            </Row>\n        </Row>\n    );\n}\n\nexport default Profile;\n","/**\n *  Narrative.tsx is a view component\n *  Parent componenet - pages/Home.tsx\n *\n */\nimport React from 'react';\nimport { dateDisplay } from '../util/dateDisplay'; // date format\nimport { Table, Popover } from 'antd';\nimport { Narrative_detail, NarrativeData } from '../pages/Home'; //interface\n\ninterface TableData {\n    key: string;\n    wsID: string;\n    name: string;\n    last_saved: number;\n}\n\ninterface Props {\n    token: string;\n    narratives: Array<NarrativeData>;\n    narrativesloaded: Boolean;\n}\n\n/**\n * Returns a component with list of narratives in a table.\n * @param props\n */\nfunction Narratives(props: Props) {\n    let data: Array<TableData> = [];\n    let loading = true;\n    if (props.narrativesloaded) {\n        loading = false;\n    }\n    // initialize data for the table to be an empty array.\n    const colums = [\n        {\n            title: 'Title',\n            dataIndex: 'name',\n            width: 350,\n            key: 'wsID',\n            render: (text: string, row: TableData) => {\n                let url = '/narrative/' + row.wsID;\n                return (\n                    <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n                        {text}\n                    </a>\n                );\n            },\n            sorter: (a: TableData, b: TableData) => {\n                let nameA = a.name.toUpperCase();\n                let nameB = b.name.toUpperCase();\n                if (nameA < nameB) {\n                    return -1;\n                }\n                if (nameA > nameB) {\n                    return 1;\n                }\n                return 0;\n            }\n        },\n        {\n            title: 'Last Saved',\n            dataIndex: 'last_saved',\n            width: 190,\n            render: (text: string, row: TableData) => {\n                let day = dateDisplay(row.last_saved);\n                return (\n                    <Popover placement=\"right\" content={day[0]}>\n                        {day[1]}\n                    </Popover>\n                );\n            },\n            sorter: (a: TableData, b: TableData) => {\n                let lastSavedA = a.last_saved;\n                let lastSavedB = b.last_saved;\n                if (lastSavedA < lastSavedB) {\n                    return 1;\n                }\n                if (lastSavedA > lastSavedB) {\n                    return -1;\n                }\n                return 0;\n            }\n        }\n    ];\n\n    for (let i = 0; i < props.narratives.length; i += 1) {\n        let narrative = props.narratives[i];\n        if (narrative.permission === 'r' || narrative.permission === 'n') {\n            if (Object.keys(narrative.users).length <= 0) {\n                data.push({\n                    key: narrative.wsID,\n                    wsID: narrative.wsID,\n                    name: narrative.name,\n                    last_saved: narrative.last_saved\n                });\n            } else {\n                data.push({\n                    key: narrative.wsID,\n                    wsID: narrative.wsID,\n                    name: narrative.name,\n                    last_saved: narrative.last_saved\n                });\n            }\n        } else {\n            const narrativeDetail: Narrative_detail = narrative['narrative_detail'];\n            let users = '';\n            for (let user in narrative.users) {\n                if (user !== narrativeDetail.creator) users = users + user + ', ';\n            }\n            data.push({\n                key: narrative.wsID,\n                wsID: narrative.wsID,\n                name: narrative.name,\n                last_saved: narrative.last_saved\n            });\n        }\n    }\n\n    return (\n        <Table<TableData>\n            style={{ width: '85%', margin: 'auto' }}\n            columns={colums}\n            dataSource={data}\n            loading={loading}\n        />\n    );\n}\n\nexport default Narratives;\n","/**\n * returns array of date in MMM DD YYY HH:MM:SS and one of below:\n * less than a min ago, # hours ago, # days ago, day: MMM DD YYYY (if it's more than a month)\n * @param {string} date date format\n * \n */\nexport function dateDisplay(date: number): Array<string> {\n    let delta = (Date.now() - +new Date(date))/1000000 ;\n    let dayString = (new Date(date)).toString();\n    // date format: MMM DD YYYY\n    let day = dayString.slice(4, 7) + ' ' + dayString.slice(8, 10) + ' ' + dayString.slice(11, 15);\n    //  date format: MMM DD YYYY HH:MM:SS\n    let dayAndTime = day + ' ' + dayString.slice(16, 24);\n    if( delta >= 2628 ) {\n        // more than a month ago\n        return [dayAndTime, day];\n    } else if( delta < 2628 && delta >= 86.4) {\n        // less than a month ago, but more than a day ago\n        let days = (delta/(86.4)).toFixed(0);\n        return [dayAndTime, days + ' days ago'];\n    }\n    else if( delta < 86.4 && delta >= 3.6) {\n        return [day, (delta/3.6).toFixed(0) + ' hours ago'];\n    } else if(delta < 3.6 && delta >= 0.06) {\n        return [dayAndTime, ((delta)*10).toFixed(0) + ' min ago'];\n    } else {\n        return [dayAndTime, 'less than a min ago']\n    }\n};","export async function getBFFServiceUrl(token: string, baseURL: string) {\n    // TODO: for dev, the baseUrl will be whatever works for the CRA workflow, which is ''.\n    // baseURL = 'https://ci.kbase.us/services'; // for dev\n    let url = baseURL + '/services/service_wizard';\n    const body = {\n        id: 0,\n        method: 'ServiceWizard.get_service_status',\n        version: '1.1',\n        params: [\n            {\n                module_name: 'bff',\n                version: null\n            }\n        ]\n    };\n    const stringBody = JSON.stringify(body);\n    const response = await fetch(url, {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n            Authorization: token\n        },\n        body: stringBody\n    });\n    const responseJson = await response.json();\n    return responseJson.result[0]['url'];\n}\n\n/**\n * Return profile data\n * @param id profile id\n * @param token KBase session cookie\n * @param baseUrl hostname\n */\nexport async function fetchProfileAPI(id: string, token: string, baseURL: string) {\n    const bffServiceUrl = await getBFFServiceUrl(token, baseURL);\n    let url = bffServiceUrl + '/fetchUserProfile/' + id;\n    const response = await fetch(url, {\n        method: 'GET'\n    });\n    if (response.status === 404) {\n        console.warn('404 response:', response);\n    } else if (response.status === 500) {\n        console.error('500 response:', response);\n        return;\n    }\n    try {\n        const profile = await response.json();\n        return profile;\n    } catch (err) {\n        console.error('profile fetch failed', response);\n    }\n}\n\n/**\n * Return list of narratives\n * @param param shared/mine/public\n * @param token kbase session cookie\n */\nexport async function fetchNarrativesAPI(param: string, token: string, baseURL: string) {\n    const bffServiceUrl = await getBFFServiceUrl(token, baseURL);\n    let url = bffServiceUrl + '/narrative_list/' + param;\n    const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n            Authorization: token\n        }\n    });\n    if (response.status === 500) {\n        console.error('Fetch Narratives 500 response:', response);\n        return;\n    }\n    try {\n        const narratives = await response.json();\n        return narratives;\n    } catch (err) {\n        console.error('fetch narratives failed', response);\n    }\n}\n\n/**\n * returns list of orgs that profile and logged in user are both associated with.\n * @param id id of the profile\n * @param token kbase session cookie\n */\nexport async function fetchOrgsOfProfileAPI(id: string, token: string, baseURL: string) {\n    const bffServiceUrl = await getBFFServiceUrl(token, baseURL);\n    const url = bffServiceUrl + '/org_list/' + id;\n    const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n            Authorization: token\n        }\n    });\n    if (response.status === 500) {\n        console.error('500 response:', response);\n        return;\n    }\n    try {\n        const orgs = await response.json();\n        return orgs;\n    } catch (err) {\n        console.error('fetch org failed', response);\n    }\n}\n\n/**\n * returns list of users that are filtered by search values\n * @param searchValue search values\n * @param token kbase session cookie\n */\nexport async function filteredUserAPI(searchValue: string, token: string, baseURL: string) {\n    const body = {\n        version: '1.1',\n        method: 'UserProfile.filter_users',\n        params: [{ filter: searchValue }]\n    };\n    const stringBody = JSON.stringify(body);\n\n    // baseURL = 'https://ci.kbase.us/services'; // for dev\n    // TODO: this should come from config\n    const url = baseURL + '/services/user_profile/rpc';\n    const response = await fetch(url, {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n            Authorization: token,\n            'Content-Type': 'application/json'\n        },\n        body: stringBody\n    });\n    if (response.status === 500) {\n        console.error('500 response:', response);\n        return;\n    }\n    try {\n        const res = await response.json();\n        // if you try to: return response.json, it will get error below\n        // Unhandled Rejection (TypeError): Failed to execute 'json' on 'Response': body stream is locked\n        // but assiging it to a vairable somehow magically works.\n        return res;\n    } catch (err) {\n        console.error('fetch search users failed', response);\n    }\n}\n","import React from 'react';\nimport { Select } from 'antd';\nimport { filteredUserAPI } from '../util/API';\nconst { Option } = Select;\n\ninterface FilteredUser {\n    username: string;\n    realname: string;\n}\n\ninterface Response {\n    version: string;\n    result: Array<any>;\n}\n\ninterface State {\n    data: Array<FilteredUser>;\n    mouseLeave: boolean;\n}\n\ninterface Props {\n    token: string;\n    baseURL: string;\n}\n/**\n * View component with user search feature.\n * @param props\n */\nclass SearchUsers extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            data: [],\n            mouseLeave: false\n        };\n        this.onChangeHandler = this.onChangeHandler.bind(this);\n        this.onSearchHandler = this.onSearchHandler.bind(this);\n        this.onMouseLeaveHandler = this.onMouseLeaveHandler.bind(this);\n        this.onMouseEnterHandler = this.onMouseEnterHandler.bind(this);\n    }\n\n    onSearchHandler(value: string): void {\n        if (value.length > 2 && this.state.mouseLeave !== true) {\n            filteredUserAPI(value, this.props.token, this.props.baseURL).then((response: Response) => {\n                if (typeof response !== 'undefined') {\n                    this.setState({ data: response['result'][0] });\n                } else {\n                    this.setState({\n                        data: [{ username: 'error', realname: 'Something went wrong. Try again later.' }]\n                    });\n                }\n            });\n        } else {\n            return;\n        }\n    }\n    onMouseLeaveHandler(): void {\n        this.setState({ mouseLeave: true });\n    }\n    onMouseEnterHandler(): void {\n        this.setState({ mouseLeave: false });\n    }\n    onChangeHandler(value: string): void {\n        if (value !== 'error' && typeof value !== 'undefined') {\n            let url = '/#user/' + value;\n            window.open(url, '_blank');\n        }\n    }\n\n    render() {\n        let data = this.state.data;\n        return (\n            <Select\n                mode=\"single\"\n                style={{ width: 300 }}\n                allowClear\n                showSearch\n                placeholder=\"enter more than 3 characters\"\n                showArrow={false}\n                onSearch={this.onSearchHandler}\n                onChange={this.onChangeHandler}\n                onMouseLeave={this.onMouseLeaveHandler}\n                onMouseEnter={this.onMouseEnterHandler}\n                optionFilterProp=\"children\"\n                filterOption={(inputValue, option) => {\n                    return true;\n                }}\n            >\n                {data.map((item) => {\n                    return (\n                        <Option key={item['username']}>\n                            {item['realname']} ({item['username']})\n                        </Option>\n                    );\n                })}\n            </Select>\n        );\n    }\n}\n\nexport default SearchUsers;\n","import React from 'react';\nimport { connect} from 'react-redux';\n\nimport SearchUsers from './SearchUsers';\n\ninterface AppState {\n    app: {\n        config: {\n            baseUrl: string;\n        }\n    };\n    auth: AuthData;\n}\n\ninterface AuthData {\n    userAuthorization: {\n        realname: string;\n        roles: Array<string>;\n        token: string;\n        username: string;\n    }\n}\n\nconst mapStateToProps = (state:AppState) => {\n    return state\n}\nfunction SearchUsersRedux(mapStateToProps:AppState) {\n    return (\n        <SearchUsers token={mapStateToProps.auth.userAuthorization.token} baseURL={mapStateToProps.app.config.baseUrl}/>\n    )\n}\n\nexport default connect(mapStateToProps)(SearchUsersRedux);","import React from 'react';\nimport { Tabs } from 'antd';\nimport Profile from '../components/Profile';\nimport Narratives from '../components/Narratives';\nimport SearchUsersRedux from '../components/SearchUsersRedux';\nimport { fetchOrgsOfProfileAPI, fetchProfileAPI, fetchNarrativesAPI } from '../util/API';\n\nconst TabPane = Tabs.TabPane;\n/**\n * Class component that keeps states for all the variables that viewer/child components needs.\n * This can converted into Redux if needed.\n * Parent component App.tsx\n */\n\n// add Narrative_detail if needed. Currently, data in the object is not used - Akiyo.\nexport interface Narrative_detail {\n    creator: string;\n}\n\nexport interface NarrativeData {\n    wsID: string;\n    permission: string;\n    name: string;\n    last_saved: number;\n    users: object;\n    narrative_detail: Narrative_detail;\n}\n\n// org data that\nexport interface OrgProp {\n    name: string;\n    url: string;\n}\n\n// fetchOrgsOfProfile returns a full group info,\n// but only name and id is needed to make OrgProp\nexport interface Org {\n    name: string;\n    id: string;\n}\n\nexport interface Affiliation {\n    title: string;\n    organization: string;\n    started: string;\n    ended: string;\n}\nexport interface ProfileData {\n    organization: string;\n    department: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    country: string;\n    affiliations: Array<Affiliation>;\n    researchStatement: string;\n    jobTitle: string;\n    jobTitleOther: string;\n    researchInterests: Array<string>;\n    fundingSource: string;\n    gravatarDefault: string;\n    avatarOption: string;\n}\n\nexport interface UserName {\n    name: string;\n    userID: string;\n}\ninterface HomeState {\n    tabTitle: Array<string>;\n    userName: UserName;\n    userProfile: ProfileData;\n    userProfileLoaded: Boolean;\n    narratives: Array<NarrativeData>;\n    narrativesLoaded: Boolean;\n    sharedNarratives: Array<NarrativeData>;\n    sharedNarrativesLoaded: Boolean;\n    organizations: Array<OrgProp>;\n    organizationsLoaded: Boolean;\n    gravatarHash: string;\n}\n\nexport interface HomeProps {\n    token: string;\n    authUsername: string;\n    username: string | null;\n    baseURL: string;\n    setTitle: (title: string) => void;\n}\n\nclass Home extends React.Component<HomeProps, HomeState> {\n    constructor(props: HomeProps) {\n        super(props);\n        this.state = {\n            tabTitle: ['Profile', 'Narratives', 'Shared narratives', 'Search users'],\n            userName: {\n                name: '',\n                userID: ''\n            },\n            userProfile: {\n                organization: '',\n                department: '',\n                city: '',\n                state: '',\n                postalCode: '',\n                country: '',\n                affiliations: [],\n                researchStatement: '',\n                jobTitle: '',\n                jobTitleOther: '',\n                researchInterests: [],\n                fundingSource: '',\n                gravatarDefault: '',\n                avatarOption: ''\n            },\n            userProfileLoaded: false,\n            narratives: [],\n            narrativesLoaded: false,\n            sharedNarratives: [],\n            sharedNarrativesLoaded: false,\n            organizations: [],\n            organizationsLoaded: false,\n            gravatarHash: ''\n        };\n    }\n\n    componentDidMount() {\n        let username;\n        if (this.props.username) {\n            username = this.props.username;\n            this.props.setTitle('User Profile for ' + username);\n        } else {\n            username = this.props.authUsername;\n            this.props.setTitle('Your User Profile');\n        }\n\n        /**\n         * fetch user profile\n         *  @param {string} id  profile ID\n         */\n        fetchProfileAPI(username, this.props.token, this.props.baseURL).then((response) => {\n            if (typeof response !== 'undefined') {\n                if (this.props.username) {\n                    this.props.setTitle('User Profile for ' + response.user.realname);\n                }\n                this.setState({\n                    userName: {\n                        // TODO: it is better to use dot syntax than array syntax for objects,\n                        // it makes it clearer what the intention is (at least I think so)\n                        // there is no functional difference other than fewer characters to type\n                        // for dot syntax, and of course better IDE help when the\n                        // variable is well typed.\n                        // e.g.: name: response.user.realname\n                        name: response['user']['realname'],\n\n                        userID: response['user']['username']\n                    },\n                    gravatarHash: response['profile']['synced']['gravatarHash'],\n                    userProfile: response['profile']['userdata'],\n                    userProfileLoaded: true\n                });\n            } else {\n                // something went wrong during fetching.\n                this.setState({\n                    userName: {\n                        name: 'Something went wrong. Please check console for error messages..',\n                        userID: ''\n                    }\n                });\n            }\n        });\n\n        /**\n         * fetch orgs that user blongs to the profile\n         *  @param {string} id  profile ID\n         */\n        fetchOrgsOfProfileAPI(username, this.props.token, this.props.baseURL).then((response: Array<Org>) => {\n            let orgArr: Array<OrgProp> = [];\n            if (typeof response !== 'undefined') {\n                response.forEach((org) => {\n                    orgArr.push({ name: org.name, url: this.props.baseURL + '/#org/' + org.id });\n                });\n                this.setState({\n                    organizations: orgArr,\n                    organizationsLoaded: true\n                });\n            } else {\n                // something went wrong during fetching.\n                this.setState({\n                    organizations: [\n                        { name: 'Something went wrong. Please check console for error messages.', url: '' }\n                    ],\n                    organizationsLoaded: true\n                });\n            }\n        });\n\n        /**\n         * Returns narratives that shows in Narrative table.\n         *\n         *\n         * Below logic determines which set of narratives needs to be fetched.\n         * if the viewing profile userid is not the logged in user,\n         * then fetch all of shared and public narrative and filter with the viewing profile userid.\n         */\n\n        // TODO: this should only be true if the username is actually undefined. For an undefined test\n        // you can do either !this.props.username, or typeof this.props.username === 'undefined'.\n        if (this.props.username === 'undefined') {\n            // if there is no logged in user in run time config (redux app state)\n            // returns an empty narrative list\n            this.setState({\n                narratives: [\n                    {\n                        wsID: '',\n                        permission: '',\n                        name: 'Something went wrong. Please check console for error messages.',\n                        last_saved: 1,\n                        users: {},\n                        narrative_detail: { creator: '' }\n                    }\n                ],\n                narrativesLoaded: true\n            });\n            return;\n        } else {\n            const profileID = window.location.search.replace('?', '');\n            // when logged in user is viewing his/her profile\n            // fetch both \"mine\" and \"shared\" profile\n            if (this.props.username === profileID) {\n                fetchNarrativesAPI('mine', this.props.token, this.props.baseURL).then(\n                    (response: Array<NarrativeData>) => {\n                        if (typeof response !== 'undefined') {\n                            this.setState({\n                                narratives: response,\n                                narrativesLoaded: true\n                            });\n                        } else {\n                            // fetch failed\n                            this.setState({\n                                narratives: [\n                                    {\n                                        wsID: '',\n                                        permission: '',\n                                        name: 'Something went wrong. Please check console for error messages.',\n                                        last_saved: 0,\n                                        users: {},\n                                        narrative_detail: { creator: '' }\n                                    }\n                                ],\n                                narrativesLoaded: true\n                            });\n                        }\n                    }\n                );\n                fetchNarrativesAPI('shared', this.props.token, this.props.baseURL).then(\n                    (response: Array<NarrativeData>) => {\n                        if (typeof response !== 'undefined') {\n                            this.setState({\n                                sharedNarratives: response,\n                                sharedNarrativesLoaded: true\n                            });\n                        } else {\n                            // something went wrong during fetching.\n                            this.setState({\n                                sharedNarratives: [\n                                    {\n                                        wsID: '',\n                                        permission: '',\n                                        name: 'Something went wrong. Please check console for error messages.',\n                                        last_saved: 0,\n                                        users: {},\n                                        narrative_detail: { creator: '' }\n                                    }\n                                ],\n                                sharedNarrativesLoaded: true\n                            });\n                        }\n                    }\n                );\n            } else {\n                let publicNarratives = fetchNarrativesAPI('public', this.props.token, this.props.baseURL).then(\n                    (response: Array<NarrativeData>) => {\n                        if (typeof response === 'undefined') {\n                            // fetch failed.\n                            this.setState({\n                                narratives: [\n                                    {\n                                        wsID: '',\n                                        permission: '',\n                                        name: 'Something went wrong. Please check console for error messages.',\n                                        last_saved: 0,\n                                        users: {},\n                                        narrative_detail: { creator: '' }\n                                    }\n                                ],\n                                narrativesLoaded: true\n                            });\n                            return;\n                        }\n                        return response;\n                    }\n                );\n                let sharedNarratives = fetchNarrativesAPI('shared', this.props.token, this.props.baseURL).then(\n                    (response: Array<NarrativeData>) => {\n                        return response;\n                    }\n                );\n                Promise.all([publicNarratives, sharedNarratives]).then((values) => {\n                    let sharedNarrativeList = [];\n                    if (typeof values[1] !== 'undefined') {\n                        for (let i = 0; i < values[1].length; i++) {\n                            let narrative = values[1][i];\n                            if (narrative.narrative_detail.creator !== profileID) {\n                                for (let user in narrative.users) {\n                                    if (user === profileID) {\n                                        sharedNarrativeList.push(narrative);\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    let narrativeList = [];\n                    if (typeof values[0] !== 'undefined') {\n                        let allNarratives = values[0].concat(values[1]);\n                        for (let i = 0; i < allNarratives.length; i += 1) {\n                            if (allNarratives[i]['narrative_detail']['creator'] === profileID) {\n                                narrativeList.push(allNarratives[i]);\n                            }\n                        }\n                    }\n                    this.setState({\n                        narratives: narrativeList,\n                        narrativesLoaded: true,\n                        sharedNarratives: sharedNarrativeList,\n                        sharedNarrativesLoaded: true\n                    });\n                });\n            }\n        }\n    }\n\n    componentDidUpdate(prevProps: any, prevState: any) {\n        // This privents from infinate component loading loop.\n        if (this.state === prevState) {\n            return;\n        }\n    }\n\n    render() {\n        return (\n            <Tabs type=\"line\" defaultActiveKey=\"1\">\n                <TabPane tab=\"Profile\" key=\"1\">\n                    <Profile\n                        userName={this.state.userName}\n                        userProfile={this.state.userProfile}\n                        orgs={this.state.organizations}\n                        gravatarHash={this.state.gravatarHash}\n                        profileloaded={this.state.userProfileLoaded}\n                        orgsloaded={this.state.organizationsLoaded}\n                        token={this.props.token}\n                    />\n                </TabPane>\n                <TabPane tab=\"Narratives\" key=\"3\">\n                    <Narratives\n                        narratives={this.state.narratives}\n                        narrativesloaded={this.state.narrativesLoaded}\n                        token={this.props.token}\n                    />\n                </TabPane>\n                <TabPane tab=\"Search other users\" key=\"6\">\n                    <SearchUsersRedux />\n                </TabPane>\n            </Tabs>\n        );\n    }\n}\n\nexport default Home;\n","import { connect } from 'react-redux';\n\nimport Home from './Home';\n\nimport { StoreState } from '../redux/store';\nimport { Action, Dispatch } from 'redux';\nimport { sendTitle } from '@kbase/ui-lib';\n\ninterface OwnProps {}\n\ninterface StateProps {\n    token: string;\n    authUsername: string;\n    username: string | null;\n    baseURL: string;\n}\n\ninterface DispatchProps {\n    setTitle: (title: string) => void;\n}\n\n// TODO this should be part of the view definition\ninterface UserProfileViewParams {\n    username?: string;\n}\n\nfunction mapStateToProps(state: StoreState, ownProps: OwnProps): StateProps {\n    const {\n        auth: { userAuthorization },\n        app: {\n            config: { baseUrl },\n            runtime: {\n                navigation: { params: rawParams }\n            }\n        }\n    } = state;\n    if (!userAuthorization) {\n        throw new Error('This plugin only operates with authentication; no KBase token in store');\n    }\n    const params = (rawParams as unknown) as UserProfileViewParams;\n    return {\n        token: userAuthorization.token,\n        authUsername: userAuthorization.username,\n        username: params.username || null,\n        baseURL: baseUrl\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, ownProps: OwnProps): DispatchProps {\n    return {\n        setTitle: (title: string) => {\n            return dispatch(sendTitle(title) as any);\n        }\n    };\n}\n\n// function HomeRedux(mapStateToProps:AppState) {\n//     return (\n//         <Home userData={mapStateToProps.auth.userAuthorization} baseURL={mapStateToProps.app.config.baseUrl}/>\n//     )\n// }\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(Home);\n","import React from 'react';\nimport { Layout } from 'antd';\nimport { Provider } from 'react-redux';\nimport { createReduxStore } from './redux/store';\nimport { AppBase, AuthGate } from '@kbase/ui-lib';\n// import store from './redux/store_basic';\nimport './App.css';\nimport HomeRedux from './pages/HomeRedux';\nconst { Content } = Layout;\nconst store = createReduxStore();\ninterface AppProps {}\ninterface AppState {}\n\nconst App: React.FC = () => {\n    return (\n        <Provider store={store}>\n            <AppBase>\n                <AuthGate required={true}>\n                    <div className=\"App\">\n                        <Layout style={{ minHeight: '100vh' }}>\n                            <Content style={{ backgroundColor: 'white' }}>\n                                <HomeRedux />\n                            </Content>\n                        </Layout>\n                    </div>\n                </AuthGate>\n            </AppBase>\n        </Provider>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n//TODO:AKIYO add service worker\n"],"sourceRoot":""}