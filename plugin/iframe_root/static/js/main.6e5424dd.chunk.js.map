{"version":3,"sources":["assets/nouserpic.png","redux/actions/actionTypes.ts","redux/fetchStatuses.ts","redux/reducers/narrative_reducers.ts","redux/reducers/reducer.ts","redux/reducers/org_reducers.ts","redux/reducers/index.ts","redux/reducers/profile_reducers.ts","redux/store.ts","util/API.tsx","redux/actions/narrativeActions.ts","redux/actions/actions.ts","redux/actions/profileActions.ts","components/Orgs/Orgs.tsx","components/Spinner.tsx","components/ErrorMessage.tsx","components/Orgs/OrgsContainer.tsx","components/Orgs/WhichComponent.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Profile/WhichComponent.tsx","components/Narratives/Narratives.tsx","util/dateDisplay.tsx","components/Narratives/NarrativeContainer.tsx","components/SearchUsers/SearchUsers.tsx","components/SearchUsers/SearchUsersContainer.tsx","pages/Home.tsx","pages/HomeRedux.tsx","redux/actions/orgActions.ts","App.tsx","index.tsx"],"names":["module","exports","profileActionTypes","orgsActionTypes","profileFetchStatuses","orgFetchStatuses","narrativeReducer","state","action","payload","type","narrativeState","reducer","baseReducer","orgsReducer","orgState","rootReducer","kbaseUIStore","FETCH_PROFILE_SUCCESS","console","log","profileView","FETCH_PROFILE_ERROR","profileFetchStatus","ERROR","FETCH_PROFILE","FETCHING","INITIAL_RENDER_PROFILE","NONE","profileReducer","makeInitialStoreState","makeBaseStoreState","narrativeList","loading","orgList","getBFFServiceUrl","token","baseURL","a","url","body","id","method","version","params","module_name","stringBody","JSON","stringify","fetch","mode","headers","Authorization","response","json","responseJson","result","fetchProfileAPI","bffServiceUrl","status","warn","error","profile","updateProfileAPI","userdata","user","realname","username","fetchNarrativesAPI","param","narratives","fetchOrgsOfProfileAPI","orgs","searchValue","filter","res","LOAD_NARRATIVES","fetchProfile","loadProfile","updateProfile","dispatch","getState","rootStore","auth","userAuthorization","app","config","baseUrl","Orgs","props","className","style","margin","title","textAlign","map","org","index","key","href","target","rel","name","Spinner","size","ErrorMessage","connect","orgsFetchStatus","Meta","TextArea","Profile","researchInterests","profileData","Array","isArray","padding","gutter","span","maxWidth","alt","src","gravatarHash","gravatarDefault","nouserpic","userName","disabled","defaultValue","userID","jobTitle","jobTitleOther","department","organization","city","country","fundingSource","interest","OrgsContainer","autosize","readOnly","researchStatement","affiliations","started","ended","position","SUCCESS","foo","editEnable","profileID","Narratives","data","colums","dataIndex","width","render","text","row","wsID","sorter","b","nameA","toUpperCase","nameB","day","date","delta","Date","now","dayString","toString","slice","dayAndTime","toFixed","dateDisplay","last_saved","placement","content","lastSavedA","lastSavedB","i","length","narrative","permission","Object","keys","users","push","narrativeDetail","creator","columns","dataSource","Option","SearchUsers","mouseLeave","onChangeHandler","bind","onSearchHandler","onMouseLeaveHandler","onMouseEnterHandler","value","this","filteredUserAPI","then","setState","window","open","allowClear","showSearch","placeholder","showArrow","onSearch","onChange","onMouseLeave","onMouseEnter","optionFilterProp","filterOption","inputValue","option","item","React","Component","mapStateToProps","TabPane","Home","searchOnATab","SearchUsersContainer","narrativesLoaded","organizations","organizationsLoaded","setTitle","authUsername","getProfile","loadOrgsAction","loadNarratives","prevProps","prevState","defaultActiveKey","tab","ProfileContainer","NarrativeContainer","ownProps","rawParams","runtime","navigation","Error","publicNarratives","sharedNarratives","allNarratives","Promise","all","concat","narrative_detail","sendTitle","postalCode","avatarOption","synced","orgArr","forEach","FETCH_ORGS","Content","store","createStore","compose","applyMiddleware","thunk","App","required","minHeight","backgroundColor","HomeRedux","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.6e5424dd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nouserpic.9af42ba9.png\";","export enum profileActionTypes {\n    FETCH_PROFILE = 'FETCH_PROFILE',\n    INITIAL_RENDER_PROFILE = 'INITIAL_RENDER_PROFILE',\n    FETCH_PROFILE_SUCCESS =  'FETCH_PROFILE_SUCCESS',\n    FETCH_PROFILE_ERROR = 'FETCH_PROFILE_ERROR'\n}\n\nexport enum orgsActionTypes {\n    LOAD_ORGS = 'LOAD_ORGS',\n    FETCH_ORGS = 'FETCH_ORGS',\n    INITIAL_RENDER_ORGS = 'INITIAL_RENDER_ORGS',\n    FETCH_ORGS_SUCCESS =  'FETCH_ORGS_SUCCESS',\n    FETCH_ORGS_ERROR = 'FETCH_ORGS_ERROR'\n}","// Honestly, I'm don't know where this file supposed to be. \n// It doesn't look like I have to separate them\n// but when/if the app grows, then this separation will be necessary.  \n\nexport enum profileFetchStatuses {\n    NONE = 'none',\n    FETCHING = 'fetching',\n    SUCCESS = 'success',\n    ERROR = 'error'\n}\n\nexport enum orgFetchStatuses {\n    NONE = 'none',\n    FETCHING = 'fetching',\n    SUCCESS = 'success',\n    ERROR = 'error'\n}","import { StoreState, NarrativeAction } from \"../interfaces\";\n\n\n\nexport default function narrativeReducer(state: StoreState, action: NarrativeAction):StoreState   {\n    const payload = action.payload;\n    switch (action.type) {\n        \n        case 'LOAD_NARRATIVES':\n            return (\n                { ...state,\n                    narrativeState: payload\n                }\n            );\n            \n        break;\n        \n        default: \n                return state;\n    }\n}","import { Action, Reducer } from \"redux\";\nimport { baseReducer } from \"@kbase/ui-lib\"; \nimport { BaseStoreState } from \"@kbase/ui-lib\"; \nimport { StoreState } from \"../interfaces\";\n\nconst reducer: Reducer<StoreState | undefined, Action> = (state: StoreState | undefined, action: Action) => {\n  const baseState = baseReducer(state as BaseStoreState, action);\n  // if (baseState) {\n  //   return baseState as StoreState;\n  // }\n  return baseState as StoreState;\n};\n\nexport default reducer;","import { StoreState, OrgsAction } from '../interfaces';\n\nexport default function orgsReducer(state: StoreState, action: OrgsAction){\n    const payload = action.payload;\n    switch (action.type) {\n        case 'LOAD_ORGS':\n            return (\n                { ...state,\n                    orgState: payload\n                }\n            )\n            break;\n\n            default:\n                return state;\n    }\n}","import { Action, Reducer } from 'redux';\nimport narrativeReducer from './narrative_reducers';\nimport profileReducer from './profile_reducers';\nimport reducer from './reducer';\nimport { StoreState, NarrativeAction, loadProfileAction, OrgsAction } from  \"../interfaces\";\nimport { profileActionTypes, orgsActionTypes } from '../actions/actionTypes';\nimport orgsReducer from './org_reducers';\n\n\n\n//TODO: convert this to combine reducers\n\n\nconst rootReducer: Reducer<StoreState | undefined, Action> = (state: StoreState | undefined, action: Action) => {\n\n  // Inital combine state created by store is loaded first \n  const kbaseUIStore = reducer(state as StoreState, action);\n  // if state doesn't load for whatever the reason possibly could be \n  if (!state) {\n    // TODO: AKIYO - return intial state \n    return state;\n  }\n  \n  // root reducer is creating KbaseUIStore \n  if (kbaseUIStore) {\n    return kbaseUIStore as StoreState;\n  } \n  else {\n    switch(action.type) {\n        case \"LOAD_NARRATIVES\": \n            return narrativeReducer(state, action as NarrativeAction);\n        case profileActionTypes.FETCH_PROFILE_SUCCESS: \n            return profileReducer(state, action as loadProfileAction);\n        case \"LOAD_ORGS\":\n            return orgsReducer(state, action as OrgsAction);\n        \n      default:\n        return state;\n    }\n  }\n}\n\n\nexport default rootReducer;\n","import { StoreState, loadProfileAction } from \"../interfaces\";\nimport { profileActionTypes } from \"../actions/actionTypes\";\nimport { profileFetchStatuses } from '../fetchStatuses';\n\nexport default function profileReducer(state:StoreState, action: loadProfileAction): StoreState {\n    const payload = action.payload;\n    console.log('inprofile reducer ', payload)\n    switch (action.type) {\n        case profileActionTypes.FETCH_PROFILE_SUCCESS:\n            return (\n                {\n                    ...state,\n                    profileView: payload\n                }\n            )\n            break;\n                \n        case profileActionTypes.FETCH_PROFILE_ERROR:\n            return {\n                ... state,\n                profileView: { profileFetchStatus: profileFetchStatuses.ERROR}\n            }\n        case profileActionTypes.FETCH_PROFILE:\n            return {\n                ... state,\n                profileView: { profileFetchStatus: profileFetchStatuses.FETCHING }\n            }\n        case profileActionTypes.INITIAL_RENDER_PROFILE:\n            return {\n                ...state,\n                profileView: { profileFetchStatus: profileFetchStatuses.NONE }\n            }\n\n        default:\n            return state;\n    }\n\n}","import { createStore, compose, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\n\nimport { makeBaseStoreState } from \"@kbase/ui-lib\";\nimport { StoreState } from './interfaces';\nimport rootReducer from \"./reducers/index\";\nimport { profileFetchStatuses } from './fetchStatuses';\n\n// When app starts, this runs first to set the initial state.\nexport function makeInitialStoreState(): StoreState {\n    const baseStoreState = makeBaseStoreState();\n    \n    return {\n        ...baseStoreState,  \n        narrativeState: {\n            narrativeList: [],\n            loading: true\n        },\n        profileView: { profileFetchStatus: profileFetchStatuses.NONE },\n        orgState: {\n            orgList: [],\n            loading: true\n        }\n    };\n}\nexport function createReduxStore() {\n    return createStore(rootReducer, makeInitialStoreState(), compose(applyMiddleware(thunk)));\n}","import { UserProfileService, ProfileData} from \"../redux/interfaces\";\n\nexport async function getBFFServiceUrl(token: string, baseURL: string) {\n    // TODO: for dev, the baseUrl will be whatever works for the CRA workflow, which is ''.\n    // baseURL = 'https://ci.kbase.us/services'; // for dev\n    let url = baseURL + '/services/service_wizard';\n    const body = {\n        id: 0,\n        method: 'ServiceWizard.get_service_status',\n        version: '1.1',\n        params: [\n            {\n                module_name: 'bff',\n                version: null\n            }\n        ]\n    };\n    const stringBody = JSON.stringify(body);\n    const response = await fetch(url, {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n            Authorization: token\n        },\n        body: stringBody\n    });\n    const responseJson = await response.json();\n    return responseJson.result[0]['url'];\n}\n\n/**\n * Return profile data\n * @param id profile id\n * @param token KBase session cookie\n * @param baseUrl hostname\n */\nexport async function fetchProfileAPI(id: string, token: string, baseURL: string) {\n    const bffServiceUrl = await getBFFServiceUrl(token, baseURL);\n    let url = bffServiceUrl + '/fetchUserProfile/' + id;\n    const response = await fetch(url, {\n        method: 'GET'\n    });\n    if (response.status === 404) {\n        console.warn('404 response:', response);\n    } else if (response.status === 500) {\n        console.error('500 response:', response);\n        return;\n    }\n    try {\n        const profile = await response.json();\n        return profile;\n    } catch (err) {\n        console.error('profile fetch failed', response);\n    }\n}\n\n/**\n * update profile \n * method \"UserProfile.update_user_profile\" takes top level key of profile object. \n * @param token \n * @param baseURL \n * @param userdata \n */\nexport async function updateProfileAPI(token: string, baseURL: string, userdata:ProfileData) {\n    \n// export async function updateProfileAPI(token: string, baseURL: string, updatedUserProfleString:string) {\n    const body = {\n        version: '1.1',\n        method: 'UserProfile.update_user_profile',\n        params: [ {profile: {user: {realname: \"Akiyo Marukawa\", username: \"amarukawa\"}, userdata: {userdata}}}]\n    };\n    const stringBody = JSON.stringify(body);\n    //TODO: Akiyo - remove this after testing\n    baseURL = 'https://ci.kbase.us';\n    const url = baseURL + '/services/user_profile/rpc';\n    const response = await fetch(url, {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n            Authorization: token,\n            'Content-Type': 'application/json'\n        },\n        body: stringBody\n    });\n    if( response.status === 500) {\n        console.error('500 response:', response);\n        return;\n    }\n}\n\n/**\n * Return list of narratives\n * @param param shared/mine/public\n * @param token kbase session cookie\n */\nexport async function fetchNarrativesAPI(param: string, token: string, baseURL: string) {\n    const bffServiceUrl = await getBFFServiceUrl(token, baseURL);\n    let url = bffServiceUrl + '/narrative_list/' + param;\n    const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n            Authorization: token\n        }\n    });\n    if (response.status === 500) {\n        console.error('Fetch Narratives 500 response:', response);\n        return;\n    }\n    try {\n        const narratives = await response.json();\n        return narratives;\n    } catch (err) {\n        console.error('fetch narratives failed', response);\n    }\n}\n\n/**\n * returns list of orgs that profile and logged in user are both associated with.\n * @param id id of the profile\n * @param token kbase session cookie\n */\nexport async function fetchOrgsOfProfileAPI(id: string, token: string, baseURL: string) {\n    const bffServiceUrl = await getBFFServiceUrl(token, baseURL);\n    const url = bffServiceUrl + '/org_list/' + id;\n    const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n            Authorization: token\n        }\n    });\n    if (response.status === 500) {\n        console.error('500 response:', response);\n        return;\n    }\n    try {\n        const orgs = await response.json();\n        return orgs;\n    } catch (err) {\n        console.error('fetch org failed', response);\n    }\n}\n\n/**\n * returns list of users that are filtered by search values\n * @param searchValue search values\n * @param token kbase session cookie\n */\nexport async function filteredUserAPI(searchValue: string, token: string, baseURL: string) {\n    const body = {\n        version: '1.1',\n        method: 'UserProfile.filter_users',\n        params: [{ filter: searchValue }]\n    };\n    const stringBody = JSON.stringify(body);\n    const url = baseURL + '/services/user_profile/rpc';\n    const response = await fetch(url, {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n            Authorization: token,\n            'Content-Type': 'application/json'\n        },\n        body: stringBody\n    });\n    if (response.status === 500) {\n        console.error('500 response:', response);\n        return;\n    }\n    try {\n        const res = await response.json();\n        // if you try to: return response.json, it will get error below\n        // Unhandled Rejection (TypeError): Failed to execute 'json' on 'Response': body stream is locked\n        // but assiging it to a vairable somehow magically works.\n        return res;\n    } catch (err) {\n        console.error('fetch search users failed', response);\n    }\n}\n","import { ThunkDispatch } from \"redux-thunk\";\nimport { StoreState, NarrativeData } from \"../interfaces\";\nimport { AnyAction} from 'redux';\nimport { fetchNarrativesAPI } from '../../util/API';\n\n\nconst LOAD_NARRATIVES = 'LOAD_NARRATIVES';\n\n/**\n * Fetch narratives dependeing on the filter.\n * filter is one of following: \"mine\", \"shared\", \"public\", \"they\" <-- gender-neutral singular they\n * \"they\" is when logged-in user is viewing other user's profile. \n * \"they\" - fetch both \"public\" and \"shared\" profile and fileter response with profileID\n * @param filter \n */\nexport function loadNarratives (filter:string, profileID: string) {\n    // ThunkDispatch<RootState(Store), ExtraArg, Action>;\n    return async function (dispatch:ThunkDispatch<StoreState, void, AnyAction>, getState: () => StoreState) {\n        const rootStore = getState();\n        if(rootStore.auth.userAuthorization !== null){ \n            const token = rootStore.auth.userAuthorization.token;\n            const baseURL = rootStore.app.config.baseUrl;\n\n            //TODO: AKIYO replace ci.kbase with baseURL\n            switch(filter) {\n                case \"they\":\n                    const publicNarratives = fetchNarrativesAPI('public', token, 'https://ci.kbase.us/');\n                    const sharedNarratives = fetchNarrativesAPI('shared', token, 'https://ci.kbase.us/');\n                    let allNarratives:Array<NarrativeData> = [];\n                    let narrativeList:Array<NarrativeData> = [];\n                    Promise.all([publicNarratives, sharedNarratives]).then((response) => {\n                        // generate combined narrative list \n                        if ( typeof response[0] !== 'undefined' && typeof response[1] !== 'undefined') {\n                            allNarratives = response[0].concat(response[1]);\n                        } else if (typeof response[0] === 'undefined' && typeof response[1] !== 'undefined' ) {\n                            // if public narrative fetch came back empty, there is something major wrong happened\n                            console.error('error occuerred during fetching narratives.');\n                            allNarratives = response[1];\n                        } else if (typeof response[0] !== 'undefined' && typeof response[1] === 'undefined' ) {\n                            allNarratives = response[0];\n                        } else {\n                            // if public narrative fetch came back empty, there is something major wrong happened\n                            console.error('error occuerred during fetching narratives.');\n                            narrativeList  = [\n                                {\n                                    wsID: '',\n                                    permission: '',\n                                    name: 'Something went wrong. Please check console for error messages.',\n                                    last_saved: 0,\n                                    users: {},\n                                    narrative_detail: { creator: '' }\n                                }\n                            ]\n                        }\n                        \n                        for (let i = 0; i < allNarratives.length; i +=1) {\n  \n                            if( allNarratives[i].narrative_detail.creator ===  profileID) {\n                                narrativeList.push(allNarratives[i]);\n                            }\n                        }\n                        \n                        dispatch({ type: LOAD_NARRATIVES, payload: { narrativeList: narrativeList, \n                                                                        loading: false }})     \n                                \n                    })\n                    break;\n                case 'mine':\n                case 'shared':\n                case 'public':\n                    const response = await fetchNarrativesAPI(filter, token, 'https://ci.kbase.us/');\n\n                    if(typeof response !== 'undefined') {\n                        // console.log(\"rootstore\", rootStore)\n                        dispatch({ type: LOAD_NARRATIVES, payload: { narrativeList: response, loading: false }})\n                    } else {\n                        let fetchFailed =  [\n                            {\n                                wsID: '',\n                                permission: '',\n                                name: 'Something went wrong. Please check console for error messages.',\n                                last_saved: 0,\n                                users: {},\n                                narrative_detail: { creator: '' }\n                            }\n                        ]\n\n                        dispatch({ type: LOAD_NARRATIVES, payload: { narrativeList: fetchFailed, loading: false }})\n                    }\n                    break;\n\n            }            \n                        \n        } else {\n            console.error(\"I don't think this even should happen, but if it did, I must ask 'what kind of horrible bugs did you you create?'\")\n        }\n    }\n}\n","import React from 'react';\nimport { OrgsAction, OrgProp, loadProfileAction, ProfileView } from '../interfaces';\nimport { profileActionTypes, orgsActionTypes } from './actionTypes';\n\n\n// fetching profile data is initiated\nexport function fetchProfile(){ // put type!\n    console.log('this is profile spinner setter')\n    return {\n        type: profileActionTypes.FETCH_PROFILE\n    }\n}\n\n// fetching profile data was successful \nexport function loadProfile(payload:ProfileView):loadProfileAction {\n    return {\n        type: profileActionTypes.FETCH_PROFILE_SUCCESS,\n        payload\n    }\n}\n\n// fetch profile failed\nexport function fetchErrorProfile() {\n    return {\n        type: profileActionTypes.FETCH_PROFILE_ERROR,\n    }\n}\n\n// during mounting - render before componentDidMount\nexport function initialRenderProfile() { \n    return {\n        type: profileActionTypes.INITIAL_RENDER_PROFILE,\n    }\n}\n\n// fetching Orgs was successful \nexport function loadOrgs(orgList: Array<OrgProp>, loading: boolean):OrgsAction {\n    return {\n        type: orgsActionTypes.FETCH_ORGS,\n        payload: {\n            orgList: orgList,\n            loading: loading\n        }\n    }\n\n}\n\n// fetching orgs is initiated\nexport function fetchOrgs(){ // put type!\n    console.log('this is org spinner setter') \n    return {\n        type: orgsActionTypes.FETCH_ORGS\n    }\n    \n}","import { ThunkDispatch } from 'redux-thunk';\nimport { StoreState, UserProfileService, ProfileView } from \"../interfaces\";\nimport { AnyAction } from 'redux';\nimport { fetchProfileAPI, updateProfileAPI } from '../../util/API';\nimport { sendTitle } from '@kbase/ui-lib';\nimport { fetchProfile, loadProfile, fetchErrorProfile } from '../actions/actions';\nimport { profileFetchStatuses } from '../fetchStatuses';\n\n/**\n * fetch user profile\n *  @param {string} id  profile ID\n */\nexport function getProfile(profileID:string) {\n    \n    return async function (dispatch:ThunkDispatch<StoreState, void, AnyAction>, getState:() => StoreState ) {\n        // set the life cycle state \"profileIsFetching\" to \"fetching\"\n        dispatch(fetchProfile())\n\n        const rootStore = getState();\n        if(rootStore.auth.userAuthorization !== null) {\n            const token = rootStore.auth.userAuthorization.token;\n            const baseURL = rootStore.app.config.baseUrl;\n            let payload:ProfileView;\n            let response:UserProfileService = await fetchProfileAPI(profileID, token, baseURL);\n            if (typeof response !== 'undefined') {\n                if (response.user.username !== rootStore.auth.userAuthorization.username) {\n                    dispatch(sendTitle('User Profile for ' + response.user.realname));\n                }\n                // shape response to profile before dispatch \n                payload = {\n                    userName: {\n                        userID: response.user.username,\n                        name: response.user.realname\n                    },\n                    profileData: {\n                        organization: response.profile.userdata.organization,\n                        department: response.profile.userdata.department,\n                        city: response.profile.userdata.city,\n                        state: response.profile.userdata.state,\n                        postalCode: response.profile.userdata.postalCode,\n                        country: response.profile.userdata.country,\n                        affiliations: response.profile.userdata.affiliations,\n                        researchStatement: response.profile.userdata.researchStatement,\n                        jobTitle: response.profile.userdata.jobTitle,\n                        jobTitleOther: response.profile.userdata.jobTitleOther,\n                        researchInterests: response.profile.userdata.researchInterests,\n                        fundingSource: response.profile.userdata.fundingSource,\n                        gravatarDefault: response.profile.userdata.gravatarDefault,\n                        avatarOption: response.profile.userdata.avatarOption\n                    },\n                    gravatarHash: response.profile.synced.gravatarHash,\n                    profileFetchStatus: profileFetchStatuses.SUCCESS\n                }\n                dispatch(loadProfile(payload));\n            } else {\n                //  set \"profileIsFetching\" to \"error\"\n                dispatch(fetchErrorProfile());\n            }\n        }\n    }\n}\n\nexport function updateProfile(profile:any) {\n    return async function (dispatch:ThunkDispatch<StoreState, void, AnyAction> , getState:() => StoreState ) {\n        dispatch(fetchProfile())\n        const rootStore = getState();\n        if(rootStore.auth.userAuthorization !== null) {\n            const token = rootStore.auth.userAuthorization.token;\n            const baseURL = rootStore.app.config.baseUrl;\n            updateProfileAPI(token, baseURL, profile);\n        }\n    }\n}","import React from'react';\nimport {OrgProp} from '../../redux/interfaces';\nimport { Card } from 'antd';\n\n\ninterface Props {\n    orgList: Array<OrgProp>;\n}\n\n/**\n * render org component \n * loading is false when fetch organization completes and returns response. \n * @param props \n */\nfunction Orgs(props: Props) {\n    console.log(props)\n    let orgList = props.orgList;\n    return(\n        <Card className=\"card-with-height\" style={{ margin: '8px 0px' }} title=\"Organizations\">\n            <ul style={{ textAlign: 'left' }}>\n                {orgList.map((org, index) => (\n                    <li key={index}>\n                        <a href={org.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                            {org.name}\n                        </a>\n                    </li>\n                ))}\n            </ul>\n        </Card>\n    )\n    \n}\n\nexport default Orgs;","import React from 'react';\nimport { Spin } from 'antd';\n\n\nexport default function Spinner(props:any) {\n    return(\n        <div style={{ textAlign: 'center' }}><Spin size=\"large\" /></div>\n    )\n}","import React from 'react';\n\n\nexport default function ErrorMessage(props:any) {\n    return(\n        <div style={{ textAlign: 'center' }}><p>Something went wrong... </p></div>\n    )\n}","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { StoreState } from '../../redux/interfaces';\nimport WhichComponent from './WhichComponent';\n\nfunction mapStateToProps(state: StoreState) {\n    console.log('orgs container', state);\n    return { orgList: state.orgState.orgList };\n};\n\nexport default connect(mapStateToProps)(WhichComponent);","import React from 'react';\n\nimport Orgs from './Orgs';\nimport Spinner from '../Spinner';\nimport ErrorMessage from '../ErrorMessage';\n\nexport default function WhichComponent(props:any) {\n    console.log('whichcomponent', props)\n    let foo = props\n    switch(foo.orgsFetchStatus){\n        case 'none':\n            return <Spinner />;\n            break;\n\n        case 'fetching':\n                return <Spinner />;\n                break;\n\n        case 'success':\n            return <Orgs orgList={props.orgList} />;\n            break;\n\n        case 'error':\n            return <ErrorMessage />;\n            break;\n\n        default: \n            return ( <div>hello</div>);\n            break;\n\n    }\n     \n}","import React from 'react';\nimport { UserName, ProfileData } from '../../redux/interfaces';\nimport { Row, Col, Card, Input} from 'antd';\nimport nouserpic from '../../assets/nouserpic.png';\nimport OrgsContainer from '../Orgs/OrgsContainer';\nconst { Meta } = Card;\nconst { TextArea } = Input;\n\n\ninterface Props {\n    userName: UserName;\n    editEnable: Boolean;\n    profileData: ProfileData;\n    gravatarHash: string;\n    profileFetchStatus: string;\n};\n\n/**\n * Returns profile component.\n * @param props\n */\nfunction Profile(props: Props) {\n    console.log('profile props', props)\n    let profile: ProfileData\n        profile = props.profileData;\n\n    // Set initial value for properties that are arrays. \n    // otherwise .map will complain during initial render. \n\n    // set affiliations\n    function setAffiliations(){\n        if(typeof profile.affiliations !== 'undefined' && Array.isArray(profile.affiliations)){\n            return profile.affiliations;\n        } else {\n            return [\n                {\n                    title: '',\n                    organization: '',\n                    started: '',\n                    ended: ''\n                }\n            ];\n        }\n    }\n    // set researchInterests to an empty array inital render.\n    let researchInterests: Array<string> = [];\n\n    // set org to an empty org list for inital render.\n    let orgs = [\n        {\n            name: '',\n            url: ''\n        }\n    ];\n    \n    // Set researchInterests\n    if (typeof profile.researchInterests !== 'undefined' && Array.isArray(profile.researchInterests)) {\n        researchInterests = profile.researchInterests;\n    }\n\n    // Set gravatarURL\n    function gravaterSrc(){\n        if (profile['avatarOption'] === 'silhoutte' || !props.gravatarHash) {\n            // let gravatar = <img style={{ maxWidth: '100%', margin: '8px 0px' }} alt=\"avatar\" src={nouserpic} />;\n            return nouserpic\n        } else if (props.gravatarHash) {\n            return 'https://www.gravatar.com/avatar/' + props.gravatarHash + '?s=300&amp;r=pg&d=' + profile.gravatarDefault;\n            // let gravatar = <img style={{ maxWidth: '100%', margin: '8px 0px' }} alt=\"avatar\" src={gravaterSrc} />;\n        }\n        return 'https://www.gravatar.com/avatar/' + props.gravatarHash + '?s=300&amp;r=pg&d=' + profile.gravatarDefault;\n    }\n\n    // Set jobTitle\n    function setJobTitle():string {\n        if (profile.jobTitle === 'Other' && typeof profile.jobTitle !== 'undefined') {\n            return profile.jobTitleOther;\n        } else if (typeof profile.jobTitle !== 'undefined') {\n            return profile.jobTitle;\n        } else {\n            return '';\n        }\n    }\n    \n\n    return (\n        <Row style={{ padding: 16 }}>\n            <Row gutter={8}>\n                <Col span={8}>\n                    <Card style={{ margin: '8px 0px', textAlign: 'center' }}>\n                        <img style={{ maxWidth: '100%', margin: '8px 0px' }} alt='avatar' src={ gravaterSrc() } />\n                        {/* {gravatar} */}\n                    </Card>\n                    {/* <pre>\n                        { JSON.stringify(props.profileData, null, 2) }\n                    </pre> */}\n                    <Card\n                        style={{ margin: '8px 0px', textAlign: 'left' }}\n                        title={props.userName.name}\n                    >\n                        <Meta title=\"User ID\" />\n                        <Input className=\"clear-disabled\" disabled defaultValue={props.userName.userID} />\n                        <Meta title=\"Position\" />\n                        <Input className=\"clear-disabled\" defaultValue={setJobTitle()}/>\n                        <Meta title=\"Department\" />\n                        <Input className=\"clear-disabled\" disabled defaultValue={profile.department} />\n                        <Meta title=\"Organization\" />\n                        <Input className=\"clear-disabled\" disabled defaultValue={profile.organization}/>\n                        <Meta title=\"Location\" />\n                        <Input className=\"clear-disabled\" disabled defaultValue={profile.city}/>\n                        <Input className=\"clear-disabled\" disabled defaultValue={profile.state}/>\n                        <Input className=\"clear-disabled\" disabled defaultValue={profile.country}/>\n                        <Meta title=\"Primary Funding Source\" />\n                        <Input className=\"clear-disabled\" disabled defaultValue={profile.fundingSource}/>\n                    </Card>\n                </Col>\n                <Col span={16}>\n                    <Row gutter={8}>\n                        <Col span={12}>\n                            <Card className=\"card-with-height\" style={{ margin: '8px 0px' }} title=\"Research Interests\">\n                                <ul style={{ textAlign: 'left' }}>\n                                    {researchInterests.map((interest) => (\n                                        <li key={interest}>{interest}</li>\n                                    ))}\n                                </ul>\n                            </Card>\n                        </Col>\n                        <Col span={12}>\n                            <Card className=\"card-with-height\" style={{ margin: '8px 0px' }} title=\"Organizations\">\n                                <OrgsContainer />\n                            </Card>\n                        </Col>\n                    </Row>\n                    <Row>\n                        {/* TODO:AKIYO FIX - when the box is very small it doesn't break or hide word */}\n                        <Card\n                            style={{ margin: '8px 0px' }}\n                            title=\"Research or Personal Statement\"\n                        >\n                            <TextArea autosize readOnly className='clear-disabled'  defaultValue={props.profileData.researchStatement}/>\n                        </Card>\n                        <Card style={{ margin: '8px 0px' }} title=\"Afflications\">\n                            <ul style={{ textAlign: 'left' }}>\n                                {setAffiliations().map((position, index) => (\n                                    <li key={index}>\n                                        {position.title} @ {position.organization}, {position.started} -{' '}\n                                        {position.ended}{' '}\n                                    </li>\n                                ))}\n                            </ul>\n                        </Card>\n                    </Row>\n                </Col>\n            </Row>\n        </Row>\n    );\n} \n\nexport default Profile;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Action, Dispatch } from 'redux';\n\nimport { UserName, ProfileData, StoreState, ProfileView, ProfileFetchStatus } from '../../redux/interfaces';\nimport {  updateProfile } from '../../redux/actions';\nimport whichcomponent from './WhichComponent';\n\nimport { profileFetchStatuses } from '../../redux/fetchStatuses';\n\ninterface PropsWithProfileData {\n    userName: UserName;\n    editEnable: Boolean;\n    profileData: ProfileData;\n    gravatarHash: string;\n    profileFetchStatus: string;\n};\ninterface PropsWithoutProfileData {\n    profileFetchStatus: string;\n};\n\ntype Props = PropsWithoutProfileData | PropsWithProfileData;\n\ninterface DispatchProps {\n    updateProfile: (profileID: string) => void;\n};\n\n\ninterface OwnProps {};\nlet component: JSX.Element;\nfunction mapStateToProps(state: StoreState): Props {\n    console.log('profile state container', state)\n    // token can be null\n    let userAuthToken;\n    if( state.auth.userAuthorization !== null ) {\n        userAuthToken = state.auth.userAuthorization.token\n    } else {\n        userAuthToken = '';\n    }\n    switch(state.profileView.profileFetchStatus) {\n        case profileFetchStatuses.NONE:\n            return {\n                    profileFetchStatus: state.profileView.profileFetchStatus,\n                }\n                break;\n\n        case profileFetchStatuses.NONE:\n            return {\n                    profileFetchStatus: state.profileView.profileFetchStatus,\n                }\n                break;\n                \n        case profileFetchStatuses.SUCCESS:\n            let foo = state.profileView as ProfileView;\n            return {\n                userName: foo.userName,\n                editEnable: false,\n                profileData: foo.profileData,\n                gravatarHash: foo.gravatarHash,\n                profileFetchStatus: foo.profileFetchStatus\n            }\n            break;\n\n        default:\n            return {profileFetchStatus: state.profileView.profileFetchStatus}\n            break;\n    }\n\n};\n\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        updateProfile: (profileID: string) => {\n            return dispatch(updateProfile(profileID) as any);\n        }\n    };\n};\n\nexport default connect<Props, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps, \n    mapDispatchToProps\n)(whichcomponent);\n","import React from 'react';\n\nimport Profile from './Profile';\nimport Spinner from '../Spinner';\nimport ErrorMessage from '../ErrorMessage'\n\nexport default function WhichComponent(props:any) {\n    console.log('whichcomponent', props)\n    let foo = props\n    switch(foo.profileFetchStatus){\n        case 'none':\n            return <Spinner />;\n            break;\n\n        case 'fetching':\n                return <Spinner />;\n                break;\n\n        case 'success':\n            return <Profile userName={props.userName} \n            editEnable= {props.editEnable}\n            profileData= {props.profileData}\n            gravatarHash= {props.gravatarHash}\n            profileFetchStatus= {props.profileFetchStatus}/>;\n            break;\n\n        case 'error':\n            return <ErrorMessage />;\n            break;\n\n        default: \n            return ( <div>hello</div>);\n            break;\n\n    }\n     \n}","/**\n *  Narrative.tsx is a view component\n *\n */\nimport React from 'react';\nimport { dateDisplay } from '../../util/dateDisplay'; // date format\nimport { Table, Popover } from 'antd';\nimport { NarrativeData } from '../../redux/interfaces'; //interface\n\ninterface TableData {\n    key: string;\n    wsID: string;\n    name: string;\n    last_saved: number;\n}\n\ninterface Props {\n    narratives: Array<NarrativeData>;\n    loading: boolean;\n}\n\n/**\n * Returns a component with list of narratives in a table.\n * @param props\n */\nfunction Narratives(props: Props) {\n    console.log(props)\n    let data: Array<TableData> = [];\n    let loading = props.loading;\n\n    const colums = [\n        {\n            title: 'Title',\n            dataIndex: 'name',\n            width: 350,\n            key: 'wsID',\n            render: (text: string, row: TableData) => {\n                let url = '/narrative/' + row.wsID;\n                return (\n                    <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n                        {text}\n                    </a>\n                );\n            },\n            sorter: (a: TableData, b: TableData) => {\n                let nameA = a.name.toUpperCase();\n                let nameB = b.name.toUpperCase();\n                if (nameA < nameB) {\n                    return -1;\n                }\n                if (nameA > nameB) {\n                    return 1;\n                }\n                return 0;\n            }\n        },\n        {\n            title: 'Last Saved',\n            dataIndex: 'last_saved',\n            width: 190,\n            render: (text: string, row: TableData) => {\n                let day = dateDisplay(row.last_saved);\n                return (\n                    <Popover placement=\"right\" content={day[0]}>\n                        {day[1]}\n                    </Popover>\n                );\n            },\n            sorter: (a: TableData, b: TableData) => {\n                let lastSavedA = a.last_saved;\n                let lastSavedB = b.last_saved;\n                if (lastSavedA < lastSavedB) {\n                    return 1;\n                }\n                if (lastSavedA > lastSavedB) {\n                    return -1;\n                }\n                return 0;\n            }\n        }\n    ];\n\n    for (let i = 0; i < props.narratives.length; i += 1) {\n        let narrative = props.narratives[i];\n        if (narrative.permission === 'r' || narrative.permission === 'n') {\n            if (Object.keys(narrative.users).length <= 0) {\n                data.push({\n                    key: narrative.wsID,\n                    wsID: narrative.wsID,\n                    name: narrative.name,\n                    last_saved: narrative.last_saved\n                });\n            } else {\n                data.push({\n                    key: narrative.wsID,\n                    wsID: narrative.wsID,\n                    name: narrative.name,\n                    last_saved: narrative.last_saved\n                });\n            }\n        } else {\n            const narrativeDetail = narrative['narrative_detail'];\n            let users = '';\n            for (let user in narrative.users) {\n                if (user !== narrativeDetail.creator) users = users + user + ', ';\n            }\n            data.push({\n                key: narrative.wsID,\n                wsID: narrative.wsID,\n                name: narrative.name,\n                last_saved: narrative.last_saved\n            });\n        }\n    }\n\n    return (\n        <Table<TableData>\n            style={{ width: '85%', margin: 'auto' }}\n            columns={colums}\n            dataSource={data}\n            loading={loading}\n        />\n    );\n}\n\nexport default Narratives;\n","/**\n * returns array of date in MMM DD YYY HH:MM:SS and one of below:\n * less than a min ago, # hours ago, # days ago, day: MMM DD YYYY (if it's more than a month)\n * @param {string} date date format\n * \n */\nexport function dateDisplay(date: number): Array<string> {\n    let delta = (Date.now() - +new Date(date))/1000000 ;\n    let dayString = (new Date(date)).toString();\n    // date format: MMM DD YYYY\n    let day = dayString.slice(4, 7) + ' ' + dayString.slice(8, 10) + ' ' + dayString.slice(11, 15);\n    //  date format: MMM DD YYYY HH:MM:SS\n    let dayAndTime = day + ' ' + dayString.slice(16, 24);\n    if( delta >= 2628 ) {\n        // more than a month ago\n        return [dayAndTime, day];\n    } else if( delta < 2628 && delta >= 86.4) {\n        // less than a month ago, but more than a day ago\n        let days = (delta/(86.4)).toFixed(0);\n        return [dayAndTime, days + ' days ago'];\n    }\n    else if( delta < 86.4 && delta >= 3.6) {\n        return [day, (delta/3.6).toFixed(0) + ' hours ago'];\n    } else if(delta < 3.6 && delta >= 0.06) {\n        return [dayAndTime, ((delta)*10).toFixed(0) + ' min ago'];\n    } else {\n        return [dayAndTime, 'less than a min ago']\n    }\n};","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { StoreState } from '../../redux/interfaces';\nimport Narratives from './Narratives';\n\n\n\nfunction mapStateToProps (state: StoreState) { \n    console.log('narrativeState', state);\n    return {narratives: state.narrativeState.narrativeList, loading: state.narrativeState.loading};\n};\n\n\nexport default connect(mapStateToProps)(Narratives);","import React from 'react';\nimport { Select } from 'antd';\nimport { filteredUserAPI } from '../../util/API';\nimport { UsernameRealname } from '../../redux/interfaces';\nconst { Option } = Select;\n\n\ninterface State {\n    data: Array<UsernameRealname>;\n    mouseLeave: boolean;\n}\n\ninterface Props {\n    token: string;\n    baseURL: string;\n}\n\ninterface Response {\n    version: string;\n    result: Array<any>;\n}\n\n/**\n * View component with user search feature.\n * @param props\n */\nclass SearchUsers extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            data: [],\n            mouseLeave: false\n        };\n        this.onChangeHandler = this.onChangeHandler.bind(this);\n        this.onSearchHandler = this.onSearchHandler.bind(this);\n        this.onMouseLeaveHandler = this.onMouseLeaveHandler.bind(this);\n        this.onMouseEnterHandler = this.onMouseEnterHandler.bind(this);\n    }\n    /**\n     * when search value is more than 2 charactors, \n     * it makes API call and returns filtered list of users \n     * \n     * @param value \n     */\n    onSearchHandler(value: string): void {\n        if (value.length > 2 && this.state.mouseLeave !== true) {\n            filteredUserAPI(value, this.props.token, this.props.baseURL).then((response: Response) => {\n                if (typeof response !== 'undefined') {\n                    this.setState({ data: response['result'][0] });\n                } else {\n                    this.setState({\n                        data: [{ username: 'error', realname: 'Something went wrong. Try again later.' }]\n                    });\n                }\n            });\n        } else {\n            return;\n        }\n    }\n    onMouseLeaveHandler(): void {\n        this.setState({ mouseLeave: true });\n    }\n    onMouseEnterHandler(): void {\n        this.setState({ mouseLeave: false });\n    }\n    onChangeHandler(value: string): void {\n        if (value !== 'error' && typeof value !== 'undefined') {\n            let url = '/#user/' + value;\n            window.open(url, '_blank');\n        }\n    }\n\n    render() {\n        let data = this.state.data;\n        return (\n            <Select\n                mode=\"single\"\n                style={{ width: 250 }}\n                allowClear\n                showSearch\n                placeholder=\"enter more than 3 characters\"\n                showArrow={false}\n                onSearch={this.onSearchHandler}\n                onChange={this.onChangeHandler}\n                onMouseLeave={this.onMouseLeaveHandler}\n                onMouseEnter={this.onMouseEnterHandler}\n                optionFilterProp=\"children\"\n                filterOption={(inputValue, option) => {\n                    return true;\n                }}\n            >\n                {data.map((item) => {\n                    return (\n                        <Option key={item['username']}>\n                            {item['realname']} ({item['username']})\n                        </Option>\n                    );\n                })}\n            </Select>\n        );\n    }\n}\n\nexport default SearchUsers;\n","import React from 'react';\nimport { connect} from 'react-redux';\n\nimport SearchUsers from './SearchUsers';\n\ninterface AppState {\n    app: {\n        config: {\n            baseUrl: string;\n        }\n    };\n    auth: AuthData;\n}\n\ninterface AuthData {\n    userAuthorization: {\n        realname: string;\n        roles: Array<string>;\n        token: string;\n        username: string;\n    }\n}\n\nconst mapStateToProps = (state:AppState) => {\n    // Since this component is just a redux wrapper \n    // and not modifying state to make component props\n    // simply return state asd props\n    return state\n}\nfunction SearchUsersRedux(mapStateToProps:AppState) {\n    return (\n        <SearchUsers token={mapStateToProps.auth.userAuthorization.token} baseURL={mapStateToProps.app.config.baseUrl}/>\n    )\n}\n\nexport default connect(mapStateToProps)(SearchUsersRedux);","import React from 'react';\n\nimport { Tabs } from 'antd';\n\nimport ProfileContainer from '../components/Profile/ProfileContainer';\nimport NarrativeContainer from '../components/Narratives';\nimport { OrgProp, UserName } from '../redux/interfaces';\nimport SearchUsersContainer from '../components/SearchUsers/SearchUsersContainer';\n\n\nconst TabPane = Tabs.TabPane;\n/**\n * Class component that keeps states for all the variables that viewer/child components needs.\n * This can converted into Redux if needed.\n * Parent component App.tsx\n */\n\n// add Narrative_detail if needed. Currently, data in the object is not used - Akiyo.\ninterface HomeState {\n    userName: UserName;\n    editEnable: Boolean; // profile edit enable \n    narrativesLoaded: Boolean;\n    organizations: Array<OrgProp>;\n    organizationsLoaded: Boolean;\n    gravatarHash: string;\n}\n\n\nexport interface HomeProps {\n    token: string;\n    authUsername: string;\n    username: string | null;\n    baseURL: string;\n    setTitle: (title: string) => void;\n    loadNarratives: (filter: string, profileID: string) => void;\n    getProfile: (profileID: string) => void;\n    updateProfile: (profileID: string) => void;\n    loadOrgsAction: (profileID: string) => void;\n}\n\nclass Home extends React.Component<HomeProps, HomeState> {\n    constructor(props: HomeProps) {\n        super(props);\n        this.state = {\n            userName: {\n                name: '',\n                userID: ''\n            },\n            editEnable: false,\n            narrativesLoaded: false,\n            organizations: [],\n            organizationsLoaded: false,\n            gravatarHash: ''\n        };\n    }\n\n\n    componentDidMount() {\n        let username;\n        if (this.props.username) {\n            username = this.props.username;\n            this.props.setTitle('User Profile for ' + username);\n        } else {\n            username = this.props.authUsername;\n            this.props.setTitle('Your User Profile');\n            this.setState({ editEnable: true })\n        }\n\n         /**\n         * fetch profile data for the diplayed profile\n         * and load it to the profile component.\n         *  @param {string} id  profile ID\n         */\n        this.props.getProfile(username); // reduux\n\n\n        /**\n         * fetch orgs that user blongs to the profile\n         * and load them to the orgs component.\n         *  @param {string} id  profile ID\n         */\n        this.props.loadOrgsAction(username); //redux\n\n        /**\n         * Returns narratives that shows in Narrative table.\n         *\n         *\n         * Below logic determines which set of narratives needs to be fetched.\n         * if the viewing profile userid is not the logged in user,\n         * then fetch all of shared and public narrative and filter with the viewing profile userid.\n         */\n        if (typeof this.props.username === 'undefined'|| typeof this.props.authUsername === 'undefined') {\n            // if there is no logged in user in run time config (redux app state)\n            // returns an empty narrative list\n            console.error('How did this even happened? Check error message from Kbase-UI.')\n            return;\n        } else {            \n            // when logged-in user is viewing own profile. \n            if (this.props.username === this.props.authUsername || this.props.username === null) {\n                    this.props.loadNarratives('mine', this.props.authUsername ); // redux \n            } else {\n                /**\n                 * when logged in user is not viewing other user's profile\n                 * pass filter \"they\" <-- gender-neutral singular they\n                 * which tfetch both \"public\" and \"shared\" and filter response with profileID\n                 */\n                this.props.loadNarratives('they', this.props.username); // redux \n            }\n        }\n    }\n\n    componentDidUpdate(prevProps: any, prevState: any) {\n        // This privents from infinate component loading loop.\n        if (this.state === prevState) {\n            return;\n        }\n    }\n    // wrap search user component with a div so that display can be controlled.\n    // in order to place search component/box on the navigation tab, \n    // make it into a variable and insert it as tab title. \n    searchOnATab = <div className=\"search-on-a-tab\">Search other users <SearchUsersContainer /></div>\n    \n    render() {\n        return (\n            <div className=\"profile-tabs\">\n                <Tabs type=\"line\" defaultActiveKey=\"1\">\n                    <TabPane  tab=\"Profile\" key=\"1\">\n                        <ProfileContainer />\n                    </TabPane>\n                    <TabPane tab=\"Narratives\" key=\"3\">\n                        <NarrativeContainer />\n                    </TabPane>\n                    {/* Insert search user component div as a title to place it on the navigation tab  */}\n                    <TabPane disabled tab={this.searchOnATab} key=\"8\"></TabPane>\n                </Tabs>\n            </div>\n        );\n    }\n}\n\nexport default Home;\n","import { connect } from 'react-redux';\nimport { Action, Dispatch } from 'redux';\n\nimport Home from './Home';\nimport { StoreState } from '../redux/interfaces';\nimport { sendTitle } from '@kbase/ui-lib';\nimport { loadNarratives, getProfile, updateProfile, loadOrgsAction } from '../redux/actions/index';\n\ninterface OwnProps {}\n\ninterface StateProps {\n    token: string;\n    authUsername: string;\n    username: string | null;\n    baseURL: string;\n}\n\ninterface DispatchProps {\n    setTitle: (title: string) => void;\n    loadNarratives: (filter:string, profileID: string) => void;\n    getProfile: (profileID: string) => void;\n    updateProfile: (profileID: string) => void;\n    loadOrgsAction: (profileID: string) => void;\n}\n\n// TODO this should be part of the view definition\ninterface UserProfileViewParams {\n    username?: string;\n}\n\nfunction mapStateToProps(state: StoreState, ownProps: OwnProps): StateProps {\n    const {\n        auth: { userAuthorization },\n        app: {\n            config: { baseUrl },\n            runtime: {\n                navigation: { params: rawParams }\n            }\n        }\n    } = state;\n    if (!userAuthorization) {\n        throw new Error('This plugin only operates with authentication; no KBase token in store');\n    }\n    const params = (rawParams as unknown) as UserProfileViewParams;\n    return {\n        token: userAuthorization.token,\n        authUsername: userAuthorization.username,\n        username: params.username || null,\n        baseURL: baseUrl\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, ownProps: OwnProps): DispatchProps {\n    return {\n        loadNarratives: (filter: string, profileID: string) => {\n            return dispatch(loadNarratives(filter, profileID) as any);\n        },\n        setTitle: (title: string) => {\n            return dispatch(sendTitle(title) as any);\n        },\n        updateProfile: (profileID: string) => {\n            return dispatch(updateProfile(profileID) as any);\n        },\n        getProfile: (profileID: string) => {\n            return dispatch(getProfile(profileID) as any);\n        },\n        loadOrgsAction: (profileID: string) => {\n            return dispatch(loadOrgsAction(profileID) as any);\n        }\n        \n    };\n}\n\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(Home);\n","import { ThunkDispatch } from 'redux-thunk';\nimport { StoreState, OrgProp, Org } from '../interfaces';\nimport { AnyAction } from 'redux';\nimport { fetchOrgsOfProfileAPI } from '../../util/API'\nimport { loadOrgs } from '../actions/actions';\n\n// const LOAD_ORGS = 'LOAD_ORGS';\n\n/**\n * \n * @param userID \n */\nexport function loadOrgsAction(profileID:string){\n    // add dispatch to let the app know fetch is started so spinner can be loaded \n    // dispatch({ type: FETCH_ORGS })\n    return async function (dispatch:ThunkDispatch<StoreState, void, AnyAction>, getState:() => StoreState ) {\n        const rootStore = getState();\n        let orgArr: Array<OrgProp> = [];\n        if(rootStore.auth.userAuthorization !== null ) {\n            let token: string = rootStore.auth.userAuthorization.token;\n            let response: Array<Org> = await fetchOrgsOfProfileAPI(profileID, token, rootStore.app.config.baseUrl);\n            if( typeof response !== 'undefined' ) {\n                response.forEach((org) => {\n                    orgArr.push({ name: org.name, url: rootStore.app.config.baseUrl + '/#org/' + org.id });\n                });\n            } else {\n                // Fetch error\n                orgArr = [\n                    {\n                        name: 'Something went wrong during fetching organizations. Check console for errors.',\n                        url: ''\n                    }\n                ]\n            }\n        } \n        // dispatch({ type: LOAD_ORGS, payload: {orgList: orgArr, loading: false} });\n        dispatch(loadOrgs(orgArr, false));\n    }\n}\n\n","import React from 'react';\nimport { Layout } from 'antd';\nimport { Provider } from 'react-redux';\nimport { createReduxStore } from './redux/store';\nimport { AppBase, AuthGate } from '@kbase/ui-lib';\n\nimport './App.css';\nimport HomeRedux from './pages/HomeRedux';\n\nconst { Content } = Layout;\nconst store = createReduxStore();\n\n\nconst App: React.FC = () => {\n    return (\n        <Provider store={store}>\n            <AppBase>\n                <AuthGate required={true}>\n                    <div className=\"App\">\n                        <Layout style={{ minHeight: '100vh' }}>\n                            <Content style={{ backgroundColor: 'white' }}>\n                                <HomeRedux />\n                            </Content>\n                        </Layout>\n                    </div>\n                </AuthGate>\n            </AppBase>\n        </Provider>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n//TODO:AKIYO add service worker\n"],"sourceRoot":""}