{"version":3,"sources":["assets/nouserpic.png","redux/actions/actionTypes.ts","redux/fetchStatuses.ts","redux/reducers/narrative_reducers.ts","redux/reducers/reducer.ts","redux/reducers/index.ts","redux/reducers/profile_reducers.ts","redux/reducers/org_reducers.ts","redux/store.ts","util/API.tsx","redux/actions/actionCreators.ts","redux/actions/profileActions.ts","components/Orgs/Orgs.tsx","components/Spinner.tsx","components/ErrorMessage.tsx","components/Orgs/OrgsContainer.tsx","components/Orgs/WhichComponent.tsx","profileConfig.ts","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Profile/WhichComponent.tsx","components/Profile/ProfileClassCountainer.tsx","components/Profile/ohwhattodo.tsx","components/Narratives/Narratives.tsx","util/dateDisplay.tsx","components/Narratives/NarrativeContainer.tsx","components/SearchUsers/SearchUsers.tsx","components/SearchUsers/SearchUsersContainer.tsx","pages/Home.tsx","pages/HomeRedux.tsx","redux/actions/narrativeActions.ts","redux/actions/orgActions.ts","App.tsx","index.tsx"],"names":["module","exports","profileActionTypes","orgsActionTypes","narrativeActionTypes","profileFetchStatuses","orgFetchStatuses","narrativeReducer","state","action","payload","type","FETCH_NARRATIVE_SUCCESS","FETCH_NARRATIVE_ERROR","narrativeState","reducer","baseReducer","rootReducer","kbaseUIStore","FETCH_NARRATIVE","FETCH_NARRATIVE_NONE","FETCH_PROFILE","FETCH_PROFILE_NONE","FETCH_PROFILE_SUCCESS","FETCH_PROFILE_ERROR","profileView","profileFetchStatus","ERROR","FETCHING","NONE","profileReducer","FETCH_ORGS","FETCH_ORGS_NONE","FETCH_ORGS_SUCCESS","FETCH_ORGS_ERROR","orgState","orgFetchStatus","orgsReducer","makeInitialStoreState","makeBaseStoreState","narrativeList","loading","getBFFServiceUrl","token","baseURL","a","url","body","id","method","version","params","module_name","stringBody","JSON","stringify","fetch","mode","headers","Authorization","response","json","responseJson","console","log","result","fetchProfileAPI","bffServiceUrl","status","warn","error","profile","updateProfileAPI","userdata","user","realname","username","fetchNarrativesAPI","param","narratives","fetchOrgsOfProfileAPI","orgs","searchValue","filter","res","fetchProfile","loadProfile","fetchErrorProfile","getProfile","profileID","dispatch","getState","rootStore","auth","userAuthorization","app","config","baseUrl","sendTitle","userName","userID","name","profileData","gravatarHash","synced","SUCCESS","updateProfile","Orgs","props","orgList","style","textAlign","map","org","index","key","href","target","rel","Spinner","size","ErrorMessage","connect","maxInputLength","researchStatement","department","position","Meta","TextArea","Profile","profileDataKeySet","Set","item","add","researchInterests","handleOnClick","event","stopPropagation","hasAttribute","removeAttribute","handleOnBlur","elem","i","classList","length","targetClass","has","value","trim","Array","isArray","padding","gutter","span","margin","overlayStyle","visibility","title","maxWidth","alt","src","gravatarDefault","nouserpic","className","maxLength","defaultValue","trigger","readOnly","placeholder","jobTitle","jobTitleOther","onClick","onBlur","disabled","organization","city","country","fundingSource","currentTarget","interest","okText","onOk","onCancel","OrgsContainer","Item","autosize","onChange","affiliations","started","ended","editEnable","Narratives","data","colums","dataIndex","width","render","text","row","wsID","sorter","b","nameA","toUpperCase","nameB","day","date","delta","Date","now","dayString","toString","slice","dayAndTime","toFixed","dateDisplay","last_saved","placement","content","lastSavedA","lastSavedB","narrative","permission","Object","keys","users","push","narrativeDetail","creator","columns","dataSource","Option","SearchUsers","mouseLeave","onChangeHandler","bind","onSearchHandler","onMouseLeaveHandler","onMouseEnterHandler","this","filteredUserAPI","then","setState","window","open","allowClear","showSearch","showArrow","onSearch","onMouseLeave","onMouseEnter","optionFilterProp","filterOption","inputValue","option","React","Component","mapStateToProps","TabPane","Home","searchOnATab","SearchUsersContainer","narrativesLoaded","organizations","organizationsLoaded","setTitle","authUsername","getOrgs","loadNarratives","prevProps","prevState","defaultActiveKey","tab","ProfileContainer","NarrativeContainer","ownProps","rawParams","runtime","navigation","Error","publicNarratives","sharedNarratives","allNarratives","Promise","all","concat","narrative_detail","fetchFailed","orgArr","forEach","Content","store","createStore","compose","applyMiddleware","thunk","App","required","minHeight","backgroundColor","HomeRedux","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.dda06c4c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nouserpic.9af42ba9.png\";","export enum profileActionTypes {\n    FETCH_PROFILE = 'FETCH_PROFILE',\n    FETCH_PROFILE_NONE = 'FETCH_PROFILE_NONE',\n    FETCH_PROFILE_SUCCESS =  'FETCH_PROFILE_SUCCESS',\n    FETCH_PROFILE_ERROR = 'FETCH_PROFILE_ERROR'\n}\n\nexport enum orgsActionTypes {\n    FETCH_ORGS = 'FETCH_ORGS',\n    FETCH_ORGS_NONE = 'INITIAL_RENDER_ORGS',\n    FETCH_ORGS_SUCCESS =  'FETCH_ORGS_SUCCESS',\n    FETCH_ORGS_ERROR = 'FETCH_ORGS_ERROR'\n}\n\nexport enum narrativeActionTypes {\n    FETCH_NARRATIVE = 'FETCH_NARRATIVE',\n    FETCH_NARRATIVE_NONE = 'INITIAL_RENDER_NARRATIVE',\n    FETCH_NARRATIVE_SUCCESS =  'FETCH_NARRATIVE_SUCCESS',\n    FETCH_NARRATIVE_ERROR = 'FETCH_NARRATIVE_ERROR'\n}","// Honestly, I'm don't know where this file supposed to be. \n// It doesn't look like I have to separate them\n// but when/if the app grows, then this separation will be necessary.  \n\nexport enum profileFetchStatuses {\n    NONE = 'none',\n    FETCHING = 'fetching',\n    SUCCESS = 'success',\n    ERROR = 'error'\n}\n\nexport enum orgFetchStatuses {\n    NONE = 'none',\n    FETCHING = 'fetching',\n    SUCCESS = 'success',\n    ERROR = 'error'\n}","import { StoreState, NarrativeAction } from \"../interfaces\";\nimport { narrativeActionTypes } from '../actions/actionTypes';\n\n\nexport default function narrativeReducer(state: StoreState, action: NarrativeAction):StoreState {\n    const payload = action.payload;\n    // console.log(\"narrative\", payload)\n    switch (action.type) {\n        \n        case narrativeActionTypes.FETCH_NARRATIVE_SUCCESS:\n        case narrativeActionTypes.FETCH_NARRATIVE_ERROR:\n            return (\n                { ...state,\n                    narrativeState: payload\n                }\n            );\n            \n        break;\n        \n        default: \n                return state;\n    }\n}","import { Action, Reducer } from \"redux\";\nimport { baseReducer } from \"@kbase/ui-lib\"; \nimport { BaseStoreState } from \"@kbase/ui-lib\"; \nimport { StoreState } from \"../interfaces\";\n\nconst reducer: Reducer<StoreState | undefined, Action> = (state: StoreState | undefined, action: Action) => {\n  const baseState = baseReducer(state as BaseStoreState, action);\n  // if (baseState) {\n  //   return baseState as StoreState;\n  // }\n  return baseState as StoreState;\n};\n\nexport default reducer;","import { Action, Reducer } from 'redux';\nimport narrativeReducer from './narrative_reducers';\nimport profileReducer from './profile_reducers';\nimport reducer from './reducer';\nimport { StoreState, NarrativeAction, loadProfileAction, loadOrgAction } from  \"../interfaces\";\nimport { profileActionTypes, orgsActionTypes, narrativeActionTypes } from '../actions/actionTypes';\nimport orgsReducer from './org_reducers';\n\n\n\n//TODO: convert this to combine reducers\n\n\nconst rootReducer: Reducer<StoreState | undefined, Action> = (state: StoreState | undefined, action: Action) => {\n\n  // Inital combine state created by store is loaded first \n  const kbaseUIStore = reducer(state as StoreState, action);\n  // if state doesn't load for whatever the reason possibly could be \n  if (!state) {\n    // TODO: AKIYO - return intial state \n    return state;\n  }\n  \n  // root reducer is creating KbaseUIStore \n  if (kbaseUIStore) {\n    return kbaseUIStore as StoreState;\n  } \n  else {\n    switch(action.type) {\n        case narrativeActionTypes.FETCH_NARRATIVE: \n        case narrativeActionTypes.FETCH_NARRATIVE_NONE: \n        case narrativeActionTypes.FETCH_NARRATIVE_SUCCESS: \n        case narrativeActionTypes.FETCH_NARRATIVE_ERROR: \n            return narrativeReducer(state, action as NarrativeAction);\n        case profileActionTypes.FETCH_PROFILE: \n        case profileActionTypes.FETCH_PROFILE_NONE: \n        case profileActionTypes.FETCH_PROFILE_SUCCESS: \n        case profileActionTypes.FETCH_PROFILE_ERROR: \n            return profileReducer(state, action as loadProfileAction);\n        case orgsActionTypes.FETCH_ORGS:\n        case orgsActionTypes.FETCH_ORGS_NONE:\n        case orgsActionTypes.FETCH_ORGS_SUCCESS:\n        case orgsActionTypes.FETCH_ORGS_ERROR:\n            return orgsReducer(state, action as loadOrgAction);\n        \n      default:\n        return state;\n    }\n  }\n}\n\n\nexport default rootReducer;\n","import { StoreState, loadProfileAction } from \"../interfaces\";\nimport { profileActionTypes } from \"../actions/actionTypes\";\nimport { profileFetchStatuses } from '../fetchStatuses';\n\nexport default function profileReducer(state:StoreState, action: loadProfileAction): StoreState {\n    const payload = action.payload;\n    // console.log('in profile reducer ', action)\n    switch (action.type) {\n        case profileActionTypes.FETCH_PROFILE_SUCCESS:\n            return (\n                {\n                    ...state,\n                    profileView: payload\n                }\n            );\n            break;\n                \n        case profileActionTypes.FETCH_PROFILE_ERROR:\n            return {\n                ... state,\n                profileView: { profileFetchStatus: profileFetchStatuses.ERROR}\n            };\n\n        case profileActionTypes.FETCH_PROFILE:\n            return {\n                ... state,\n                profileView: { profileFetchStatus: profileFetchStatuses.FETCHING }\n            };\n\n        case profileActionTypes.FETCH_PROFILE_NONE:\n            return {\n                ...state,\n                profileView: { profileFetchStatus: profileFetchStatuses.NONE }\n            };\n\n        default:\n            return state;\n    }\n\n}","import { StoreState, OrgsAction, loadOrgAction } from '../interfaces';\nimport { orgsActionTypes } from \"../actions/actionTypes\";\nimport { orgFetchStatuses } from '../fetchStatuses';\n\nexport default function orgsReducer(state: StoreState, action: loadOrgAction){\n    const payload = action.payload;\n    // console.log('in orgs reducer ', payload)\n    switch (action.type) {\n\n        case orgsActionTypes.FETCH_ORGS_SUCCESS:\n            \n                return (\n                    { ...state,\n                        orgState: payload\n                    }\n                )\n                break;\n\n        case orgsActionTypes.FETCH_ORGS:\n                return (\n                    { ...state,\n                        orgState: { orgFetchStatus: orgFetchStatuses.FETCHING }\n                    }\n                )\n                break;\n\n        case orgsActionTypes.FETCH_ORGS_ERROR:\n                return (\n                    { ...state,\n                        orgState: { orgFetchStatus: orgFetchStatuses.ERROR }\n                    }\n                )\n                break;\n    \n        case orgsActionTypes.FETCH_ORGS_NONE:\n                return (\n                    { ...state,\n                        orgState: { orgFetchStatus: orgFetchStatuses.ERROR }\n                    }\n                )\n                break;\n        \n            default:\n                return state;\n    }\n}","import { createStore, compose, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\n\nimport { makeBaseStoreState } from \"@kbase/ui-lib\";\nimport { StoreState } from './interfaces';\nimport rootReducer from \"./reducers/index\";\nimport { profileFetchStatuses, orgFetchStatuses } from './fetchStatuses';\n\n// I think i need to use action creator initialRenderOrgs & initialRenderProfile instead\n\n// When app starts, this runs first to set the initial state.\nexport function makeInitialStoreState(): StoreState {\n    const baseStoreState = makeBaseStoreState();\n    \n    return {\n        ...baseStoreState,  \n        narrativeState: {\n            narrativeList: [],\n            loading: true\n        },\n        profileView: { profileFetchStatus: profileFetchStatuses.NONE },\n        orgState:  { orgFetchStatus: orgFetchStatuses.NONE }\n    };\n};\n\nexport function createReduxStore() {\n    return createStore(rootReducer, makeInitialStoreState(), compose(applyMiddleware(thunk)));\n};","import { ProfileData } from \"../redux/interfaces\";\n\nexport async function getBFFServiceUrl(token: string, baseURL: string) {\n    // TODO: for dev, the baseUrl will be whatever works for the CRA workflow, which is ''.\n    // baseURL = 'https://ci.kbase.us/services'; // for dev\n    let url = baseURL + '/services/service_wizard';\n    const body = {\n        id: 0,\n        method: 'ServiceWizard.get_service_status',\n        version: '1.1',\n        params: [\n            {\n                module_name: 'bff',\n                version: null\n            }\n        ]\n    };\n    const stringBody = JSON.stringify(body);\n    const response = await fetch(url, {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n            Authorization: token\n        },\n        body: stringBody\n    });\n    const responseJson = await response.json();\n    console.log(\"getBFFServiceUrl\", responseJson)\n    return responseJson.result[0]['url'];\n}\n\n/**\n * Return profile data\n * @param id profile id\n * @param token KBase session cookie\n * @param baseUrl hostname\n */\nexport async function fetchProfileAPI(id: string, token: string, baseURL: string) {\n    const bffServiceUrl = await getBFFServiceUrl(token, baseURL);\n    let url = bffServiceUrl + '/fetchUserProfile/' + id;\n    const response = await fetch(url, {\n        method: 'GET'\n    });\n    console.log(\"fetchProfileAPI\", response)\n    if (response.status === 404) {\n        console.warn('404 response:', response);\n    } else if (response.status === 500) {\n        console.error('500 response:', response);\n        return;\n    }\n    try {\n        const profile = await response.json();\n        return profile;\n    } catch (err) {\n        console.error('profile fetch failed', response);\n    }\n}\n\n/**\n * update profile \n * method \"UserProfile.update_user_profile\" takes top level key of profile object. \n * @param token \n * @param baseURL \n * @param userdata \n */\nexport async function updateProfileAPI(token: string, baseURL: string, userdata:ProfileData) {\n    // console.log(userdata)\n\n// export async function updateProfileAPI(token: string, baseURL: string, updatedUserProfleString:string) {\n    const body = {\n        version: '1.1',\n        method: 'UserProfile.update_user_profile',\n        params: [ { profile: { user: { realname: \"Akiyo Marukawa\", username: \"amarukawa\" }, profile: {userdata: userdata}}}]\n        // params: [ { profile: { user: { realname: \"Akiyo Marukawa\", username: \"amarukawa\" }, userdata: userdata}}]\n    };\n    const stringBody = JSON.stringify(body);\n    //TODO: Akiyo - remove this after testing\n    baseURL = 'https://ci.kbase.us';\n    const url = baseURL + '/services/user_profile/rpc';\n    const response = await fetch(url, {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n            Authorization: token,\n            'Content-Type': 'application/json'\n        },\n        body: stringBody\n    });\n    return(response.status);\n}\n\n/**\n * Return list of narratives\n * @param param shared/mine/public\n * @param token kbase session cookie\n */\nexport async function fetchNarrativesAPI(param: string, token: string, baseURL: string) {\n    const bffServiceUrl = await getBFFServiceUrl(token, baseURL);\n    let url = bffServiceUrl + '/narrative_list/' + param;\n    const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n            Authorization: token\n        }\n    });\n    if (response.status === 500) {\n        console.error('Fetch Narratives 500 response:', response);\n        return;\n    }\n    try {\n        const narratives = await response.json();\n        return narratives;\n    } catch (err) {\n        console.error('fetch narratives failed', response);\n    }\n}\n\n/**\n * returns list of orgs that profile and logged in user are both associated with.\n * @param id id of the profile\n * @param token kbase session cookie\n */\nexport async function fetchOrgsOfProfileAPI(id: string, token: string, baseURL: string) {\n    const bffServiceUrl = await getBFFServiceUrl(token, baseURL);\n    const url = bffServiceUrl + '/org_list/' + id;\n    const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n            Authorization: token\n        }\n    });\n    if (response.status === 500) {\n        console.error('500 response:', response);\n        return;\n    }\n    try {\n        const orgs = await response.json();\n        return orgs;\n    } catch (err) {\n        console.error('fetch org failed', response);\n    }\n}\n\n/**\n * returns list of users that are filtered by search values\n * @param searchValue search values\n * @param token kbase session cookie\n */\nexport async function filteredUserAPI(searchValue: string, token: string, baseURL: string) {\n    const body = {\n        version: '1.1',\n        method: 'UserProfile.filter_users',\n        params: [{ filter: searchValue }]\n    };\n    const stringBody = JSON.stringify(body);\n    const url = baseURL + '/services/user_profile/rpc';\n    const response = await fetch(url, {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n            Authorization: token,\n            'Content-Type': 'application/json'\n        },\n        body: stringBody\n    });\n    if (response.status === 500) {\n        console.error('500 response:', response);\n        return;\n    }\n    try {\n        const res = await response.json();\n        // if you try to: return response.json, it will get error below\n        // Unhandled Rejection (TypeError): Failed to execute 'json' on 'Response': body stream is locked\n        // but assiging it to a vairable somehow magically works.\n        return res;\n    } catch (err) {\n        console.error('fetch search users failed', response);\n    }\n}\n","import React from 'react';\nimport { loadOrgAction, OrgList, loadProfileAction, ProfileView, ProfileState } from '../interfaces';\nimport { profileActionTypes, orgsActionTypes } from './actionTypes';\n\n\n// fetching profile data is initiated\nexport function fetchProfile(){ // put type!\n    return {\n        type: profileActionTypes.FETCH_PROFILE\n    };\n};\n\n// fetching profile data was successful \nexport function loadProfile(payload:ProfileView):loadProfileAction {\n    return {\n        type: profileActionTypes.FETCH_PROFILE_SUCCESS,\n        payload\n    };\n};\n\n// fetch profile failed\nexport function fetchErrorProfile() {\n    return {\n        type: profileActionTypes.FETCH_PROFILE_ERROR,\n    };\n};\n\n// during mounting - render before componentDidMount\nexport function initialRenderProfile() { \n    return {\n        type: profileActionTypes.FETCH_PROFILE_NONE,\n    };\n};\n\n\n// fetching Orgs was successful \nexport function loadOrgs(payload:OrgList):loadOrgAction {\n    return {\n        type: orgsActionTypes.FETCH_ORGS_SUCCESS,\n        payload\n    };\n};\n\n// fetching orgs is initiated\nexport function fetchOrgs(){\n    return {\n        type: orgsActionTypes.FETCH_ORGS\n    };\n};\n\n// fetch orgs failed\nexport function fetchErrorOrgs() {\n    return {\n        type: orgsActionTypes.FETCH_ORGS_ERROR,\n    };\n};\n\n// during mounting - render before componentDidMount\nexport function initialRenderOrgs() { \n    return {\n        type: orgsActionTypes.FETCH_ORGS_NONE,\n    };\n};\n","import { ThunkDispatch } from 'redux-thunk';\nimport { AnyAction } from 'redux';\nimport { sendTitle } from '@kbase/ui-lib';\nimport { fetchProfileAPI, updateProfileAPI } from '../../util/API';\nimport { StoreState, UserProfileService, ProfileView,  ProfileData} from \"../interfaces\";\nimport { fetchProfile, loadProfile, fetchErrorProfile } from './actionCreators';\nimport { profileFetchStatuses } from '../fetchStatuses';\n\n/**\n * fetch user profile\n *  @param {string} id  profile ID\n */\nexport function getProfile(profileID:string) {\n    return async function (dispatch:ThunkDispatch<StoreState, void, AnyAction>, getState:() => StoreState ) {\n        // set the life cycle state to \"fetching\"\n        dispatch(fetchProfile())\n        \n        const rootStore = getState();\n        if(rootStore.auth.userAuthorization !== null) {\n            const token = rootStore.auth.userAuthorization.token;\n            const baseURL = rootStore.app.config.baseUrl;\n            let payload:ProfileView;\n            let response:UserProfileService = await fetchProfileAPI(profileID, token, baseURL);\n            console.log('getProfile', response);\n            if (typeof response !== 'undefined') {\n                if (response.user.username !== rootStore.auth.userAuthorization.username) {\n                    dispatch(sendTitle('User Profile for ' + response.user.realname));\n                }\n                // shape response to profile before dispatch \n                payload = {\n                    userName: {\n                        userID: response.user.username,\n                        name: response.user.realname\n                    },\n                    profileData: response.profile.userdata,\n                    gravatarHash: response.profile.synced.gravatarHash,\n                    profileFetchStatus: profileFetchStatuses.SUCCESS\n                }\n                dispatch(loadProfile(payload));\n            } else {\n                //  set \"profileIsFetching\" to \"error\"\n                dispatch(fetchErrorProfile());\n            }\n        }\n    }\n}\n\n\n/**\n * set the spinner with fetchProfile action,\n * then call updateProfileAPI.\n * when the repose is good, update the profile with getProfile \n * @param profileID \n * @param userdata \n */\n\n//TODO: change baseURL back to const\nexport function updateProfile(profileID:string, userdata:ProfileData) {\n    return async function (dispatch:ThunkDispatch<StoreState, void, AnyAction>, getState:() => StoreState ) {\n        dispatch(fetchProfile())\n        const rootStore = getState();\n        if(rootStore.auth.userAuthorization !== null) {\n            const token = rootStore.auth.userAuthorization.token;\n            let baseURL = rootStore.app.config.baseUrl;\n            baseURL = 'https://ci.kbase.us';\n            let response = await updateProfileAPI(token, baseURL, userdata);\n            console.log(\"update response\", response)\n            if(response === 200) {\n                dispatch(getProfile(profileID))\n            } else {\n                dispatch(fetchErrorProfile());\n            }\n        }\n\n    }\n}","import React from'react';\nimport {OrgProp} from '../../redux/interfaces';\n\n\ninterface Props {\n    orgList: Array<OrgProp>;\n}\n\n/**\n * render org component \n * loading is false when fetch organization completes and returns response. \n * @param props \n */\nfunction Orgs(props: Props) {\n    console.log(props)\n    let orgList = props.orgList;\n    return(\n            <ul style={{ textAlign: 'left' }}>\n                {orgList.map((org, index) => (\n                    <li key={index}>\n                        <a href={org.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                            {org.name}\n                        </a>\n                    </li>\n                ))}\n            </ul>\n    )\n    \n}\n\nexport default Orgs;","import React from 'react';\nimport { Spin } from 'antd';\n\n\nexport default function Spinner(props:any) {\n    return(\n        <div style={{ textAlign: 'center' }}><Spin size=\"large\" /></div>\n    )\n}","import React from 'react';\n\n\nexport default function ErrorMessage(props:any) {\n    return(\n        <div style={{ textAlign: 'center' }}><p>Something went wrong... </p></div>\n    )\n}","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { StoreState, OrgList } from '../../redux/interfaces';\nimport WhichComponent from './WhichComponent';\nimport { orgFetchStatuses } from '../../redux/fetchStatuses';\n\nfunction mapStateToProps(state: StoreState) {\n    // console.log('orgs container', state);\n    switch( state.orgState.orgFetchStatus ){\n        case orgFetchStatuses.NONE:\n        case orgFetchStatuses.FETCHING:\n            return {\n                orgFetchStatus: state.orgState.orgFetchStatus\n            };\n            break;\n\n        case orgFetchStatuses.ERROR:\n            return {\n                orgFetchStatus: state.orgState.orgFetchStatus\n            };\n            break;\n\n        case orgFetchStatuses.SUCCESS:\n            // typescript isn't good at switch case yet... \n            let orgList = state.orgState as OrgList\n            return {\n                orgList: orgList.orgList,\n                orgFetchStatus: state.orgState.orgFetchStatus\n            }\n\n        default: \n            return {\n                orgFetchStatus: state.orgState.orgFetchStatus\n            };\n        break;\n    }\n};\n\nexport default connect(mapStateToProps)(WhichComponent);","import React from 'react';\n\nimport Orgs from './Orgs';\nimport Spinner from '../Spinner';\nimport ErrorMessage from '../ErrorMessage';\n\nexport default function WhichComponent(props:any) {\n    switch(props.orgFetchStatus){\n        case 'none':\n            return <Spinner />;\n            break;\n\n        case 'fetching':\n                return <Spinner />;\n                break;\n\n        case 'success':\n            return <Orgs orgList={props.orgList} />;\n            break;\n            \n            case 'error':\n                return <ErrorMessage />;\n                break;\n                \n            default: \n            return ( <div>hello</div>);\n            break;\n\n    }\n     \n}","export let maxInputLength = {\n    researchStatement: 1000,\n    department: 50,\n    position: 50,\n    name: 100\n}\n\nexport let researchInterestsList = [{\n    \"value\": \"Genome Annotation\",\n    \"label\": \"Genome Annotation\"\n},\n{\n    \"value\": \"Genome Assembly\",\n    \"label\": \"Genome Assembly\"\n},\n{\n    \"value\": \"Microbial Communities\",\n    \"label\": \"Microbial Communities\"\n},\n{\n    \"value\": \"Comparative Genomics\",\n    \"label\": \"Comparative Genomics\"\n},\n{\n    \"value\": \"Expression\",\n    \"label\": \"Expression\"\n},\n{\n    \"value\": \"Metabolic Modeling\",\n    \"label\": \"Metabolic Modeling\"\n},\n{\n    \"value\": \"Read Processing\",\n    \"label\": \"Read Processing\"\n},\n{\n    \"value\": \"Sequence Analysis\",\n    \"label\": \"Sequence Analysis\"\n},\n{\n    \"value\": \"Utilities\",\n    \"label\": \"Utilities\"\n},\n{\n    \"value\": \"Other\",\n    \"label\": \"Other\"\n}\n]","import React, { CSSProperties } from 'react';\nimport { Row, Col, Card, Input, Tooltip, Form, Checkbox, Modal, Button } from 'antd';\nimport { FormItemProps } from 'antd/es/form';\n\nimport { UserName, ProfileData } from '../../redux/interfaces';\nimport nouserpic from '../../assets/nouserpic.png';\nimport OrgsContainer from '../Orgs/OrgsContainer';\nimport { maxInputLength, researchInterestsList } from '../../profileConfig';\n\nconst { Meta } = Card;\nconst { TextArea } = Input;\n\ninterface Props {\n    userName: UserName;\n    editEnable: Boolean;\n    profileData: ProfileData;\n    gravatarHash: string;\n    profileFetchStatus: string;\n    updateProfile: (profileID: string, userdata:ProfileData) => void;\n};\ninterface Woo {\n    woo:FormItemProps;\n}\n\n/**\n * Returns profile component.\n * @param props\n */\nfunction Profile(props: Props) {\n\n    console.log('profile props', props)\n    let profile: ProfileData;\n        profile = props.profileData;\n\n    let profileDataKeySet = new Set();\n    for (let item in profile) {\n        profileDataKeySet.add(item);\n    };\n    \n    //TODO: move this to some config file with other options etc \n    // let maxInputLength = {\n    //     researchStatement: 1000,\n    //     department: 100,\n    //     position: 50,\n    //     name: 100\n    // }\n\n    \n    function tooltipVisibility ():CSSProperties {\n        // if (props.profileEdit) {\n        //     return {visibility: 'visible'}\n        // } else {visibility: 'hidden' }\n        return {visibility: 'visible'};\n    }\n\n    // console.log(profileDataKeySet);\n    // Set initial value for properties that are arrays. \n    // Otherwise .map will complain during initial render. \n\n    // set affiliations to an empty strings for undefined case.\n    function setAffiliations(){\n        if(typeof profile.affiliations !== 'undefined' && Array.isArray(profile.affiliations)){\n            return profile.affiliations;\n        } else {\n            return [\n                {\n                    title: '',\n                    organization: '',\n                    started: '',\n                    ended: ''\n                }\n            ];\n        };\n    };\n    // set researchInterests to an empty array for undefined case - inital render.\n    let researchInterests: Array<string> = [];\n\n    // Set researchInterests to an empty array for undefined case - inital render.\n    if (typeof profile.researchInterests !== 'undefined' && Array.isArray(profile.researchInterests)) {\n        researchInterests = profile.researchInterests;\n    };\n\n    // Set gravatarURL\n    function gravaterSrc(){\n        if (profile['avatarOption'] === 'silhoutte' || !props.gravatarHash) {\n            // let gravatar = <img style={{ maxWidth: '100%', margin: '8px 0px' }} alt=\"avatar\" src={nouserpic} />;\n            return nouserpic\n        } else if (props.gravatarHash) {\n            return 'https://www.gravatar.com/avatar/' + props.gravatarHash + '?s=300&amp;r=pg&d=' + profile.gravatarDefault;\n            // let gravatar = <img style={{ maxWidth: '100%', margin: '8px 0px' }} alt=\"avatar\" src={gravaterSrc} />;\n        }\n        return 'https://www.gravatar.com/avatar/' + props.gravatarHash + '?s=300&amp;r=pg&d=' + profile.gravatarDefault;\n    };\n\n    // Set jobTitle\n    function setJobTitle():string {\n        if (profile.jobTitle === 'Other' && typeof profile.jobTitle !== 'undefined') {\n            return profile.jobTitleOther;\n        } else if (typeof profile.jobTitle !== 'undefined') {\n            return profile.jobTitle;\n        } else {\n            return '';\n        };\n    };\n    \n    // Set name and tooltip \n    function setName(){\n        return <Tooltip title='must be less than 100 characters'><Input className=\"clear-disabled\" maxLength={maxInputLength.name} defaultValue={props.userName.name}/> </Tooltip>\n    }\n\n    function handleOnClick(event:any) {\n        console.log('on click',  event.target)\n        event.target.stopPropagation(); // <-- not working!! \n        if(event.target.hasAttribute('readonly')) {\n            event.target.removeAttribute('readonly');\n        };\n    };\n    function showModal(event:any) {\n        console.log('showModal',  event.currentTarget)\n        // let foo:Array<HTMLElement> = event.target.children;\n        // for( let i = 0; i< foo.length; i++) {\n        //     foo[i].addEventListener('click', showModal)    \n        // };\n        // event.stopProagation();\n\n    };\n    function closeModal(event:any) {\n        console.log('closeModal',  event.target)\n\n    }\n\n    function handleOnBlur(event:any) {\n        console.log('handleOnBlur',  event.target)\n        let elem = event.target;\n        let profileData:any = props.profileData;\n        for( let i = 0; i < elem.classList.length; i++ ){\n            let targetClass = elem.classList[i];\n            if ( profileDataKeySet.has(targetClass) && profileData[targetClass] !== elem.value ){\n                profileData[targetClass] = elem.value.trim();\n                props.updateProfile(props.userName.userID, profileData);\n            };\n        };\n    };\n\n    /**\n     * onBlur event handler for reseachStatement\n     * if the event targat value is not the same as the prop value, \n     * then update / make sure to trim it! \n     * @param event \n     */\n    function researchStatementChange(event:any) {\n        console.log('researchStatement',  event.target)\n        // need to check if it's really the right element has(class)\n        // trim value\n        // check if it's the same as before. don't re-render when you don't need to\n        let elem = event.target;\n\n        // haven't figure out how to make it work without using 'any' type.\n        let profileData:any = props.profileData; \n        for( let i = 0; i < elem.classList.length; i++ ){\n            let targetClass = elem.classList[i];\n            if ( profileDataKeySet.has(targetClass) && profileData[targetClass] !== elem.value ){\n                profileData[targetClass] = elem.value.trim();\n                props.updateProfile(props.userName.userID, profileData);\n            };\n        };\n    };\n    \n    function onChangeHanlder(event:any){\n        // console.log(event.target.value.length);\n        console.log(event);\n    }\n\n    function foo(boo:string) {\n        let moo:FormItemProps[\"validateStatus\"] = 'success';\n        return moo\n    }\n     return (\n        <Row style={{ padding: 16 }}>\n            <Row gutter={8}>\n                <Col span={8}>\n                    <Card style={{ margin: '8px 0px', textAlign: 'center' }}>\n                        <Tooltip  overlayStyle={tooltipVisibility()} title='click to edit Avatar Options'>\n                            <img style={{ maxWidth: '100%', margin: '8px 0px' }} alt='avatar' src={ gravaterSrc() } />\n                            {/* {gravatar} */}\n                        </Tooltip>\n                    </Card>\n                    {/* <pre>\n                        { JSON.stringify(props.profileData, null, 2) }\n                    </pre> */}\n                    <Card\n                        style={{ margin: '8px 0px', textAlign: 'left' }}\n                        // title={props.userName.name} // less than 100\n                        title={setName()} // less than 100\n                    >\n                        <Meta title=\"User ID\" />\n                        <Tooltip overlayStyle={tooltipVisibility()} trigger={'click'} title='User ID cannot be changed'>\n                            <Input className=\"clear-disabled userID\" readOnly placeholder='User ID' defaultValue={props.userName.userID} />\n                        </Tooltip>\n                        <Meta title=\"Position\" />\n                        {/* job title less than 50 */}\n                        <Input className=\"clear-disabled\" maxLength={maxInputLength.position} defaultValue={setJobTitle()}/> \n                        <Meta title=\"Department\" />\n                        <Tooltip overlayStyle={tooltipVisibility()} trigger={'click'} title='must be more than 2 and less than 50 characters'>\n                            <Input className=\"clear-disabled department\" readOnly maxLength={maxInputLength.department} onClick={handleOnClick} onBlur={handleOnBlur} defaultValue={profile.department} />\n                        </Tooltip>\n                        <Meta title=\"Organization\" />\n                        <Input className=\"clear-disabled\" disabled defaultValue={profile.organization}/>\n                        <Meta title=\"Location\" />\n                        <Tooltip overlayStyle={tooltipVisibility()}  trigger={'click'} title='must be less than 100 characters'><Input className=\"clear-disabled\" disabled defaultValue={profile.city}/></Tooltip>\n                        <Input className=\"clear-disabled\" disabled defaultValue={profile.state}/>\n                        <Input className=\"clear-disabled\" disabled defaultValue={profile.country}/>\n                        <Meta title=\"Primary Funding Source\" />\n                        <Input className=\"clear-disabled\" disabled defaultValue={profile.fundingSource}/>\n                    </Card>\n                </Col>\n                <Col span={16}>\n                    <Row gutter={8}>\n                        <Col span={12}>\n                            <Card className=\"card-with-height researchInterests\" style={{ margin: '8px 0px' }} title=\"Research Interests\">\n                                <div className=\"popup\" title=\"researchInterests\" onClick={showModal} >\n                                <ul style={{ textAlign: 'left' }}>\n                                    {researchInterests.map((interest) => (\n                                        <li key={interest}>{interest}</li>\n                                    ))}\n                                </ul>\n                                <Modal\n                                    // visible={visible}\n                                    title=\"Title\"\n                                    okText=\"Save\"\n                                    onOk={handleOnBlur}\n                                    onCancel={closeModal}\n                                >\n                                    {/* <Checkbox.Group\n                                        options={researchInterestsList}\n                                        defaultValue={researchInterests}\n                                        onChange={onChangeHanlder}\n                                    /> */}\n                                </Modal>\n                                </div>  \n                            </Card>\n                        </Col>\n                        <Col span={12}>\n                            <Card className=\"card-with-height\" style={{ margin: '8px 0px' }} title=\"Organizations\">\n                                <OrgsContainer />\n                            </Card>\n                        </Col>\n                    </Row>\n                    <Row>\n                        {/* TODO:AKIYO FIX - when the box is very small it doesn't break or hide word */}\n                        <Card\n                            style={{ margin: '8px 0px' }}\n                            title=\"Research or Personal Statement\"\n                        > \n                        {/* less than 1000 */}\n                        <Form.Item>\n                        <Tooltip overlayStyle={tooltipVisibility()} trigger={'click'} title='must be less than 1000 characters'>\n                            <TextArea autosize maxLength={maxInputLength.researchStatement} readOnly className='clear-disabled researchStatement' onClick={handleOnClick} onBlur={researchStatementChange} defaultValue={props.profileData.researchStatement} onChange={onChangeHanlder} /> \n                            {/* <TextArea autosize maxLength={maxInputLength.researchStatement} readOnly className='clear-disabled researchStatement' onClick={handleOnClick} onBlur={researchStatementChange} value={props.profileData.researchStatement}/>  */}\n                        </Tooltip>\n                        </Form.Item>\n                        </Card>\n                        <Card style={{ margin: '8px 0px' }} title=\"Affiliations\">\n                            <div className='affiliations' onClick={handleOnClick} onBlur={handleOnBlur} >\n                            <ul style={{ textAlign: 'left' }}>\n                                {setAffiliations().map((position, index) => (\n                                    <li key={index}>\n                                        {position.title} @ {position.organization}, {position.started} -{' '}\n                                        {position.ended}{' '}\n                                    </li>\n                                ))}\n                            </ul>\n                            </div>\n                        </Card>\n                    </Row>\n                </Col>\n            </Row>\n        </Row>\n    );\n};\n\nexport default Profile;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Action, Dispatch } from 'redux';\n\nimport { UserName, ProfileData, StoreState, ProfileView, ProfileFetchStatus } from '../../redux/interfaces';\nimport {  updateProfile } from '../../redux/actions';\nimport whichcomponent from './WhichComponent';\n\nimport { profileFetchStatuses } from '../../redux/fetchStatuses';\n\ninterface PropsWithProfileData {\n    userName: UserName;\n    editEnable: Boolean;\n    profileData: ProfileData;\n    gravatarHash: string;\n    profileFetchStatus: string;\n};\ninterface PropsWithoutProfileData {\n    profileFetchStatus: string;\n};\n\ntype Props = PropsWithoutProfileData | PropsWithProfileData;\n\ninterface DispatchProps {\n    updateProfile: (profileID: string, profileData: ProfileData) => void;\n};\n\n\ninterface OwnProps {};\nlet component: JSX.Element;\nfunction mapStateToProps(state: StoreState): Props {\n    // console.log('profile state container', state)\n    // token can be null\n    let userAuthToken;\n    if( state.auth.userAuthorization !== null ) {\n        userAuthToken = state.auth.userAuthorization.token\n    } else {\n        userAuthToken = '';\n    }\n    switch(state.profileView.profileFetchStatus) {\n        case profileFetchStatuses.NONE:\n        case profileFetchStatuses.FETCHING:\n            return {\n                    profileFetchStatus: state.profileView.profileFetchStatus\n                }\n                break;\n\n        case profileFetchStatuses.ERROR:\n            return {\n                    profileFetchStatus: state.profileView.profileFetchStatus\n                }\n                break;\n\n        case profileFetchStatuses.SUCCESS:\n            // typescript isn't good at switch case yet... \n            let profileData = state.profileView as ProfileView;\n            return {\n                userName: profileData.userName,\n                editEnable: false,\n                profileData: profileData.profileData,\n                gravatarHash: profileData.gravatarHash,\n                profileFetchStatus: profileData.profileFetchStatus\n            }\n            break;\n\n        default:\n            // if you don't return Props type, it will complain. \n            // but if you try to return state.profileView.profileFetchStatus\n            // its type is \"never\" \n            // hacky way to fix that. \n            return {\n                profileFetchStatus: profileFetchStatuses.NONE\n            }\n            break;    \n    }\n\n};\n\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        updateProfile: (profileID: string, profileData: ProfileData) => {\n            return dispatch(updateProfile(profileID, profileData) as any);\n        }\n    };\n};\n\nexport default connect<Props, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps, \n    mapDispatchToProps\n)(whichcomponent);\n","import React from 'react';\n\nimport Profile from './Profile';\nimport ProfileClass from './Profile';\nimport Spinner from '../Spinner';\nimport ErrorMessage from '../ErrorMessage'\n\nexport default function WhichComponent(props:any) {\n    // console.log('whichcomponent', props)\n    switch(props.profileFetchStatus){\n        case 'none':\n            return <Spinner />;\n            break;\n\n        case 'fetching':\n                return <Spinner />;\n                break;\n\n        case 'success':\n            return <Profile userName={props.userName} \n            editEnable= {props.editEnable}\n            profileData= {props.profileData}\n            gravatarHash= {props.gravatarHash}\n            profileFetchStatus= {props.profileFetchStatus}\n            updateProfile = {props.updateProfile} />;\n            break;\n\n        case 'error':\n            return <ErrorMessage />;\n            break;\n\n        default: \n            return ( <div>hello</div>);\n            break;\n\n    }\n     \n}","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Action, Dispatch } from 'redux';\n\nimport { UserName, ProfileData, StoreState, ProfileView, ProfileFetchStatus } from '../../redux/interfaces';\nimport {  updateProfile } from '../../redux/actions';\nimport whichcomponent from './WhichComponent';\nimport whichClasscomponent from './ohwhattodo';\n\nimport { profileFetchStatuses } from '../../redux/fetchStatuses';\n\ninterface PropsWithProfileData {\n    userName: UserName;\n    editEnable: Boolean;\n    profileData: ProfileData;\n    gravatarHash: string;\n    profileFetchStatus: string;\n};\ninterface PropsWithoutProfileData {\n    profileFetchStatus: string;\n};\n\ntype Props = PropsWithoutProfileData | PropsWithProfileData;\n\ninterface DispatchProps {\n    updateProfile: (profileID: string, profileData: ProfileData) => void;\n};\n\n\ninterface OwnProps {};\nlet component: JSX.Element;\nfunction mapStateToProps(state: StoreState): Props {\n    // console.log('profile state container', state)\n    // token can be null\n    let userAuthToken;\n    if( state.auth.userAuthorization !== null ) {\n        userAuthToken = state.auth.userAuthorization.token\n    } else {\n        userAuthToken = '';\n    }\n    switch(state.profileView.profileFetchStatus) {\n        case profileFetchStatuses.NONE:\n        case profileFetchStatuses.FETCHING:\n            return {\n                    profileFetchStatus: state.profileView.profileFetchStatus\n                }\n                break;\n\n        case profileFetchStatuses.ERROR:\n            return {\n                    profileFetchStatus: state.profileView.profileFetchStatus\n                }\n                break;\n\n        case profileFetchStatuses.SUCCESS:\n            // typescript isn't good at switch case yet... \n            let profileData = state.profileView as ProfileView;\n            return {\n                userName: profileData.userName,\n                editEnable: false,\n                profileData: profileData.profileData,\n                gravatarHash: profileData.gravatarHash,\n                profileFetchStatus: profileData.profileFetchStatus\n            }\n            break;\n\n        default:\n            // if you don't return Props type, it will complain. \n            // but if you try to return state.profileView.profileFetchStatus\n            // its type is \"never\" \n            // hacky way to fix that. \n            return {\n                profileFetchStatus: profileFetchStatuses.NONE\n            }\n            break;    \n    }\n\n};\n\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        updateProfile: (profileID: string, profileData: ProfileData) => {\n            return dispatch(updateProfile(profileID, profileData) as any);\n        }\n    };\n};\n\nexport default connect<Props, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps, \n    mapDispatchToProps\n)(whichClasscomponent);\n","import React from 'react';\n\nimport Profile from './Profile';\nimport ProfileClass from './Profile';\nimport Spinner from '../Spinner';\nimport ErrorMessage from '../ErrorMessage'\n\nexport default function WhichClassComponent(props:any) {\n    // console.log('whichcomponent', props)\n    switch(props.profileFetchStatus){\n        case 'none':\n            return <Spinner />;\n            break;\n\n        case 'fetching':\n                return <Spinner />;\n                break;\n\n        case 'success':\n            return <ProfileClass userName={props.userName} \n            editEnable= {props.editEnable}\n            profileData= {props.profileData}\n            gravatarHash= {props.gravatarHash}\n            profileFetchStatus= {props.profileFetchStatus}\n            updateProfile = {props.updateProfile} />;\n            break;\n\n        case 'error':\n            return <ErrorMessage />;\n            break;\n\n        default: \n            return ( <div>hello</div>);\n            break;\n\n    }\n     \n}","/**\n *  Narrative.tsx is a view component\n *\n */\nimport React from 'react';\nimport { dateDisplay } from '../../util/dateDisplay'; // date format\nimport { Table, Popover } from 'antd';\nimport { NarrativeData } from '../../redux/interfaces'; //interface\n\ninterface TableData {\n    key: string;\n    wsID: string;\n    name: string;\n    last_saved: number;\n}\n\ninterface Props {\n    narratives: Array<NarrativeData>;\n    loading: boolean;\n}\n\n/**\n * Returns a component with list of narratives in a table.\n * @param props\n */\nfunction Narratives(props: Props) {\n    console.log(props)\n    let data: Array<TableData> = [];\n    let loading = props.loading;\n\n    const colums = [\n        {\n            title: 'Title',\n            dataIndex: 'name',\n            width: 350,\n            key: 'wsID',\n            render: (text: string, row: TableData) => {\n                let url = '/narrative/' + row.wsID;\n                return (\n                    <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n                        {text}\n                    </a>\n                );\n            },\n            sorter: (a: TableData, b: TableData) => {\n                let nameA = a.name.toUpperCase();\n                let nameB = b.name.toUpperCase();\n                if (nameA < nameB) {\n                    return -1;\n                }\n                if (nameA > nameB) {\n                    return 1;\n                }\n                return 0;\n            }\n        },\n        {\n            title: 'Last Saved',\n            dataIndex: 'last_saved',\n            width: 190,\n            render: (text: string, row: TableData) => {\n                let day = dateDisplay(row.last_saved);\n                return (\n                    <Popover placement=\"right\" content={day[0]}>\n                        {day[1]}\n                    </Popover>\n                );\n            },\n            sorter: (a: TableData, b: TableData) => {\n                let lastSavedA = a.last_saved;\n                let lastSavedB = b.last_saved;\n                if (lastSavedA < lastSavedB) {\n                    return 1;\n                }\n                if (lastSavedA > lastSavedB) {\n                    return -1;\n                }\n                return 0;\n            }\n        }\n    ];\n\n    for (let i = 0; i < props.narratives.length; i += 1) {\n        let narrative = props.narratives[i];\n        if (narrative.permission === 'r' || narrative.permission === 'n') {\n            if (Object.keys(narrative.users).length <= 0) {\n                data.push({\n                    key: narrative.wsID,\n                    wsID: narrative.wsID,\n                    name: narrative.name,\n                    last_saved: narrative.last_saved\n                });\n            } else {\n                data.push({\n                    key: narrative.wsID,\n                    wsID: narrative.wsID,\n                    name: narrative.name,\n                    last_saved: narrative.last_saved\n                });\n            }\n        } else {\n            const narrativeDetail = narrative['narrative_detail'];\n            let users = '';\n            for (let user in narrative.users) {\n                if (user !== narrativeDetail.creator) users = users + user + ', ';\n            }\n            data.push({\n                key: narrative.wsID,\n                wsID: narrative.wsID,\n                name: narrative.name,\n                last_saved: narrative.last_saved\n            });\n        }\n    }\n\n    return (\n        <Table<TableData>\n            style={{ width: '85%', margin: 'auto' }}\n            columns={colums}\n            dataSource={data}\n            loading={loading}\n        />\n    );\n}\n\nexport default Narratives;\n","/**\n * returns array of date in MMM DD YYY HH:MM:SS and one of below:\n * less than a min ago, # hours ago, # days ago, day: MMM DD YYYY (if it's more than a month)\n * @param {string} date date format\n * \n */\nexport function dateDisplay(date: number): Array<string> {\n    let delta = (Date.now() - +new Date(date))/1000000 ;\n    let dayString = (new Date(date)).toString();\n    // date format: MMM DD YYYY\n    let day = dayString.slice(4, 7) + ' ' + dayString.slice(8, 10) + ' ' + dayString.slice(11, 15);\n    //  date format: MMM DD YYYY HH:MM:SS\n    let dayAndTime = day + ' ' + dayString.slice(16, 24);\n    if( delta >= 2628 ) {\n        // more than a month ago\n        return [dayAndTime, day];\n    } else if( delta < 2628 && delta >= 86.4) {\n        // less than a month ago, but more than a day ago\n        let days = (delta/(86.4)).toFixed(0);\n        return [dayAndTime, days + ' days ago'];\n    }\n    else if( delta < 86.4 && delta >= 3.6) {\n        return [day, (delta/3.6).toFixed(0) + ' hours ago'];\n    } else if(delta < 3.6 && delta >= 0.06) {\n        return [dayAndTime, ((delta)*10).toFixed(0) + ' min ago'];\n    } else {\n        return [dayAndTime, 'less than a min ago']\n    }\n};","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { StoreState } from '../../redux/interfaces';\nimport Narratives from './Narratives';\n\n\n\nfunction mapStateToProps (state: StoreState) { \n    console.log('narrativeState', state);\n    return {narratives: state.narrativeState.narrativeList, loading: state.narrativeState.loading};\n};\n\n\nexport default connect(mapStateToProps)(Narratives);","import React from 'react';\nimport { Select } from 'antd';\nimport { filteredUserAPI } from '../../util/API';\nimport { UsernameRealname } from '../../redux/interfaces';\nconst { Option } = Select;\n\n\ninterface State {\n    data: Array<UsernameRealname>;\n    mouseLeave: boolean;\n}\n\ninterface Props {\n    token: string;\n    baseURL: string;\n}\n\ninterface Response {\n    version: string;\n    result: Array<any>;\n}\n\n/**\n * View component with user search feature.\n * @param props\n */\nclass SearchUsers extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            data: [],\n            mouseLeave: false\n        };\n        this.onChangeHandler = this.onChangeHandler.bind(this);\n        this.onSearchHandler = this.onSearchHandler.bind(this);\n        this.onMouseLeaveHandler = this.onMouseLeaveHandler.bind(this);\n        this.onMouseEnterHandler = this.onMouseEnterHandler.bind(this);\n    }\n    /**\n     * when search value is more than 2 charactors, \n     * it makes API call and returns filtered list of users \n     * \n     * @param value \n     */\n    onSearchHandler(value: string): void {\n        if (value.length > 2 && this.state.mouseLeave !== true) {\n            filteredUserAPI(value, this.props.token, this.props.baseURL).then((response: Response) => {\n                if (typeof response !== 'undefined') {\n                    this.setState({ data: response['result'][0] });\n                } else {\n                    this.setState({\n                        data: [{ username: 'error', realname: 'Something went wrong. Try again later.' }]\n                    });\n                }\n            });\n        } else {\n            return;\n        }\n    }\n    onMouseLeaveHandler(): void {\n        this.setState({ mouseLeave: true });\n    }\n    onMouseEnterHandler(): void {\n        this.setState({ mouseLeave: false });\n    }\n    onChangeHandler(value: string): void {\n        if (value !== 'error' && typeof value !== 'undefined') {\n            let url = '/#user/' + value;\n            window.open(url, '_blank');\n        }\n    }\n\n    render() {\n        let data = this.state.data;\n        return (\n            <Select\n                mode=\"single\"\n                style={{ width: 250 }}\n                allowClear\n                showSearch\n                placeholder=\"enter more than 3 characters\"\n                showArrow={false}\n                onSearch={this.onSearchHandler}\n                onChange={this.onChangeHandler}\n                onMouseLeave={this.onMouseLeaveHandler}\n                onMouseEnter={this.onMouseEnterHandler}\n                optionFilterProp=\"children\"\n                filterOption={(inputValue, option) => {\n                    return true;\n                }}\n            >\n                {data.map((item) => {\n                    return (\n                        <Option key={item['username']}>\n                            {item['realname']} ({item['username']})\n                        </Option>\n                    );\n                })}\n            </Select>\n        );\n    }\n}\n\nexport default SearchUsers;\n","import React from 'react';\nimport { connect} from 'react-redux';\n\nimport SearchUsers from './SearchUsers';\n\ninterface AppState {\n    app: {\n        config: {\n            baseUrl: string;\n        }\n    };\n    auth: AuthData;\n}\n\ninterface AuthData {\n    userAuthorization: {\n        realname: string;\n        roles: Array<string>;\n        token: string;\n        username: string;\n    }\n}\n\nconst mapStateToProps = (state:AppState) => {\n    // Since this component is just a redux wrapper \n    // and not modifying state to make component props\n    // simply return state asd props\n    return state\n}\nfunction SearchUsersRedux(mapStateToProps:AppState) {\n    return (\n        <SearchUsers token={mapStateToProps.auth.userAuthorization.token} baseURL={mapStateToProps.app.config.baseUrl}/>\n    )\n}\n\nexport default connect(mapStateToProps)(SearchUsersRedux);","import React from 'react';\n\nimport { Tabs } from 'antd';\n\nimport ProfileContainer from '../components/Profile/ProfileContainer';\nimport ProfileClassContainer from '../components/Profile/ProfileClassCountainer';\nimport NarrativeContainer from '../components/Narratives';\nimport { OrgProp, UserName } from '../redux/interfaces';\nimport SearchUsersContainer from '../components/SearchUsers/SearchUsersContainer';\n\n\nconst TabPane = Tabs.TabPane;\n/**\n * Class component that keeps states for all the variables that viewer/child components needs.\n * This can converted into Redux if needed.\n * Parent component App.tsx\n */\n\n// add Narrative_detail if needed. Currently, data in the object is not used - Akiyo.\ninterface HomeState {\n    userName: UserName;\n    editEnable: Boolean; // profile edit enable \n    narrativesLoaded: Boolean;\n    organizations: Array<OrgProp>;\n    organizationsLoaded: Boolean;\n    gravatarHash: string;\n}\n\n\nexport interface HomeProps {\n    token: string;\n    authUsername: string;\n    username: string | null;\n    baseURL: string;\n    setTitle: (title: string) => void;\n    loadNarratives: (filter: string, profileID: string) => void;\n    getProfile: (profileID: string) => void;\n    getOrgs: (profileID: string) => void;\n}\n\nclass Home extends React.Component<HomeProps, HomeState> {\n    constructor(props: HomeProps) {\n        super(props);\n        this.state = {\n            userName: {\n                name: '',\n                userID: ''\n            },\n            editEnable: false,\n            narrativesLoaded: false,\n            organizations: [],\n            organizationsLoaded: false,\n            gravatarHash: ''\n        };\n    };\n\n\n    componentDidMount() {\n        let username;\n        if (this.props.username) {\n            username = this.props.username;\n            this.props.setTitle('User Profile for ' + username);\n        } else {\n            username = this.props.authUsername;\n            this.props.setTitle('Your User Profile');\n            this.setState({ editEnable: true });\n        }\n\n         /**\n         * fetch profile data for the diplayed profile\n         * and load it to the profile component.\n         *  @param {string} id  profile ID\n         */\n        this.props.getProfile(username); // reduux\n\n\n        /**\n         * fetch orgs that user blongs to the profile\n         * and load them to the orgs component.\n         *  @param {string} id  profile ID\n         */\n        this.props.getOrgs(username); //redux\n\n        /**\n         * Returns narratives that shows in Narrative table.\n         *\n         *\n         * Below logic determines which set of narratives needs to be fetched.\n         * if the viewing profile userid is not the logged in user,\n         * then fetch all of shared and public narrative and filter with the viewing profile userid.\n         */\n        if (typeof this.props.username === 'undefined'|| typeof this.props.authUsername === 'undefined') {\n            // if there is no logged in user in run time config (redux app state)\n            // returns an empty narrative list\n            console.error('How did this even happened? Check error message from Kbase-UI.')\n            return;\n        } else {            \n            // when logged-in user is viewing own profile. \n            if (this.props.username === this.props.authUsername || this.props.username === null) {\n                    this.props.loadNarratives('mine', this.props.authUsername ); // redux \n            } else {\n                /**\n                 * when logged in user is not viewing other user's profile\n                 * pass filter \"they\" <-- gender-neutral singular they\n                 * which tfetch both \"public\" and \"shared\" and filter response with profileID\n                 */\n                this.props.loadNarratives('they', this.props.username); // redux \n            };\n        };\n    };\n\n    componentDidUpdate(prevProps: any, prevState: any) {\n        // This privents from infinate component loading loop.\n        if (this.state === prevState) {\n            return;\n        };\n    };\n    // wrap search user component with a div so that display can be controlled.\n    // in order to place search component/box on the navigation tab, \n    // make it into a variable and insert it as tab title. \n    searchOnATab = <div className=\"search-on-a-tab\">Search other users <SearchUsersContainer /></div>\n    \n    render() {\n        return (\n            <div className=\"profile-tabs\">\n                <Tabs type=\"line\" defaultActiveKey=\"1\">\n                    <TabPane  tab=\"Profile\" key=\"1\">\n                        <ProfileContainer />\n                    </TabPane>\n                    <TabPane tab=\"Narratives\" key=\"3\">\n                        <NarrativeContainer />\n                    </TabPane>\n                    <TabPane tab=\"Narratives\" key=\"5\">\n                        <ProfileClassContainer />\n                    </TabPane>\n                    {/* Insert search user component div as a title to place it on the navigation tab  */}\n                    <TabPane disabled tab={this.searchOnATab} key=\"8\"></TabPane>\n                </Tabs>\n            </div>\n        );\n    };\n};\n\nexport default Home;\n","import { connect } from 'react-redux';\nimport { Action, Dispatch } from 'redux';\n\nimport Home from './Home';\nimport { StoreState } from '../redux/interfaces';\nimport { sendTitle } from '@kbase/ui-lib';\nimport { loadNarratives, getProfile,  getOrgs } from '../redux/actions';\n\ninterface OwnProps {};\n\ninterface StateProps {\n    token: string;\n    authUsername: string;\n    username: string | null;\n    baseURL: string;\n};\n\ninterface DispatchProps {\n    setTitle: (title: string) => void;\n    loadNarratives: (filter:string, profileID: string) => void;\n    getProfile: (profileID: string) => void;\n    getOrgs: (profileID: string) => void;\n};\n\n// TODO this should be part of the view definition\ninterface UserProfileViewParams {\n    username?: string;\n};\n\nfunction mapStateToProps(state: StoreState, ownProps: OwnProps): StateProps {\n    const {\n        auth: { userAuthorization },\n        app: {\n            config: { baseUrl },\n            runtime: {\n                navigation: { params: rawParams }\n            }\n        }\n    } = state;\n    if (!userAuthorization) {\n        throw new Error('This plugin only operates with authentication; no KBase token in store');\n    }\n    const params = (rawParams as unknown) as UserProfileViewParams;\n    return {\n        token: userAuthorization.token,\n        authUsername: userAuthorization.username,\n        username: params.username || null,\n        baseURL: baseUrl\n    };\n};\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, ownProps: OwnProps): DispatchProps {\n    return {\n        loadNarratives: (filter: string, profileID: string) => {\n            return dispatch(loadNarratives(filter, profileID) as any);\n        },\n        setTitle: (title: string) => {\n            return dispatch(sendTitle(title) as any);\n        },\n        getProfile: (profileID: string) => {\n            return dispatch(getProfile(profileID) as any);\n        },\n        getOrgs: (profileID: string) => {\n            return dispatch(getOrgs(profileID) as any);\n        }\n    };\n};\n\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(Home);\n","import { ThunkDispatch } from \"redux-thunk\";\nimport { StoreState, NarrativeData } from \"../interfaces\";\nimport { AnyAction} from 'redux';\nimport { fetchNarrativesAPI } from '../../util/API';\nimport { narrativeActionTypes } from '../actions/actionTypes';\n\n/**\n * Fetch narratives dependeing on the filter.\n * filter is one of following: \"mine\", \"shared\", \"public\", \"they\" <-- gender-neutral singular they\n * \"they\" is when logged-in user is viewing other user's profile. \n * \"they\" - fetch both \"public\" and \"shared\" profile and fileter response with profileID\n * @param filter \n */\nexport function loadNarratives (filter:string, profileID: string) {\n    // ThunkDispatch<RootState(Store), ExtraArg, Action>;\n    return async function (dispatch:ThunkDispatch<StoreState, void, AnyAction>, getState: () => StoreState) {\n        const rootStore = getState();\n        if(rootStore.auth.userAuthorization !== null){ \n            const token = rootStore.auth.userAuthorization.token;\n            const baseURL = rootStore.app.config.baseUrl;\n\n            //TODO: AKIYO replace ci.kbase with baseURL\n            switch(filter) {\n                case \"they\":\n                    const publicNarratives = fetchNarrativesAPI('public', token, 'https://ci.kbase.us/');\n                    const sharedNarratives = fetchNarrativesAPI('shared', token, 'https://ci.kbase.us/');\n                    let allNarratives:Array<NarrativeData> = [];\n                    let narrativeList:Array<NarrativeData> = [];\n                    Promise.all([publicNarratives, sharedNarratives]).then((response) => {\n                        // generate combined narrative list \n                        if ( typeof response[0] !== 'undefined' && typeof response[1] !== 'undefined') {\n                            allNarratives = response[0].concat(response[1]);\n                        } else if (typeof response[0] === 'undefined' && typeof response[1] !== 'undefined' ) {\n                            // if public narrative fetch came back empty, there is something major wrong happened\n                            console.error('error occuerred during fetching narratives.');\n                            allNarratives = response[1];\n                        } else if (typeof response[0] !== 'undefined' && typeof response[1] === 'undefined' ) {\n                            allNarratives = response[0];\n                        } else {\n                            // if public narrative fetch came back empty, there is something major wrong happened\n                            console.error('error occuerred during fetching narratives.');\n                            narrativeList  = [\n                                {\n                                    wsID: '',\n                                    permission: '',\n                                    name: 'Something went wrong. Please check console for error messages.',\n                                    last_saved: 0,\n                                    users: {},\n                                    narrative_detail: { creator: '' }\n                                }\n                            ]\n                        }\n                        \n                        for (let i = 0; i < allNarratives.length; i +=1) {\n  \n                            if( allNarratives[i].narrative_detail.creator ===  profileID) {\n                                narrativeList.push(allNarratives[i]);\n                            }\n                        }\n                        \n                        dispatch({ type: narrativeActionTypes.FETCH_NARRATIVE_SUCCESS, \n                                payload: { narrativeList: narrativeList, loading: false }})     \n                                \n                    })\n                    break;\n                case 'mine':\n                case 'shared':\n                case 'public':\n                    const response = await fetchNarrativesAPI(filter, token, 'https://ci.kbase.us/');\n\n                    if(typeof response !== 'undefined') {\n                        // console.log(\"rootstore\", rootStore)\n                        dispatch({ type: narrativeActionTypes.FETCH_NARRATIVE_SUCCESS,\n                            payload: { narrativeList: response, loading: false }})\n                    } else {\n                        let fetchFailed =  [\n                            {\n                                wsID: '',\n                                permission: '',\n                                name: 'Something went wrong. Please check console for error messages.',\n                                last_saved: 0,\n                                users: {},\n                                narrative_detail: { creator: '' }\n                            }\n                        ]\n\n                        dispatch({ type: narrativeActionTypes.FETCH_NARRATIVE_ERROR, \n                            payload: { narrativeList: fetchFailed, loading: false }})\n                    }\n                    break;\n\n            }            \n                        \n        } else {\n            console.error(\"I don't think this even should happen, but if it did, I must ask 'what kind of horrible bugs did you you create?'\")\n        }\n    }\n}\n","import { ThunkDispatch } from 'redux-thunk';\nimport { StoreState, OrgProp, Org } from '../interfaces';\nimport { AnyAction } from 'redux';\nimport { fetchOrgsOfProfileAPI } from '../../util/API'\nimport { loadOrgs, fetchOrgs, fetchErrorOrgs } from './actionCreators';\nimport { orgFetchStatuses } from '../fetchStatuses';\n\n\n/**\n * \n * @param userID \n */\nexport function getOrgs(profileID:string){\n    // add dispatch to let the app know fetch is started so spinner can be loaded \n    return async function (dispatch:ThunkDispatch<StoreState, void, AnyAction>, getState:() => StoreState ) {\n        dispatch(fetchOrgs());\n        const rootStore = getState();\n        let orgArr: Array<OrgProp> = [];\n        if(rootStore.auth.userAuthorization !== null ) {\n            let token: string = rootStore.auth.userAuthorization.token;\n            let response: Array<Org> = await fetchOrgsOfProfileAPI(profileID, token, rootStore.app.config.baseUrl);\n            if( typeof response !== 'undefined' ) {\n                response.forEach((org) => {\n                    orgArr.push({ name: org.name, url: rootStore.app.config.baseUrl + '/#org/' + org.id });\n                });\n                \n                dispatch(loadOrgs({ orgList: orgArr, orgFetchStatus: orgFetchStatuses.SUCCESS}));\n            } else {\n                dispatch(fetchErrorOrgs());\n            }\n        } \n    }\n}\n\n","import React from 'react';\nimport { Layout } from 'antd';\nimport { Provider } from 'react-redux';\nimport { createReduxStore } from './redux/store';\nimport { AppBase, AuthGate } from '@kbase/ui-lib';\n\nimport './App.css';\nimport HomeRedux from './pages/HomeRedux';\n\nconst { Content } = Layout;\nconst store = createReduxStore();\n\n\nconst App: React.FC = () => {\n    return (\n        <Provider store={store}>\n            <AppBase>\n                <AuthGate required={true}>\n                    <div className=\"App\">\n                        <Layout style={{ minHeight: '100vh' }}>\n                            <Content style={{ backgroundColor: 'white' }}>\n                                <HomeRedux />\n                            </Content>\n                        </Layout>\n                    </div>\n                </AuthGate>\n            </AppBase>\n        </Provider>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n//TODO:AKIYO add service worker\n"],"sourceRoot":""}