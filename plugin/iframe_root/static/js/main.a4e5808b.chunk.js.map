{"version":3,"sources":["assets/nouserpic.png","redux/reducers/narrative_reducers.ts","redux/reducers/reducer.ts","redux/reducers/index.ts","redux/store.ts","util/API.tsx","redux/actions/narrativeActions.ts","redux/actions/profileActions.ts","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Narratives/Narratives.tsx","util/dateDisplay.tsx","components/Narratives/NarrativeContainer.tsx","components/SearchUsers/SearchUsers.tsx","components/SearchUsers/SearchUsersContainer.tsx","pages/Home.tsx","pages/HomeRedux.tsx","App.tsx","index.tsx"],"names":["module","exports","__webpack_require__","p","narrativeReducer","state","action","payload","type","console","log","_objectSpread","narrativeDataArray","reducer","baseReducer","rootReducer","kbaseUIStore","makeInitialStoreState","baseStoreState","makeBaseStoreState","store_objectSpread","wsID","permission","name","last_saved","users","narrative_detail","creator","getBFFServiceUrl","_x","_x2","_getBFFServiceUrl","apply","this","arguments","_callee","token","baseURL","url","body","stringBody","response","responseJson","regenerator_default","a","wrap","_context","prev","next","id","method","version","params","module_name","JSON","stringify","fetch","mode","headers","Authorization","sent","json","abrupt","result","stop","fetchProfileAPI","_x3","_x4","_x5","_fetchProfileAPI","_callee2","bffServiceUrl","profile","_context2","status","warn","error","t0","updateProfileAPI","_x6","_x7","_x8","_updateProfileAPI","_callee3","userdata","_context3","user","realname","username","Content-Type","fetchNarrativesAPI","_x9","_x10","_x11","_fetchNarrativesAPI","_callee4","param","narratives","_context4","_callee5","orgs","_context5","_callee6","searchValue","res","_context6","filter","LOAD_NARRATIVES","LOAD_PROFILE","updateProfile","_ref2","Object","asyncToGenerator","mark","dispatch","getState","rootStore","auth","userAuthorization","app","config","baseUrl","Meta","TextArea","Profile","props","gravatar","userProfile","jobTitle","gravatarURL","affiliations","title","organization","started","ended","researchInterests","profileloading","profileloaded","orgloading","orgsloaded","Array","isArray","jobTitleOther","gravatarHash","gravatarDefault","react_default","createElement","style","maxWidth","margin","alt","src","nouserpic","es_row","padding","gutter","col","span","card","loading","textAlign","userName","input","className","disabled","defaultValue","userID","department","city","country","fundingSource","map","interest","key","org","index","href","target","rel","autosize","readOnly","researchStatement","position","connect","editEnable","postalCode","avatarOption","profileID","Narratives","data","colums","dataIndex","width","render","text","row","sorter","b","nameA","toUpperCase","nameB","day","date","delta","Date","now","dayString","toString","slice","dayAndTime","toFixed","dateDisplay","popover","placement","content","lastSavedA","lastSavedB","i","length","narrative","keys","push","narrativeDetail","table","columns","dataSource","mapStateToProps","Narratives_Narratives","narrativesloaded","Option","SearchUsers","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","mouseLeave","onChangeHandler","bind","assertThisInitialized","onSearchHandler","onMouseLeaveHandler","onMouseEnterHandler","value","_this2","_x15","_x16","_x17","_filteredUserAPI","filteredUserAPI","then","setState","window","open","es_select","allowClear","showSearch","placeholder","showArrow","onSearch","onChange","onMouseLeave","onMouseEnter","optionFilterProp","filterOption","inputValue","option","item","React","Component","components_SearchUsers_SearchUsers","TabPane","tabs","Home","searchOnATab","SearchUsersContainer","userProfileLoaded","narrativesLoaded","organizations","organizationsLoaded","setTitle","authUsername","loadProfile","synced","_x12","_x13","_x14","_fetchOrgsOfProfileAPI","fetchOrgsOfProfileAPI","orgArr","forEach","loadNarratives","prevProps","prevState","defaultActiveKey","tab","ProfileContainer","Narratives_NarrativeContainer","ownProps","_state$app","rawParams","runtime","navigation","Error","_ref","publicNarratives","sharedNarratives","narrativeList","narrativePayload","Promise","all","concat","sendTitle","Content","store","createStore","compose","applyMiddleware","thunk","App","es","lib","required","layout","minHeight","backgroundColor","HomeRedux","ReactDOM","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.a4e5808b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nouserpic.9af42ba9.png\";","import { Action } from \"redux\";\nimport { StoreState } from \"../interfaces\";\nimport { NarrativeData } from \"../interfaces\";\n\ninterface narrativeFetchActionType {\n    type: string;\n    payload: Array<NarrativeData>\n}\n\nexport default function narrativeReducer(state: StoreState, action: narrativeFetchActionType):StoreState   {\n    const payload = action.payload;\n    switch (action.type) {\n        \n        case 'LOAD_NARRATIVES':\n            console.log('im in narrative reducer', payload)\n            return (\n                { ...state,\n                    narrativeDataArray: payload\n                }\n            );\n            \n        break;\n        \n        default: \n                return state;\n    }\n}","import { Action, Reducer } from \"redux\";\nimport { baseReducer } from \"@kbase/ui-lib\"; \nimport { BaseStoreState } from \"@kbase/ui-lib\"; \nimport { StoreState } from \"../interfaces\";\n\nconst reducer: Reducer<StoreState | undefined, Action> = (state: StoreState | undefined, action: Action) => {\n  const baseState = baseReducer(state as BaseStoreState, action);\n  // if (baseState) {\n  //   return baseState as StoreState;\n  // }\n  return baseState as StoreState;\n};\n\nexport default reducer;","import { Action, Reducer } from 'redux';\nimport narrativeReducer from './narrative_reducers';\nimport reducer from './reducer';\nimport { StoreState, NarrativeData } from  \"../interfaces\";\n\ninterface narrativeFetchActionType {\n  type: string;\n  payload: Array<NarrativeData>\n}\n//TODO:AKIYO convert this to combine reducers\n\n\nconst rootReducer: Reducer<StoreState | undefined, Action> = (state: StoreState | undefined, action: Action) => {\n\n  // Inital combine state created by store is loaded first \n  const kbaseUIStore = reducer(state as StoreState, action);\n  // if state doesn't load for whatever the reason possibly could be \n  if (!state) {\n    console.log('return state ')\n    return state // honestly I don't know what this returns\n  }\n  \n  // when reducer is creating KbaseUIStore \n  if (kbaseUIStore) {\n    return kbaseUIStore as StoreState;\n  } \n  else {\n      console.log('Reducer', state, action)\n    // when actions from app needs specific reducers\n    switch(action.type) {\n        case \"LOAD_NARRATIVES\": \n            return narrativeReducer(state, action as narrativeFetchActionType);\n        case \"LOAD_NARRATIVES\": \n            return narrativeReducer(state, action as narrativeFetchActionType);\n        \n      default:\n        return state;\n    }\n  }\n}\n\n\nexport default rootReducer;\n","import { createStore, compose, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\n\nimport { makeBaseStoreState } from \"@kbase/ui-lib\";\nimport { StoreState,  NarrativeData, ProfileData,  NarrativeState } from './interfaces';\nimport rootReducer from \"./reducers/index\";\n\n\n// When app starts, this runs first to set the initial state.\nexport function makeInitialStoreState(): StoreState {\n    const baseStoreState = makeBaseStoreState();\n    // setting initial empty narrative state\n    const narrativePreloadedState: Array<NarrativeData>  = [{\n        wsID: '',\n        permission: '',\n        name: '',\n        last_saved: 0,\n        users: {},\n        narrative_detail: { creator: '' }\n    }]\n    console.log('baseStoreState', baseStoreState)\n    return {\n        // ...baseStoreState, userProfileApp:{ narrativeDataArray: narrativePreloadedState }\n        ...baseStoreState,  narrativeDataArray: narrativePreloadedState \n    };\n}\nexport function createReduxStore() {\n    return createStore(rootReducer, makeInitialStoreState(), compose(applyMiddleware(thunk)));\n}","import { UserProfileService, ProfileData} from \"../redux/interfaces\";\ninterface foo {\n\n    userdata: ProfileData;\n\n}\nexport async function getBFFServiceUrl(token: string, baseURL: string) {\n    // TODO: for dev, the baseUrl will be whatever works for the CRA workflow, which is ''.\n    // baseURL = 'https://ci.kbase.us/services'; // for dev\n    let url = baseURL + '/services/service_wizard';\n    const body = {\n        id: 0,\n        method: 'ServiceWizard.get_service_status',\n        version: '1.1',\n        params: [\n            {\n                module_name: 'bff',\n                version: null\n            }\n        ]\n    };\n    const stringBody = JSON.stringify(body);\n    const response = await fetch(url, {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n            Authorization: token\n        },\n        body: stringBody\n    });\n    const responseJson = await response.json();\n    return responseJson.result[0]['url'];\n}\n\n/**\n * Return profile data\n * @param id profile id\n * @param token KBase session cookie\n * @param baseUrl hostname\n */\nexport async function fetchProfileAPI(id: string, token: string, baseURL: string) {\n    const bffServiceUrl = await getBFFServiceUrl(token, baseURL);\n    let url = bffServiceUrl + '/fetchUserProfile/' + id;\n    const response = await fetch(url, {\n        method: 'GET'\n    });\n    if (response.status === 404) {\n        console.warn('404 response:', response);\n    } else if (response.status === 500) {\n        console.error('500 response:', response);\n        return;\n    }\n    try {\n        const profile = await response.json();\n        return profile;\n    } catch (err) {\n        console.error('profile fetch failed', response);\n    }\n}\n\n/**\n * update profile \n * method \"UserProfile.update_user_profile\" takes top level key of profile object. \n * @param token \n * @param baseURL \n * @param userdata \n */\nexport async function updateProfileAPI(token: string, baseURL: string, userdata:ProfileData) {\n    \n// export async function updateProfileAPI(token: string, baseURL: string, updatedUserProfleString:string) {\n    const body = {\n        version: '1.1',\n        method: 'UserProfile.update_user_profile',\n        params: [ {profile: {user: {realname: \"Akiyo Marukawa\", username: \"amarukawa\"}, userdata: {userdata}}}]\n    };\n    const stringBody = JSON.stringify(body);\n    //TODO: Akiyo - remove this after testing\n    baseURL = 'https://ci.kbase.us';\n    const url = baseURL + '/services/user_profile/rpc';\n    const response = await fetch(url, {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n            Authorization: token,\n            'Content-Type': 'application/json'\n        },\n        body: stringBody\n    });\n    if( response.status === 500) {\n        console.error('500 response:', response);\n        return;\n    }\n}\n\n/**\n * Return list of narratives\n * @param param shared/mine/public\n * @param token kbase session cookie\n */\nexport async function fetchNarrativesAPI(param: string, token: string, baseURL: string) {\n    const bffServiceUrl = await getBFFServiceUrl(token, baseURL);\n    let url = bffServiceUrl + '/narrative_list/' + param;\n    const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n            Authorization: token\n        }\n    });\n    if (response.status === 500) {\n        console.error('Fetch Narratives 500 response:', response);\n        return;\n    }\n    try {\n        const narratives = await response.json();\n        return narratives;\n    } catch (err) {\n        console.error('fetch narratives failed', response);\n    }\n}\n\n/**\n * returns list of orgs that profile and logged in user are both associated with.\n * @param id id of the profile\n * @param token kbase session cookie\n */\nexport async function fetchOrgsOfProfileAPI(id: string, token: string, baseURL: string) {\n    const bffServiceUrl = await getBFFServiceUrl(token, baseURL);\n    const url = bffServiceUrl + '/org_list/' + id;\n    const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n            Authorization: token\n        }\n    });\n    if (response.status === 500) {\n        console.error('500 response:', response);\n        return;\n    }\n    try {\n        const orgs = await response.json();\n        return orgs;\n    } catch (err) {\n        console.error('fetch org failed', response);\n    }\n}\n\n/**\n * returns list of users that are filtered by search values\n * @param searchValue search values\n * @param token kbase session cookie\n */\nexport async function filteredUserAPI(searchValue: string, token: string, baseURL: string) {\n    const body = {\n        version: '1.1',\n        method: 'UserProfile.filter_users',\n        params: [{ filter: searchValue }]\n    };\n    const stringBody = JSON.stringify(body);\n    const url = baseURL + '/services/user_profile/rpc';\n    const response = await fetch(url, {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n            Authorization: token,\n            'Content-Type': 'application/json'\n        },\n        body: stringBody\n    });\n    if (response.status === 500) {\n        console.error('500 response:', response);\n        return;\n    }\n    try {\n        const res = await response.json();\n        // if you try to: return response.json, it will get error below\n        // Unhandled Rejection (TypeError): Failed to execute 'json' on 'Response': body stream is locked\n        // but assiging it to a vairable somehow magically works.\n        return res;\n    } catch (err) {\n        console.error('fetch search users failed', response);\n    }\n}\n","import { ThunkDispatch } from \"redux-thunk\";\nimport { StoreState, NarrativeData } from \"../interfaces\";\nimport { AnyAction} from 'redux';\nimport { fetchNarrativesAPI } from '../../util/API';\n\n\nconst LOAD_NARRATIVES = 'LOAD_NARRATIVES';\n\n/**\n * Fetch narratives dependeing on the filter.\n * filter is one of following: \"mine\", \"shared\", \"public\", \"they\" <-- gender-neutral singular they\n * \"they\" is when logged-in user is viewing other user's profile. \n * \"they\" - fetch both \"public\" and \"shared\" profile and fileter response with profileID\n * @param filter \n */\nexport function loadNarratives (filter:string, profileID: string) {\n    // ThunkDispatch<RootState(Store), ExtraArg, Action>;\n    return async function (dispatch:ThunkDispatch<StoreState, void, AnyAction>, getState: () => StoreState) {\n        const rootStore = getState();\n        if(rootStore.auth.userAuthorization !== null){ \n            const token = rootStore.auth.userAuthorization.token;\n            const baseURL = rootStore.app.config.baseUrl;\n\n            //TODO: AKIYO replace ci.kbase with baseURL\n            switch(filter) {\n                case \"they\":\n                    const publicNarratives = fetchNarrativesAPI('public', token, 'https://ci.kbase.us/');\n                    const sharedNarratives = fetchNarrativesAPI('shared', token, 'https://ci.kbase.us/');\n                    let narrativeList = [];\n                    let narrativePayload:Array<NarrativeData> = [];\n                    Promise.all([publicNarratives, sharedNarratives]).then((response) => {\n                        // generate combined narrative list \n                        if ( typeof response[0] !== 'undefined' && typeof response[1] !== 'undefined') {\n                            narrativeList = response[0].concat(response[1]);\n                        } else if (typeof response[0] === 'undefined' && typeof response[1] !== 'undefined' ) {\n                            // if public narrative fetch came back empty, there is something major wrong happened\n                            console.error('error occuerred during fetching narratives.');\n                            narrativeList = response[1];\n                        } else if (typeof response[0] !== 'undefined' && typeof response[1] === 'undefined' ) {\n                            narrativeList = response[0];\n                        } else {\n                            // if public narrative fetch came back empty, there is something major wrong happened\n                            console.error('error occuerred during fetching narratives.');\n                            narrativeList  = [\n                                {\n                                    wsID: '',\n                                    permission: '',\n                                    name: 'Something went wrong. Please check console for error messages.',\n                                    last_saved: 0,\n                                    users: {},\n                                    narrative_detail: { creator: '' }\n                                }\n                            ]\n                        }\n                        \n                        for (let i = 0; i < narrativeList.length; i +=1) {\n  \n                            if( narrativeList[i].narrative_detail.creator ===  profileID) {\n                                narrativePayload.push(narrativeList[i]);\n                            }\n                        }\n                        \n                        dispatch({ type: LOAD_NARRATIVES, payload: narrativePayload })     \n                                \n                    })\n                    break;\n                case 'mine':\n                case 'shared':\n                case 'public':\n                    const response = await fetchNarrativesAPI(filter, token, 'https://ci.kbase.us/');\n\n                    if(typeof response !== 'undefined') {\n                        // console.log(\"rootstore\", rootStore)\n                        dispatch({ type: LOAD_NARRATIVES, payload: response })\n                    } else {\n                        let fetchFailed =  [\n                            {\n                                wsID: '',\n                                permission: '',\n                                name: 'Something went wrong. Please check console for error messages.',\n                                last_saved: 0,\n                                users: {},\n                                narrative_detail: { creator: '' }\n                            }\n                        ]\n                        dispatch({ type: LOAD_NARRATIVES, payload: fetchFailed})\n                    }\n                    break;\n\n            }            \n                        \n        } else {\n            console.error(\"I don't think this even should happen, but if it did, I must ask 'what kind of horrible bugs did you you create?'\")\n        }\n    }\n}\n","import { ThunkDispatch } from \"redux-thunk\";\nimport { StoreState, UserProfileService } from \"../interfaces\";\nimport { AnyAction } from 'redux';\nimport { fetchProfileAPI, updateProfileAPI } from '../../util/API';\nimport { sendTitle } from '@kbase/ui-lib';\n\nconst LOAD_PROFILE = 'LOAD_PROFILE';\n\n        // fetchProfileAPI().then((response) => {\n        //     console.log('user profile response', response)\n        //     if (typeof response !== 'undefined') {\n        //         if (this.props.username) {\n        //             this.props.setTitle('User Profile for ' + response.user.realname);\n        //         }\n        //         this.setState({\n        //             userName: {\n        //                 name: response.user.realname,\n        //                 userID: response.user.username\n        //             },\n        //             gravatarHash: response.profile.synced.gravatarHash,\n        //             userProfile: response.profile.userdata,\n        //             userProfileLoaded: true\n        //         });\n        //     } else {\n        //         // something went wrong during fetching.\n        //         this.setState({\n        //             userName: {\n        //                 name: 'Something went wrong. Please check console for error messages..',\n        //                 userID: ''\n        //             }\n        //         });\n        //     }\n        // });\n\n\n/**\n * fetch user profile\n *  @param {string} id  profile ID\n */\nexport function loadProfile(profileID:string) {\n    return async function (dispatch:ThunkDispatch<StoreState, void, AnyAction>, getState:() => StoreState ) {\n        const rootStore = getState();\n        if(rootStore.auth.userAuthorization !== null) {\n            const token = rootStore.auth.userAuthorization.token;\n            const baseURL = rootStore.app.config.baseUrl;\n            let payload:any;\n            let response:UserProfileService = await fetchProfileAPI(profileID, token, baseURL);\n            if (typeof response !== 'undefined') {\n                console.log(\"in profileAction loadProfile\", response)\n                if (response.user.username !== rootStore.auth.userAuthorization.username) {\n                    dispatch(sendTitle('User Profile for ' + response.user.realname));\n                }\n                // // shape response to profile\n                // let profile = {\n                //     userName: {\n                //         response.user\n                //     }\n                // }\n\n                // payload = profile;\n            } else {\n                payload = {\n                    userName: {\n                        name: 'Something went wrong. Please check console for error messages..',\n                        userID: ''\n                    }\n                }\n            }\n            \n            dispatch({ type: LOAD_PROFILE, payload: payload});\n\n        }\n    }\n}\n\nexport function updateProfile(profile:any) {\n    return async function (dispatch:ThunkDispatch<StoreState, void, AnyAction> , getState:() => StoreState ) {\n        const rootStore = getState();\n        if(rootStore.auth.userAuthorization !== null) {\n            const token = rootStore.auth.userAuthorization.token;\n            const baseURL = rootStore.app.config.baseUrl;\n            updateProfileAPI(token, baseURL, profile);\n\n            // humm it does update profile data in the database, but it's not going to call\n            // new fetch \n            // also, i need to set something that shows user it's been udpated and \n            // still fetching the new updated profile data\n        }\n    }\n}","import React from 'react';\nimport { UserName, ProfileData, OrgProp } from '../../redux/interfaces';\nimport { Row, Col, Card, Input } from 'antd';\nimport nouserpic from '../../assets/nouserpic.png';\nconst { Meta } = Card;\nconst { TextArea } = Input;\n\n/**\n *  Profile.tsx is a view component\n *  Parent componenet - pages/Home.tsx\n *\n */\n\ninterface Props {\n    baseURL: string;\n    token: string;\n    userName: UserName;\n    editEnable: Boolean;\n    userProfile: ProfileData;\n    orgs: Array<OrgProp>;\n    gravatarHash: string;\n    profileloaded: Boolean;\n    orgsloaded: Boolean;\n}\n\n/**\n * Returns profile component.\n * @param props\n */\nfunction Profile(props: Props) {\n    // console.log('profile props', props)\n    const profile = props.userProfile;\n    // Set initial value to props for initial render and no-data\n    let jobTitle = '';\n    let gravatarURL = '';\n    let affiliations = [\n        {\n            title: '',\n            organization: '',\n            started: '',\n            ended: ''\n        }\n    ];\n    let researchInterests: Array<string> = [];\n    let orgs = [\n        {\n            name: '',\n            url: ''\n        }\n    ];\n    let profileloading = true;\n    let gravatar;\n    if (props.profileloaded) {\n        profileloading = false;\n    }\n    let orgloading = true;\n    if (props.orgsloaded) {\n        orgloading = false;\n    }\n    // Set affiliations\n    if (typeof profile.affiliations !== 'undefined') {\n        affiliations = profile.affiliations;\n    }\n\n    // Set researchInterests\n    if (typeof profile.researchInterests !== 'undefined' && Array.isArray(profile.researchInterests)) {\n        researchInterests = profile.researchInterests;\n    }\n    // Set jobTitle\n    if (profile.jobTitle === 'Other' && typeof profile.jobTitle !== 'undefined') {\n        jobTitle = profile.jobTitleOther;\n    } else if (typeof profile.jobTitle !== 'undefined') {\n        jobTitle = profile.jobTitle;\n    } else {\n        jobTitle = '';\n    }\n    // set orgs\n    if (props.orgs) {\n        orgs = props.orgs;\n    }\n    // Set gravatarURL\n    if (profile['avatarOption'] === 'silhoutte' || !props.gravatarHash) {\n        gravatar = <img style={{ maxWidth: '100%', margin: '8px 0px' }} alt=\"avatar\" src={nouserpic} />;\n    } else if (props.gravatarHash) {\n        gravatarURL =\n            'https://www.gravatar.com/avatar/' + props.gravatarHash + '?s=300&amp;r=pg&d=' + profile.gravatarDefault;\n        gravatar = <img style={{ maxWidth: '100%', margin: '8px 0px' }} alt=\"avatar\" src={gravatarURL} />;\n    }\n\n    return (\n        <Row style={{ padding: 16 }}>\n            <Row gutter={8}>\n                <Col span={8}>\n                    <Card loading={profileloading} style={{ margin: '8px 0px', textAlign: 'center' }}>\n                        {/* <img style={{ maxWidth: '100%', margin: '8px 0px' }} alt='avatar' src={ gravatarURL } /> */}\n                        {gravatar}\n                    </Card>\n                    <Card\n                        loading={profileloading}\n                        style={{ margin: '8px 0px', textAlign: 'left' }}\n                        title={props.userName.name}\n                    >\n                        <Meta title=\"User ID\" />\n                        <Input className=\"clear-disabled\" disabled defaultValue={props.userName.userID}/>\n                        <Meta title=\"Position\" />\n                        <Input className=\"clear-disabled\" disabled defaultValue={jobTitle}/>\n                        <Meta title=\"Department\" />\n                        <Input className=\"clear-disabled\" disabled defaultValue={profile.department} />\n                        <Meta title=\"Organization\" />\n                        <Input className=\"clear-disabled\" disabled defaultValue={profile.organization}/>\n                        <Meta title=\"Location\" />\n                        <Input className=\"clear-disabled\" disabled defaultValue={profile.city}/>\n                        <Input className=\"clear-disabled\" disabled defaultValue={profile.state}/>\n                        <Input className=\"clear-disabled\" disabled defaultValue={profile.country}/>\n                        <Meta title=\"Primary Funding Source\" />\n                        <Input className=\"clear-disabled\" disabled defaultValue={profile.fundingSource}/>\n                    </Card>\n                </Col>\n                <Col span={16}>\n                    <Row gutter={8}>\n                        <Col span={12}>\n                            <Card className=\"card-with-height\" loading={profileloading} style={{ margin: '8px 0px' }} title=\"Research Interests\">\n                                <ul style={{ textAlign: 'left' }}>\n                                    {researchInterests.map((interest) => (\n                                        <li key={interest}>{interest}</li>\n                                    ))}\n                                </ul>\n                            </Card>\n                        </Col>\n                        <Col span={12}>\n                            <Card className=\"card-with-height\" loading={orgloading} style={{ margin: '8px 0px' }} title=\"Organizations\">\n                                <ul style={{ textAlign: 'left' }}>\n                                    {orgs.map((org, index) => (\n                                        <li key={index}>\n                                            <a href={org.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                                                {org.name}\n                                            </a>\n                                        </li>\n                                    ))}\n                                </ul>\n                            </Card>\n                        </Col>\n                    </Row>\n                    <Row>\n                        {/* TODO:AKIYO FIX - when the box is very small it doesn't break or hide word */}\n                        <Card\n                            loading={profileloading}\n                            style={{ margin: '8px 0px' }}\n                            title=\"Research or Personal Statement\"\n                        >\n                            <TextArea autosize readOnly className='clear-disabled' defaultValue={profile.researchStatement}/>\n                        </Card>\n                        <Card loading={profileloading} style={{ margin: '8px 0px' }} title=\"Afflications\">\n                            <ul style={{ textAlign: 'left' }}>\n                                {affiliations.map((position, index) => (\n                                    <li key={index}>\n                                        {position.title} @ {position.organization}, {position.started} -{' '}\n                                        {position.ended}{' '}\n                                    </li>\n                                ))}\n                            </ul>\n                        </Card>\n                    </Row>\n                </Col>\n            </Row>\n        </Row>\n    );\n}\n\nexport default Profile;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Action, Dispatch } from 'redux';\n\nimport { OrgProp, UserName, ProfileData, StoreState } from '../../redux/interfaces';\nimport {  updateProfile } from '../../redux/actions';\nimport Profile from './Profile';\n\n\ninterface Props {\n    baseURL: string;\n    token: string;\n    userName: UserName;\n    editEnable: Boolean;\n    userProfile: ProfileData;\n    orgs: Array<OrgProp>;\n    gravatarHash: string;\n    profileloaded: Boolean;\n    orgsloaded: Boolean;\n}\n\ninterface DispatchProps {\n    updateProfile: (profileID: string) => void;\n}\n\n\ninterface OwnProps {}\n\nfunction mapStateToProps(state: StoreState): Props {\n    console.log(\"ProfileContainer mapStateToProp\", state);\n    return {\n        baseURL: \"\",\n        token: \"\",\n        userName: {\n            userID: \"\",\n            name:''\n        },\n        editEnable:false,\n        userProfile: {\n            organization: '',\n            department: '',\n            city: '',\n            state: '',\n            postalCode: '',\n            country: '',\n            affiliations: [],\n            researchStatement: '',\n            jobTitle: '',\n            jobTitleOther: '',\n            researchInterests: [],\n            fundingSource: '',\n            gravatarDefault: '',\n            avatarOption: ''\n        },\n        orgs: [],\n        gravatarHash:\"\",\n        profileloaded: true,\n        orgsloaded: true\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        updateProfile: (profileID: string) => {\n            return dispatch(updateProfile(profileID) as any);\n        }\n    }\n}\n\n// function ProfileContainer(props:Props) {\n    \n//     return (\n//         <Profile\n//             baseURL={props.baseURL}\n//             token={props.token}\n//             userName={props.userName}\n//             editEnable={props.editEnable}\n//             userProfile={props.userProfile}\n//             orgs={props.orgs}\n//             gravatarHash={props.gravatarHash}\n//             profileloaded={props.profileloaded}\n//             orgsloaded={props.orgsloaded}\n//         />\n//     )\n\n// }\nexport default connect<Props, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps, \n    mapDispatchToProps\n    )(Profile);\n","/**\n *  Narrative.tsx is a view component\n *  Parent componenet - pages/Home.tsx\n *\n */\nimport React from 'react';\nimport { dateDisplay } from '../../util/dateDisplay'; // date format\nimport { Table, Popover } from 'antd';\nimport { Narrative_detail, NarrativeData } from '../../redux/interfaces'; //interface\n\ninterface TableData {\n    key: string;\n    wsID: string;\n    name: string;\n    last_saved: number;\n}\n\ninterface Props {\n    narratives: Array<NarrativeData>;\n    narrativesloaded: Boolean;\n}\n\n/**\n * Returns a component with list of narratives in a table.\n * @param props\n */\nfunction Narratives(props: Props) {\n    console.log(\"Narrative props\", props)\n    let data: Array<TableData> = [];\n    let loading = false;\n    // let loading = true;\n    // if (props.narrativesloaded) {\n    //     loading = false;\n    // }\n    // initialize data for the table to be an empty array.\n    const colums = [\n        {\n            title: 'Title',\n            dataIndex: 'name',\n            width: 350,\n            key: 'wsID',\n            render: (text: string, row: TableData) => {\n                let url = '/narrative/' + row.wsID;\n                return (\n                    <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n                        {text}\n                    </a>\n                );\n            },\n            sorter: (a: TableData, b: TableData) => {\n                let nameA = a.name.toUpperCase();\n                let nameB = b.name.toUpperCase();\n                if (nameA < nameB) {\n                    return -1;\n                }\n                if (nameA > nameB) {\n                    return 1;\n                }\n                return 0;\n            }\n        },\n        {\n            title: 'Last Saved',\n            dataIndex: 'last_saved',\n            width: 190,\n            render: (text: string, row: TableData) => {\n                let day = dateDisplay(row.last_saved);\n                return (\n                    <Popover placement=\"right\" content={day[0]}>\n                        {day[1]}\n                    </Popover>\n                );\n            },\n            sorter: (a: TableData, b: TableData) => {\n                let lastSavedA = a.last_saved;\n                let lastSavedB = b.last_saved;\n                if (lastSavedA < lastSavedB) {\n                    return 1;\n                }\n                if (lastSavedA > lastSavedB) {\n                    return -1;\n                }\n                return 0;\n            }\n        }\n    ];\n\n    for (let i = 0; i < props.narratives.length; i += 1) {\n        let narrative = props.narratives[i];\n        if (narrative.permission === 'r' || narrative.permission === 'n') {\n            if (Object.keys(narrative.users).length <= 0) {\n                data.push({\n                    key: narrative.wsID,\n                    wsID: narrative.wsID,\n                    name: narrative.name,\n                    last_saved: narrative.last_saved\n                });\n            } else {\n                data.push({\n                    key: narrative.wsID,\n                    wsID: narrative.wsID,\n                    name: narrative.name,\n                    last_saved: narrative.last_saved\n                });\n            }\n        } else {\n            const narrativeDetail: Narrative_detail = narrative['narrative_detail'];\n            let users = '';\n            for (let user in narrative.users) {\n                if (user !== narrativeDetail.creator) users = users + user + ', ';\n            }\n            data.push({\n                key: narrative.wsID,\n                wsID: narrative.wsID,\n                name: narrative.name,\n                last_saved: narrative.last_saved\n            });\n        }\n    }\n\n    return (\n        <Table<TableData>\n            style={{ width: '85%', margin: 'auto' }}\n            columns={colums}\n            dataSource={data}\n            loading={loading}\n        />\n    );\n}\n\nexport default Narratives;\n","/**\n * returns array of date in MMM DD YYY HH:MM:SS and one of below:\n * less than a min ago, # hours ago, # days ago, day: MMM DD YYYY (if it's more than a month)\n * @param {string} date date format\n * \n */\nexport function dateDisplay(date: number): Array<string> {\n    let delta = (Date.now() - +new Date(date))/1000000 ;\n    let dayString = (new Date(date)).toString();\n    // date format: MMM DD YYYY\n    let day = dayString.slice(4, 7) + ' ' + dayString.slice(8, 10) + ' ' + dayString.slice(11, 15);\n    //  date format: MMM DD YYYY HH:MM:SS\n    let dayAndTime = day + ' ' + dayString.slice(16, 24);\n    if( delta >= 2628 ) {\n        // more than a month ago\n        return [dayAndTime, day];\n    } else if( delta < 2628 && delta >= 86.4) {\n        // less than a month ago, but more than a day ago\n        let days = (delta/(86.4)).toFixed(0);\n        return [dayAndTime, days + ' days ago'];\n    }\n    else if( delta < 86.4 && delta >= 3.6) {\n        return [day, (delta/3.6).toFixed(0) + ' hours ago'];\n    } else if(delta < 3.6 && delta >= 0.06) {\n        return [dayAndTime, ((delta)*10).toFixed(0) + ' min ago'];\n    } else {\n        return [dayAndTime, 'less than a min ago']\n    }\n};","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { StoreState } from '../../redux/interfaces';\nimport Narratives from './Narratives';\n\n\n\nfunction mapStateToProps (state: StoreState) { \n    console.log(\"narrativeContainer\", state)\n    let narratives = state.narrativeDataArray\n    // Since this component is just a redux wrapper \n    // and not modifying state to make component props\n    // simply return state as props\n    return state \n}\n//TODO: AKIYO narrative loading \nfunction NarrativeContainer (mapStateToProps:StoreState) {\n    console.log('load NarrativeContainer', mapStateToProps.narrativeDataArray)\n    return (\n        <Narratives \n            narratives={mapStateToProps.narrativeDataArray} \n            narrativesloaded={true}\n        />\n    )\n}\n\nexport default connect(mapStateToProps)(NarrativeContainer);","import React from 'react';\nimport { Select } from 'antd';\nimport { filteredUserAPI } from '../../util/API';\nimport { UsernameRealname } from '../../redux/interfaces';\nconst { Option } = Select;\n\n\ninterface State {\n    data: Array<UsernameRealname>;\n    mouseLeave: boolean;\n}\n\ninterface Props {\n    token: string;\n    baseURL: string;\n}\n\ninterface Response {\n    version: string;\n    result: Array<any>;\n}\n\n/**\n * View component with user search feature.\n * @param props\n */\nclass SearchUsers extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            data: [],\n            mouseLeave: false\n        };\n        this.onChangeHandler = this.onChangeHandler.bind(this);\n        this.onSearchHandler = this.onSearchHandler.bind(this);\n        this.onMouseLeaveHandler = this.onMouseLeaveHandler.bind(this);\n        this.onMouseEnterHandler = this.onMouseEnterHandler.bind(this);\n    }\n\n    onSearchHandler(value: string): void {\n        if (value.length > 2 && this.state.mouseLeave !== true) {\n            filteredUserAPI(value, this.props.token, this.props.baseURL).then((response: Response) => {\n                if (typeof response !== 'undefined') {\n                    this.setState({ data: response['result'][0] });\n                } else {\n                    this.setState({\n                        data: [{ username: 'error', realname: 'Something went wrong. Try again later.' }]\n                    });\n                }\n            });\n        } else {\n            return;\n        }\n    }\n    onMouseLeaveHandler(): void {\n        this.setState({ mouseLeave: true });\n    }\n    onMouseEnterHandler(): void {\n        this.setState({ mouseLeave: false });\n    }\n    onChangeHandler(value: string): void {\n        if (value !== 'error' && typeof value !== 'undefined') {\n            let url = '/#user/' + value;\n            window.open(url, '_blank');\n        }\n    }\n\n    render() {\n        let data = this.state.data;\n        return (\n            <Select\n                mode=\"single\"\n                style={{ width: 250 }}\n                allowClear\n                showSearch\n                placeholder=\"enter more than 3 characters\"\n                showArrow={false}\n                onSearch={this.onSearchHandler}\n                onChange={this.onChangeHandler}\n                onMouseLeave={this.onMouseLeaveHandler}\n                onMouseEnter={this.onMouseEnterHandler}\n                optionFilterProp=\"children\"\n                filterOption={(inputValue, option) => {\n                    return true;\n                }}\n            >\n                {data.map((item) => {\n                    return (\n                        <Option key={item['username']}>\n                            {item['realname']} ({item['username']})\n                        </Option>\n                    );\n                })}\n            </Select>\n        );\n    }\n}\n\nexport default SearchUsers;\n","import React from 'react';\nimport { connect} from 'react-redux';\n\nimport SearchUsers from './SearchUsers';\n\ninterface AppState {\n    app: {\n        config: {\n            baseUrl: string;\n        }\n    };\n    auth: AuthData;\n}\n\ninterface AuthData {\n    userAuthorization: {\n        realname: string;\n        roles: Array<string>;\n        token: string;\n        username: string;\n    }\n}\n\nconst mapStateToProps = (state:AppState) => {\n    // Since this component is just a redux wrapper \n    // and not modifying state to make component props\n    // simply return state asd props\n    return state\n}\nfunction SearchUsersRedux(mapStateToProps:AppState) {\n    return (\n        <SearchUsers token={mapStateToProps.auth.userAuthorization.token} baseURL={mapStateToProps.app.config.baseUrl}/>\n    )\n}\n\nexport default connect(mapStateToProps)(SearchUsersRedux);","import React from 'react';\n\nimport { Tabs } from 'antd';\n\nimport ProfileContainer from '../components/Profile/ProfileContainer';\nimport NarrativeContainer from '../components/Narratives';\nimport { NarrativeData, OrgProp, Org, ProfileData,  UserName } from '../redux/interfaces';\nimport SearchUsersContainer from '../components/SearchUsers/SearchUsersContainer';\nimport { fetchOrgsOfProfileAPI, fetchProfileAPI } from '../util/API';\n\n\nconst TabPane = Tabs.TabPane;\n/**\n * Class component that keeps states for all the variables that viewer/child components needs.\n * This can converted into Redux if needed.\n * Parent component App.tsx\n */\n\n// add Narrative_detail if needed. Currently, data in the object is not used - Akiyo.\n\ninterface HomeState {\n    userName: UserName;\n    userProfile: ProfileData;\n    userProfileLoaded: Boolean;\n    editEnable: Boolean; // profile edit enable \n    narrativesLoaded: Boolean;\n    organizations: Array<OrgProp>;\n    organizationsLoaded: Boolean;\n    gravatarHash: string;\n}\n\n\nexport interface HomeProps {\n    token: string;\n    authUsername: string;\n    username: string | null;\n    baseURL: string;\n    setTitle: (title: string) => void;\n    loadNarratives: (filter: string, profileID: string) => void;\n    loadProfile: (profileID: string) => void;\n    updateProfile: (profileID: string) => void;\n}\n\nclass Home extends React.Component<HomeProps, HomeState> {\n    constructor(props: HomeProps) {\n        super(props);\n        this.state = {\n            userName: {\n                name: '',\n                userID: ''\n            },\n            editEnable: false,\n            userProfile: {\n                organization: '',\n                department: '',\n                city: '',\n                state: '',\n                postalCode: '',\n                country: '',\n                affiliations: [],\n                researchStatement: '',\n                jobTitle: '',\n                jobTitleOther: '',\n                researchInterests: [],\n                fundingSource: '',\n                gravatarDefault: '',\n                avatarOption: ''\n            },\n            userProfileLoaded: false,\n            narrativesLoaded: false,\n            organizations: [],\n            organizationsLoaded: false,\n            gravatarHash: ''\n        };\n    }\n\n\n    componentDidMount() {\n        console.log('homeprops in compDidMount', this.props)\n        let username;\n        if (this.props.username) {\n            username = this.props.username;\n            this.props.setTitle('User Profile for ' + username);\n        } else {\n            username = this.props.authUsername;\n            this.props.setTitle('Your User Profile');\n            this.setState({ editEnable: true })\n        }\n\n        this.props.loadProfile(username);\n        /**\n         * fetch user profile\n         *  @param {string} id  profile ID\n         */\n        fetchProfileAPI(username, this.props.token, this.props.baseURL).then((response) => {\n            console.log('user profile response', response)\n            if (typeof response !== 'undefined') {\n                // if (this.props.username) {\n                //     this.props.setTitle('User Profile for ' + response.user.realname);\n                // }\n                this.setState({\n                    userName: {\n                        name: response.user.realname,\n                        userID: response.user.username\n                    },\n                    gravatarHash: response.profile.synced.gravatarHash,\n                    userProfile: response.profile.userdata,\n                    userProfileLoaded: true\n                });\n            } else {\n                // something went wrong during fetching.\n                this.setState({\n                    userName: {\n                        name: 'Something went wrong. Please check console for error messages..',\n                        userID: ''\n                    }\n                });\n            }\n        });\n\n        /**\n         * fetch orgs that user blongs to the profile\n         *  @param {string} id  profile ID\n         */\n        fetchOrgsOfProfileAPI(username, this.props.token, this.props.baseURL).then((response: Array<Org>) => {\n            let orgArr: Array<OrgProp> = [];\n            if (typeof response !== 'undefined') {\n                response.forEach((org) => {\n                    orgArr.push({ name: org.name, url: this.props.baseURL + '/#org/' + org.id });\n                });\n                this.setState({\n                    organizations: orgArr,\n                    organizationsLoaded: true\n                });\n            } else {\n                // something went wrong during fetching.\n                this.setState({\n                    organizations: [\n                        { name: 'Something went wrong. Please check console for error messages.', url: '' }\n                    ],\n                    organizationsLoaded: true\n                });\n            }\n        });\n\n        /**\n         * Returns narratives that shows in Narrative table.\n         *\n         *\n         * Below logic determines which set of narratives needs to be fetched.\n         * if the viewing profile userid is not the logged in user,\n         * then fetch all of shared and public narrative and filter with the viewing profile userid.\n         */\n        if (typeof this.props.username === 'undefined'|| typeof this.props.authUsername === 'undefined') {\n            // if there is no logged in user in run time config (redux app state)\n            // returns an empty narrative list\n\n            //TODO: AKIYO OMG WHAT AM I GOING TO DO HERE!!\n            return;\n        } else {            \n            // when logged-in user is viewing own profile. \n            if (this.props.username === this.props.authUsername || this.props.username === null) {\n                console.log(\"fetch 'mine'\")\n                    this.props.loadNarratives('mine', this.props.authUsername ); // redux \n            } else {\n                /**\n                 * when logged in user is not viewing other user's profile\n                 * pass filter \"they\" <-- gender-neutral singular they\n                 * which tfetch both \"public\" and \"shared\" and filter response with profileID\n                 */\n\n                console.log(\"fetch 'they'\")\n                this.props.loadNarratives('they', this.props.username); // redux \n\n            }\n        }\n    }\n\n    componentDidUpdate(prevProps: any, prevState: any) {\n        console.log('homeprops in compDidUpdate', this.props)\n        // This privents from infinate component loading loop.\n        if (this.state === prevState) {\n            return;\n        }\n    }\n    // wrap search user component with a div so that display can be controlled.\n    // in order to place search component/box on the navigation tab, \n    // make it into a variable and insert it as tab title. \n    searchOnATab = <div className=\"search-on-a-tab\">Search other users <SearchUsersContainer /></div>\n    \n    render() {\n        return (\n            <div className=\"profile-tabs\">\n                <Tabs type=\"line\" defaultActiveKey=\"1\">\n                    <TabPane  tab=\"Profile\" key=\"1\">\n                        <ProfileContainer />\n                    </TabPane>\n                    <TabPane tab=\"Narratives\" key=\"3\">\n                        <NarrativeContainer />\n                    </TabPane>\n                    {/* Insert search user component div as a title to place it on the navigation tab  */}\n                    <TabPane disabled tab={this.searchOnATab} key=\"8\"></TabPane>\n                </Tabs>\n            </div>\n        );\n    }\n}\n\nexport default Home;\n","import { connect } from 'react-redux';\nimport { Action, Dispatch } from 'redux';\n\nimport Home from './Home';\nimport { StoreState, NarrativeData } from '../redux/interfaces';\nimport { sendTitle } from '@kbase/ui-lib';\nimport { loadNarratives, loadProfile, updateProfile } from '../redux/actions/index';\n\n\ninterface OwnProps {}\n\ninterface StateProps {\n    token: string;\n    authUsername: string;\n    username: string | null;\n    baseURL: string;\n}\n\ninterface DispatchProps {\n    setTitle: (title: string) => void;\n    loadNarratives: (filter:string, profileID: string) => void;\n    loadProfile: (profileID: string) => void;\n    updateProfile: (profileID: string) => void;\n}\n\n// TODO this should be part of the view definition\ninterface UserProfileViewParams {\n    username?: string;\n}\n\nfunction mapStateToProps(state: StoreState, ownProps: OwnProps): StateProps {\n    const {\n        auth: { userAuthorization },\n        app: {\n            config: { baseUrl },\n            runtime: {\n                navigation: { params: rawParams }\n            }\n        }\n    } = state;\n    if (!userAuthorization) {\n        throw new Error('This plugin only operates with authentication; no KBase token in store');\n    }\n    const params = (rawParams as unknown) as UserProfileViewParams;\n    return {\n        token: userAuthorization.token,\n        authUsername: userAuthorization.username,\n        username: params.username || null,\n        baseURL: baseUrl\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, ownProps: OwnProps): DispatchProps {\n    return {\n        // action creator loadNarratives is passed as props to the home page.\n        loadNarratives: (filter: string, profileID: string) => {\n            return dispatch(loadNarratives(filter, profileID) as any);\n        },\n        setTitle: (title: string) => {\n            return dispatch(sendTitle(title) as any);\n        },\n        updateProfile: (profileID: string) => {\n            return dispatch(updateProfile(profileID) as any);\n        },\n        loadProfile: (profileID: string) => {\n            return dispatch(loadProfile(profileID) as any);\n        }\n    \n    };\n}\n\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(Home);\n","import React from 'react';\nimport { Layout } from 'antd';\nimport { Provider } from 'react-redux';\nimport { createReduxStore } from './redux/store';\nimport { AppBase, AuthGate } from '@kbase/ui-lib';\n\nimport './App.css';\nimport HomeRedux from './pages/HomeRedux';\n\nconst { Content } = Layout;\nconst store = createReduxStore();\ninterface AppProps {}\ninterface AppState {}\n\nconst App: React.FC = () => {\n    return (\n        <Provider store={store}>\n            <AppBase>\n                <AuthGate required={true}>\n                    <div className=\"App\">\n                        <Layout style={{ minHeight: '100vh' }}>\n                            <Content style={{ backgroundColor: 'white' }}>\n                                <HomeRedux />\n                            </Content>\n                        </Layout>\n                    </div>\n                </AuthGate>\n            </AppBase>\n        </Provider>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n//TODO:AKIYO add service worker\n"],"sourceRoot":""}