{"version":3,"sources":["../../ant-design-profile/src/assets/nouserpic.png","../../ant-design-profile/src/redux/reducers/auth.tsx","../../ant-design-profile/src/redux/store.js","../../ant-design-profile/src/components/Profile.tsx","../../ant-design-profile/src/components/Narratives.tsx","../../ant-design-profile/src/util/dateDisplay.tsx","../../ant-design-profile/src/util/API.tsx","../../ant-design-profile/src/components/SearchUsers.tsx","../../ant-design-profile/src/components/SearchUsersRedux.tsx","../../ant-design-profile/src/pages/Home.tsx","../../ant-design-profile/src/pages/HomeRedux.tsx","../../ant-design-profile/src/App.tsx","../../ant-design-profile/src/index.tsx"],"names":["module","exports","__webpack_require__","p","initState","token","loggedInUser","hostName","authState","state","arguments","length","undefined","type","createStore","reducer","Meta","Profile","props","gravatar","profile","userProfile","jobTitle","gravatarURL","affiliations","title","organization","started","ended","researchInterests","orgs","name","url","profileloading","profileloaded","orgloading","orgsloaded","Array","isArray","jobTitleOther","gravatarHash","gravatarDefault","react_default","a","createElement","style","maxWidth","margin","alt","src","nouserpic","es_row","padding","gutter","col","span","card","loading","textAlign","userName","userID","department","city","country","fundingSource","map","interest","key","org","href","target","rel","researchStatement","position","index","Narratives","data","narrativesloaded","colums","dataIndex","width","render","text","row","wsID","sorter","b","nameA","toUpperCase","nameB","day","date","delta","Date","now","dayString","toString","slice","dayAndTime","toFixed","dateDisplay","last_saved","popover","placement","content","lastSavedA","lastSavedB","i","narratives","narrative","permission","Object","keys","users","push","narrativeDetail","user","creator","table","columns","dataSource","bffServiceUrl","serviceUrl","_callee","id","response","regenerator_default","wrap","_context","prev","next","fetch","method","sent","status","console","warn","error","abrupt","json","t0","stop","fetchNarrativesAPI","_x2","_x3","_fetchNarrativesAPI","apply","this","_callee2","param","_context2","headers","Authorization","_callee3","_context3","_callee4","searchValue","body","stringBody","res","_context4","version","params","filter","JSON","stringify","mode","Content-Type","_callee5","authMeUrl","res_json","_context5","t1","Option","SearchUsers","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","mouseLeave","onChangeHandler","bind","assertThisInitialized","onSearchHandler","onMouseLeaveHandler","onMouseEnterHandler","value","_this2","_x6","_x7","_filteredUserAPI","filteredUserAPI","then","setState","username","realname","window","open","es_select","allowClear","showSearch","placeholder","showArrow","onSearch","onChange","onMouseLeave","onMouseEnter","optionFilterProp","filterOption","inputValue","option","item","React","Component","connect","mapStateToProps","components_SearchUsers","TabPane","tabs","Home","proxy","tabTitle","postalCode","avatarOption","userProfileLoaded","narrativesLoaded","sharedNarratives","sharedNarrativesLoaded","organizations","organizationsLoaded","location","search","replace","_x","_fetchProfileAPI","fetchProfileAPI","_x4","_x5","_fetchOrgsOfProfileAPI","fetchOrgsOfProfileAPI","orgArr","forEach","_x8","_fetchLoggedInUserAPI","fetchLoggedInUserAPI","userid","narrative_detail","publicNarratives","Promise","all","values","sharedNarrativeList","narrativeList","allNarratives","concat","prevProps","prevState","defaultActiveKey","tab","components_Profile","components_Narratives","components_SearchUsersRedux","pages_Home","Content","App","className","layout","minHeight","backgroundColor","pages_HomeRedux","ReactDOM","es","store","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.48f1345e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nouserpic.9af42ba9.png\";","const initState = {\n    token: '3SLUNTKN5UABYMKHIB5QINDHTSQP442M',\n    loggedInUser: 'my user id',\n    hostName: 'https://narrative.kbase.us'\n}\ninterface Action {\n    type: string\n}\nfunction authState (state = initState, action: Action) {\n    switch (action.type) { \n        case 'LOGGEDIN_USER':\n            state = {\n                token: state.token,\n                loggedInUser: state.loggedInUser,\n                hostName: state.hostName\n            }\n            return {state}\n\n        default:\n            return state;\n\n    }\n}\n\nexport default authState;","import {createStore} from 'redux';\nimport reducer from './reducers/auth';\n\nexport default createStore(reducer)","import React from 'react';\nimport { UserName, ProfileData, OrgProp  } from '../pages/Home';\nimport { Row, Col, Card } from 'antd';\nimport nouserpic from '../assets/nouserpic.png';\nconst { Meta } = Card;\n\n/**\n *  Profile.tsx is a view component\n *  Parent componenet - pages/Home.tsx\n *  \n */\n\ninterface Props {\n    token: string;\n    userName: UserName;\n    userProfile: ProfileData;\n    orgs: Array<OrgProp>;\n    gravatarHash: string;\n    profileloaded: Boolean;\n    orgsloaded: Boolean;\n}\n\n/**\n * Returns profile component. \n * @param props \n */\nfunction Profile(props: Props){\n    const profile = props.userProfile;\n    // Set initial value to props for initial render and no-data\n    let jobTitle = '';\n    let gravatarURL = '';\n    let affiliations = [{\n        title: '',\n        organization: '',\n        started: '',\n        ended: ''\n    }]\n    let researchInterests:Array<string> = [];\n    let orgs = [{   \n            name: '',\n            url: ''\n        }];\n    let profileloading = true;\n    let gravatar;\n    if (props.profileloaded){\n        profileloading = false;\n    }\n    let orgloading = true;\n    if (props.orgsloaded){\n        orgloading = false;\n    }\n    // Set affiliations\n    if ( typeof profile.affiliations !== 'undefined') {\n        affiliations = profile.affiliations;\n    }\n\n    // Set researchInterests\n    if (typeof profile.researchInterests !== 'undefined' && Array.isArray(profile.researchInterests) ) {\n        researchInterests = profile.researchInterests\n    } \n    // Set jobTitle\n    if ( profile.jobTitle === 'Other' && typeof profile.jobTitle !== 'undefined' ) {\n        jobTitle = profile.jobTitleOther;\n    } else if ( typeof profile.jobTitle !== 'undefined' ){\n        jobTitle = profile.jobTitle;\n    } else {\n        jobTitle = '';\n    }\n    // set orgs\n    if(props.orgs){\n        orgs = props.orgs;\n    }\n    // Set gravatarURL\n    if (profile['avatarOption'] === 'silhoutte' || !props.gravatarHash) {\n        gravatar = <img style={{ maxWidth: '100%', margin: '8px 0px' }} alt='avatar' src={ nouserpic } />\n    } else if( props.gravatarHash ) {\n        gravatarURL = 'https://www.gravatar.com/avatar/' + props.gravatarHash + '?s=300&amp;r=pg&d=' + profile.gravatarDefault;\n        gravatar = <img style={{ maxWidth: '100%', margin: '8px 0px' }} alt='avatar' src={ gravatarURL } />\n    }\n\n\n    return (\n        <Row style={{ padding: 16 }}>\n        <Row gutter={8}>\n            <Col span={8}>\n                <Card loading={profileloading} style={{ margin: '8px 0px', textAlign: 'center'}}>\n                {/* <img style={{ maxWidth: '100%', margin: '8px 0px' }} alt='avatar' src={ gravatarURL } /> */}\n                {gravatar}\n                </Card>\n                <Card loading={profileloading} style={{ margin: '8px 0px', textAlign: 'left'}} title={props.userName.name}>\n                    <Meta title='User ID' />\n                    <p>{props.userName.userID}</p>\n                    <Meta title='Position' />\n                    <p>{jobTitle}</p>\n                    <Meta title='Department' />\n                    <p>{profile.department}</p>\n                    <Meta title='Organization' />\n                    <p>{profile.organization}</p>\n                    <Meta title='Location' />\n                    <p>{profile.city}, {profile.state}, {profile.country}</p>\n                    <Meta title='Primary Funding Source' />\n                    <p>{profile.fundingSource}</p>\n                </Card>\n            </Col>\n            <Col span={16}>\n                <Row gutter={8}>\n                    <Col span={12}>\n                        <Card loading={profileloading} style={{ margin: '8px 0px' }} title=\"Research Interests\">\n                            <ul style={{textAlign: \"left\"}}>\n                                {researchInterests.map(interest => (\n                                    <li key={interest}>{interest}</li>\n                                ))}\n                            </ul>\n                        </Card>\n                    </Col>\n                    <Col span={12}>\n                        <Card loading={orgloading} style={{ margin: '8px 0px' }} title=\"Organizations\">\n                            <ul style={{textAlign: \"left\"}}>\n                                {orgs.map((org) => (\n                                    <li key={org.name}><a href={org.url} target=\"_blank\" rel=\"noopener noreferrer\">{org.name}</a></li>\n                                ))}\n                            </ul>\n                        </Card>\n                    </Col>\n                </Row>\n                <Row>\n                    {/* TODO:AKIYO FIX - when the box is very small it doesn't break or hide word */}\n                    <Card loading={profileloading} style={{ margin: '8px 0px' }} title='Research or Personal Statement'>\n                        {profile.researchStatement}\n                    </Card>\n                    <Card loading={profileloading} style={{ margin: '8px 0px' }} title='Afflications'>\n                        <ul style={{textAlign: \"left\"}}>\n                            {affiliations.map((position, index) => (\n                                <li key={index}>{position.title} @ {position.organization},  {position.started} - {position.ended} </li>\n                            ))}\n                        </ul>\n                    </Card>\n                </Row>\n            </Col>\n        </Row>\n        </Row>\n    )\n}\n\nexport default Profile;\n\n","/**\n *  Narrative.tsx is a view component\n *  Parent componenet - pages/Home.tsx\n *  \n */\nimport React from 'react';\nimport { dateDisplay } from '../util/dateDisplay'; // date format\nimport { Table, Popover } from 'antd';\nimport { Narrative_detail, NarrativeData } from '../pages/Home'; //interface\n\ninterface TableData {\n    key: string;\n    wsID: string;\n    name: string;\n    last_saved: number;\n}\n\ninterface Props {\n    token: string;\n    loggedInUser: string;\n    narratives: Array<NarrativeData>;\n    narrativesloaded: Boolean;\n}\n\n/**\n * Returns a component with list of narratives in a table.\n * @param props \n */\nfunction Narratives(props: Props){\n    let data: Array<TableData> = [];\n    let loading = true;\n    if ( props.narrativesloaded ){\n        loading = false;\n    }\n    // initialize data for the table to be an empty array.\n    const colums = [\n        {\n            title: 'Title', dataIndex: 'name', width: 350, key: 'wsID',\n            render:(text:string, row:TableData) => {\n                let url = 'https://ci.kbase.us/narrative/' + row.wsID\n                return (\n                    <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">{text}</a>\n                );\n            },\n            sorter: (a: TableData, b: TableData) => {\n                let nameA = a.name.toUpperCase();\n                let nameB = b.name.toUpperCase();\n                if (nameA < nameB) {\n                    return -1;\n                }\n                if (nameA > nameB) {\n                    return 1;\n                }\n                return 0;\n            }\n        },\n        {\n            title: 'Last Saved', dataIndex: 'last_saved', width: 190,\n            render: (text:string, row:TableData) => {\n                let day = dateDisplay(row.last_saved);\n                return(\n                <Popover placement=\"right\" content={day[0]}>\n                    {day[1]}\n                </Popover>);\n            },\n            sorter: (a: TableData, b: TableData) => {\n                let lastSavedA = a.last_saved;\n                let lastSavedB = b.last_saved;\n                if (lastSavedA < lastSavedB) {\n                    return 1;\n                }\n                if (lastSavedA > lastSavedB) {\n                    return -1;\n                }\n                return 0;\n            }\n        }\n    ];\n\n    for (let i = 0; i < props.narratives.length; i += 1) {\n        let narrative = props.narratives[i];\n        if (narrative.permission === 'r' || narrative.permission === 'n') {\n            if (Object.keys(narrative.users).length <= 0) {\n                data.push({ 'key': narrative.wsID, 'wsID': narrative.wsID, 'name': narrative.name, 'last_saved': narrative.last_saved });\n            } else {\n                data.push({ 'key': narrative.wsID, 'wsID': narrative.wsID, 'name':  narrative.name, 'last_saved': narrative.last_saved, });\n            }\n        } else {\n            const narrativeDetail:Narrative_detail = narrative['narrative_detail']\n            let users = '';\n            for (let user in narrative.users) {\n                if (user !== narrativeDetail.creator)\n                    users = users + user + ', ';\n            }\n            data.push({ 'key': narrative.wsID, 'wsID': narrative.wsID, 'name':  narrative.name, 'last_saved': narrative.last_saved });\n        }\n    }\n\n    return (\n        <Table<TableData> \n            style={{ width: '85%', margin: 'auto' }} \n            columns={colums} \n            dataSource={data}\n            loading={loading}\n        />\n    )\n}\n\nexport default Narratives;","/**\n * returns array of date in MMM DD YYY HH:MM:SS and one of below:\n * less than a min ago, # hours ago, # days ago, day: MMM DD YYYY (if it's more than a month)\n * @param {string} date date format\n * \n */\nexport function dateDisplay(date: number): Array<string> {\n    let delta = (Date.now() - +new Date(date))/1000000 ;\n    let dayString = (new Date(date)).toString();\n    // date format: MMM DD YYYY\n    let day = dayString.slice(4, 7) + ' ' + dayString.slice(8, 10) + ' ' + dayString.slice(11, 15);\n    //  date format: MMM DD YYYY HH:MM:SS\n    let dayAndTime = day + ' ' + dayString.slice(16, 24);\n    if( delta >= 2628 ) {\n        // more than a month ago\n        return [dayAndTime, day];\n    } else if( delta < 2628 && delta >= 86.4) {\n        // less than a month ago, but more than a day ago\n        let days = (delta/(86.4)).toFixed(0);\n        return [dayAndTime, days + ' days ago'];\n    }\n    else if( delta < 86.4 && delta >= 3.6) {\n        return [day, (delta/3.6).toFixed(0) + ' hours ago'];\n    } else if(delta < 3.6 && delta >= 0.06) {\n        return [dayAndTime, ((delta)*10).toFixed(0) + ' min ago'];\n    } else {\n        return [dayAndTime, 'less than a min ago']\n    }\n};","const bffServiceUrl = 'http://localhost:5000';\n// TODO: make sure to get rid of local host 3000\n// TODO: response.json() It returns a promise so make sure to change all of them into await!  \nconst serviceUrl = 'https://kbase.us/services';\n\n\n/**\n * Return profile data\n * @param id profile id\n */\nexport async function fetchProfileAPI(id: string) {\n    let url = bffServiceUrl + '/fetchUserProfile/' + id;\n    const response = await fetch(url, {\n        method: 'GET'\n    });\n    if (response.status === 404) {\n        console.warn(\"404 response:\", response);\n    }\n    else if (response.status === 500) {\n        console.error(\"500 response:\", response);\n        return;\n    }\n    try {\n        const profile = await response.json();\n        return profile;\n    }\n    catch (err) {\n        console.error('profile fetch failed', response);\n    }\n    \n}\n\n/**\n * Return list of narratives\n * @param param shared/mine/public\n * @param token kbase session cookie\n */\nexport async function fetchNarrativesAPI(param:string, token:string) {\n    let url = bffServiceUrl + '/narrative_list/'+param;\n    const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n            Authorization: token\n        }\n    });\n    if (response.status === 500) {\n        console.error(\"Fetch Narratives 500 response:\", response);\n        return;\n    }\n    try {\n        const narratives = await response.json();\n        return narratives;\n    }\n    catch (err) {\n        console.error('fetch narratives failed', response)\n    }\n}\n\n/**\n * returns list of orgs that profile and logged in user are both associated with.\n * @param id id of the profile \n * @param token kbase session cookie\n */\nexport async function fetchOrgsOfProfileAPI(id:string, token:string) {\n    const url = bffServiceUrl + '/org_list/' + id;\n    const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n            Authorization: token\n        }\n    });\n    if (response.status === 500) {\n        console.error(\"500 response:\", response);\n        return;\n    }\n    try {\n        const orgs = await response.json();\n        return orgs;\n    }\n    catch (err) {\n        console.error('fetch org failed', response)\n    }\n}\n\n/**\n * returns list of users that are filtered by search values\n * @param searchValue search values\n * @param token kbase session cookie\n */\nexport async function filteredUserAPI(searchValue:string, token: string){\n    const body = {\n        'version': '1.1',\n        'method': 'UserProfile.filter_users',\n        'params': [{'filter': searchValue}]\n    }\n    const stringBody = JSON.stringify(body);\n\n    const url = serviceUrl + '/user_profile/rpc'\n    const response = await fetch(url,{\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n            Authorization: token,\n            'Content-Type': 'application/json'\n        },\n        body: stringBody\n    });\n    if (response.status === 500) {\n        console.error(\"500 response:\", response);\n        return;\n    }\n    try {\n        const res = await response.json();\n        // if you try to: return response.json, it will get error below\n        // Unhandled Rejection (TypeError): Failed to execute 'json' on 'Response': body stream is locked\n        // but assiging it to a vairable somehow magically works.\n        return res;\n    } \n    catch (err) {\n        console.error('fetch search users failed', response)\n    }\n}\n\n/**\n * returns uesr id of the logged in user\n * @param token kbase session cookie\n */\nexport async function fetchLoggedInUserAPI(token:string) {\n    const authMeUrl = serviceUrl + '/auth/me';\n    let response;\n    try {\n        response = await fetch(authMeUrl, {\n            method: 'GET',\n            mode: 'cors',\n            headers: {\n                Authorization: token,\n                'Content-Type': 'application/json'\n            }\n        });\n        \n    }\n    catch (error) {\n        console.error(\"fetch logged user failed\", error);\n    }\n    if ( response ) {\n        try {\n            const res_json = await response.json();\n            return res_json.user;\n        }\n        catch (error) {\n            console.error(\"fetch logged user failed\", error);\n        }\n    }\n}\n","import React from 'react';\nimport { Select } from 'antd';\nimport { Store } from '../pages/Home';\nimport { filteredUserAPI } from '../util/API';\nconst { Option } = Select;\n\ninterface FilteredUser {\n    username: string;\n    realname: string;\n}\n\ninterface Response {\n    version: string;\n    result: Array<any>\n}\n\ninterface State {\n    data: Array<FilteredUser>;\n    mouseLeave: boolean;\n}\n\ninterface Props {\n    token: string;\n    hostName: string;\n}\n/**\n * View component with user search feature. \n * @param props \n */\nclass SearchUsers extends React.Component<Props, State>{\n    constructor(props:Store) {\n        super(props);\n        this.state = {\n            data: [],\n            mouseLeave: false\n        }\n        this.onChangeHandler = this.onChangeHandler.bind(this);\n        this.onSearchHandler = this.onSearchHandler.bind(this);\n        this.onMouseLeaveHandler = this.onMouseLeaveHandler.bind(this);\n        this.onMouseEnterHandler = this.onMouseEnterHandler.bind(this);\n    }\n    \n    \n    onSearchHandler(value:string): void{\n        if(value.length>2  && this.state.mouseLeave !== true){\n            filteredUserAPI(value, this.props.token)\n            .then((response:Response)=>{ \n                if(typeof response !== \"undefined\") {\n                    this.setState({data: response['result'][0]});\n                }\n                else {\n                    this.setState({data: [\n                        { username: 'error', realname: 'Something went wrong. Try again later.'}\n                    ]})\n                }\n            })\n        } else {return}\n    };\n    onMouseLeaveHandler(): void{\n        this.setState( { mouseLeave: true } )\n    };\n    onMouseEnterHandler(): void{\n        this.setState( { mouseLeave: false } )\n    };\n    onChangeHandler(value:string): void{\n        if(value !== \"error\" && typeof value !== 'undefined') {\n            let url = 'http://localhost:3000/?' + value; // for dev version\n            // let url = this.props.hostName + value; \n            window.open(url, '_blank');\n        }\n    };\n\n    render() {\n        let data = this.state.data;\n        return (\n            <Select\n                mode=\"single\" style={{ width: 300 }}\n                allowClear\n                showSearch\n                placeholder=\"enter more than 3 characters\"\n                showArrow={false}\n                onSearch={this.onSearchHandler}\n                onChange={this.onChangeHandler}\n                onMouseLeave={this.onMouseLeaveHandler}\n                onMouseEnter={this.onMouseEnterHandler}\n                optionFilterProp=\"children\"\n                filterOption={(inputValue, option)=>{\n                    return true\n                }}\n            >\n                {data.map((item)=>{\n                   return (<Option key={item['username']}>{item['realname']} ({item['username']})</Option>)\n                })}\n            </Select>\n        )\n    }\n}\n\nexport default SearchUsers;","import React from 'react';\nimport { connect} from 'react-redux';\n\nimport SearchUsers from './SearchUsers';\nimport { Store } from '../pages/Home';\n\n// function mapStateToProps(state:Store) {\n//     return state\n// }\nconst mapStateToProps = (state:Store) => {\n    return state\n}\nfunction SearchUsersRedux(mapStateToProps:Store) {\n    return (\n        <SearchUsers token={mapStateToProps.token} hostName={mapStateToProps.hostName}/>\n    )\n}\n\nexport default connect(mapStateToProps)(SearchUsersRedux);","import React from 'react';\nimport { Tabs } from 'antd';\nimport Profile from '../components/Profile';\nimport Narratives from '../components/Narratives';\nimport SearchUsersRedux from '../components/SearchUsersRedux';\nimport { fetchLoggedInUserAPI, fetchOrgsOfProfileAPI, fetchProfileAPI, fetchNarrativesAPI } from '../util/API';\n\nconst TabPane = Tabs.TabPane;\n/**\n * Class component that keeps states for all the variables that viewer/child components needs.\n * This can converted into Redux if needed.\n * Parent component App.tsx\n */\n\n// add Narrative_detail if needed. Currently, data in the object is not used - Akiyo.\nexport interface Narrative_detail {\n    creator: string;\n}\n\nexport interface NarrativeData {\n    wsID: string;\n    permission: string;\n    name: string;\n    last_saved: number;\n    users: object;\n    narrative_detail: Narrative_detail;\n}\n\n// org data that \nexport interface OrgProp {\n    name: string;\n    url: string;\n}\n\n// fetchOrgsOfProfile returns a full group info, \n// but only name and id is needed to make OrgProp \nexport interface Org {\n    name: string;\n    id: string;\n}\n\nexport interface Affiliation {\n    title: string;\n    organization: string;\n    started: string;\n    ended: string;\n}\nexport interface ProfileData {\n    organization: string;\n    department: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    country: string;\n    affiliations: Array<Affiliation>;\n    researchStatement: string;\n    jobTitle: string;\n    jobTitleOther: string;\n    researchInterests: Array<string>;\n    fundingSource: string;\n    gravatarDefault: string;\n    avatarOption: string;\n}\n\nexport interface UserName {\n    name: string;\n    userID: string;\n}\ninterface State {\n    token: string;\n    proxy: string;\n    tabTitle: Array<string>;\n    userName: UserName;\n    loggedInUser: string;\n    userProfile: ProfileData;\n    userProfileLoaded: Boolean;\n    narratives: Array<NarrativeData>;\n    narrativesLoaded: Boolean;\n    sharedNarratives: Array<NarrativeData>;\n    sharedNarrativesLoaded: Boolean;\n    organizations: Array<OrgProp>;\n    organizationsLoaded: Boolean;\n    gravatarHash: string;\n};\n\nexport interface Store {\n    hostName: string;\n    token: string;\n    loggedInUser: string;\n}\n\n\nclass Home extends React.Component<Store, State> {\n    constructor(props: Store) {\n        super(props);\n        this.state = {\n            token: '3SLUNTKN5UABYMKHIB5QINDHTSQP442M',\n            proxy: 'https://narrative.kbase.us',\n            tabTitle: ['Profile', 'Narratives', 'Shared narratives', 'Search users'],\n            userName: {\n                name: '',\n                userID: '',\n            },\n            loggedInUser: '',\n            userProfile: {\n                organization: '',\n                department: '',\n                city: '',\n                state: '',\n                postalCode: '',\n                country: '',\n                affiliations: [],\n                researchStatement: '',\n                jobTitle: '',\n                jobTitleOther: '',\n                researchInterests: [],\n                fundingSource: '',\n                gravatarDefault: '',\n                avatarOption: '',\n            },\n            userProfileLoaded: false,\n            narratives: [],\n            narrativesLoaded: false,\n            sharedNarratives: [],\n            sharedNarrativesLoaded: false,\n            organizations: [],\n            organizationsLoaded: false,\n            gravatarHash: '',\n        }\n    }\n\n\n    componentDidMount() {\n        const userID = window.location.search.replace('?', '');\n        /**\n         * fetch user profile \n         *  @param {string} id  profile ID\n         */\n        fetchProfileAPI(userID)\n            .then((response) => {\n                if(typeof response !== 'undefined') {\n                    this.setState({\n                        userName: {\n                            name: response['user']['realname'],\n                            userID: response['user']['username']\n                        },\n                        gravatarHash: response['profile']['synced']['gravatarHash'],\n                        userProfile: response['profile']['userdata'],\n                        userProfileLoaded: true\n                    })\n                } else {\n                    // something went wrong during fetching.  \n                    this.setState({\n                        userName: {\n                            name: 'Something went wrong. Please Please check console for error messages..',\n                            userID: ''\n                        }\n                    })\n                }\n            });\n\n        /**\n         * fetch orgs that user blongs to the profile \n         *  @param {string} id  profile ID\n         */\n        fetchOrgsOfProfileAPI(userID, this.state.token)\n            .then((response: Array<Org>) => {\n                let orgArr: Array<OrgProp> = [];\n                if( typeof response !== 'undefined'){\n                    response.forEach(org => {\n                        orgArr.push({ 'name': org.name, 'url': this.state.proxy + '/#org/' + org.id })\n                    });\n                    this.setState(\n                        { \n                            organizations: orgArr,\n                            organizationsLoaded: true,\n                        }\n                    )\n                } else {\n                    // something went wrong during fetching.\n                    this.setState(\n                        { \n                            organizations: [{name: 'Something went wrong. Please check console for error messages.', url:''}],\n                            organizationsLoaded: true,\n                        }\n                    )\n                }\n            });\n\n        /**\n         * Returns narratives that shows in Narrative table.\n         * @param {string} token Auth Token/cookie\n         * \n         * fetch who is logged in first and determine which set of narratives needs to be fetched.\n         * fetchLoggedInUser uses url search parameter.\n         * if the viewing profile userid is not the logged in user, \n         * then fetch all of shared and public narrative and filter with the viewing profile userid.\n         */\n\n        fetchLoggedInUserAPI(this.state.token)\n            .then((response: string) => {\n                if(typeof response === 'undefined') {\n                    // something went wrong during fetching.\n                    this.setState(\n                        { \n                            narratives: [\n                                {\n                                    wsID: '',\n                                    permission: '',\n                                    name: 'Something went wrong. Please check console for error messages.',\n                                    last_saved: 1,\n                                    users: {},\n                                    narrative_detail: {creator: ''}\n                                }\n                            ],\n                            narrativesLoaded: true\n                        }\n                        );\n                        return\n                    }\n                    // fetch user was successful \n                    const userid = window.location.search.replace('?', '');\n                    this.setState({ loggedInUser: response });\n                    if (response === userid) {\n                        fetchNarrativesAPI('mine', this.state.token)\n                        .then((response: Array<NarrativeData>) => {\n                        if(typeof response !== 'undefined') {\n                            this.setState(\n                                { \n                                    narratives: response,\n                                    narrativesLoaded: true\n                                }\n                            );\n                        } else {\n                            // fetch failed\n                            this.setState(\n                                { \n                                    narratives: [\n                                        {\n                                            wsID: '',\n                                            permission: '',\n                                            name: 'Something went wrong. Please check console for error messages.',\n                                            last_saved: 0,\n                                            users: {},\n                                            narrative_detail: {creator: ''}\n                                        }\n                                    ],\n                                    narrativesLoaded: true\n                                }\n                            );\n                        }\n                    });\n                    fetchNarrativesAPI('shared', this.state.token)\n                        .then((response: Array<NarrativeData>) => {\n                            if(typeof response !== 'undefined') {\n                                this.setState(\n                                    { \n                                        sharedNarratives: response,\n                                        sharedNarrativesLoaded: true\n                                    }\n                                );\n                            } else {\n                                // something went wrong during fetching.\n                                this.setState(\n                                    { \n                                        sharedNarratives: [\n                                            {\n                                                wsID: '',\n                                                permission: '',\n                                                name: 'Something went wrong. Please check console for error messages.',\n                                                last_saved: 0,\n                                                users: {},\n                                                narrative_detail: {creator: ''}\n                                            }\n                                        ],\n                                        sharedNarrativesLoaded: true\n                                    }\n                                );\n                            }\n                        })\n                } else {\n                    let publicNarratives = fetchNarrativesAPI('public', this.state.token)\n                        .then((response: Array<NarrativeData>) => {\n                            if(typeof response === 'undefined') {\n                                // fetch failed.\n                                this.setState(\n                                    { \n                                        narratives: [\n                                            {\n                                                wsID: '',\n                                                permission: '',\n                                                name: 'Something went wrong. Please check console for error messages.',\n                                                last_saved: 0,\n                                                users: {},\n                                                narrative_detail: {creator: ''}\n                                            }\n                                        ],\n                                        narrativesLoaded: true\n                                    }\n                                );\n                                return\n                            } \n                            return response \n                        });\n                    let sharedNarratives = fetchNarrativesAPI('shared', this.state.token)\n                        .then((response: Array<NarrativeData>) => { return response });\n                    Promise.all([publicNarratives, sharedNarratives]).then(\n                        (values) => {\n                            let sharedNarrativeList = [];\n                            if(typeof values[1] !== 'undefined'){\n                                for (let i = 0; i < values[1].length; i++) {\n                                    let narrative = values[1][i];\n                                    if (narrative.narrative_detail.creator !== userID) {\n                                        for (let user in narrative.users) {\n                                            if (user === userID) {\n                                                sharedNarrativeList.push(narrative);\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n\n                            let narrativeList = [];\n                            if(typeof values[0] !== 'undefined'){\n                                let allNarratives = values[0].concat(values[1]);\n                                for (let i = 0; i < allNarratives.length; i += 1) {\n                                    if (allNarratives[i]['narrative_detail']['creator'] === userid) {\n                                        narrativeList.push(allNarratives[i]);\n                                    }\n                                }\n                            }\n                            this.setState(\n                                { \n                                    narratives: narrativeList,\n                                    narrativesLoaded: true,\n                                    sharedNarratives: sharedNarrativeList,\n                                    sharedNarrativesLoaded: true\n                                }\n                            )\n                        }\n                    )\n                }\n            });\n    }\n\n    componentDidUpdate(prevProps: any, prevState: any) {\n        // This privents from infinate component loading loop.\n        if (this.state === prevState) {\n            return\n        }\n    }\n\n    render() {\n        return (\n            <Tabs type='line' defaultActiveKey=\"1\">\n                <TabPane tab=\"Profile\" key=\"1\">\n                    <Profile \n                        userName={this.state.userName} \n                        userProfile={this.state.userProfile} \n                        orgs={this.state.organizations} \n                        gravatarHash={this.state.gravatarHash} \n                        profileloaded={this.state.userProfileLoaded}\n                        orgsloaded={this.state.organizationsLoaded}\n                        token={this.props.token}\n                    />\n                </TabPane>\n                <TabPane tab=\"Narratives\" key=\"3\">\n                    <Narratives \n                        loggedInUser={this.state.loggedInUser} \n                        narratives={this.state.narratives} \n                        narrativesloaded={this.state.narrativesLoaded}\n                        token={this.props.token}\n                    />\n                </TabPane>\n                <TabPane tab=\"Search other users\" key=\"6\">\n                    < SearchUsersRedux />\n                </TabPane>\n            </Tabs>\n        );\n    }\n}\n\nexport default Home;","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport Home from './Home';\nimport { Store } from '../pages/Home';\n\nconst mapStateToProps = (state:Store) => {\n    return state\n}\nfunction HomeRedux(mapStateToProps:Store) {\n    return (\n        <Home loggedInUser={mapStateToProps.loggedInUser} token={mapStateToProps.token} hostName={mapStateToProps.hostName}/>\n    )\n}\n\nexport default connect(mapStateToProps)(HomeRedux);","import React from 'react';\nimport { Layout } from 'antd';\nimport './App.css';\nimport HomeRedux from './pages/HomeRedux';\nconst { Content } = Layout;\n\n\nconst App: React.FC = () => {\n    return (\n        <div className=\"App\">\n            <Layout style={{ minHeight: '100vh' }}>\n                <Content style={{ backgroundColor: 'white' }}>\n                    <HomeRedux />\n                </Content>\n            </Layout>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n//TODO:AKIYO add service worker\n"],"sourceRoot":""}