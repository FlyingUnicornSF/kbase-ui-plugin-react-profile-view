{"version":3,"sources":["assets/nouserpic.png","redux/reducers/reducer.ts","redux/reducers/index.ts","redux/reducers/narrative_reducers.ts","redux/store.ts","components/Profile/Profile.tsx","util/API.tsx","components/SearchUsers/SearchUsers.tsx","components/SearchUsers/SearchUsersContainer.tsx","components/Narratives/Narratives.tsx","util/dateDisplay.tsx","components/Narratives/NarrativeContainer.tsx","pages/Home.tsx","redux/actions/narrativeActions.ts","pages/HomeRedux.tsx","App.tsx","index.tsx"],"names":["module","exports","__webpack_require__","p","reducer","state","action","baseReducer","rootReducer","kbaseUIStore","console","log","type","payload","_objectSpread","narrativeDataArray","wsID","permission","name","last_saved","users","narrative_detail","creator","narrativeReducer","makeInitialStoreState","baseStoreState","makeBaseStoreState","store_objectSpread","Meta","TextArea","Profile","props","gravatar","profile","userProfile","jobTitle","gravatarURL","affiliations","title","organization","started","ended","researchInterests","orgs","url","profileloading","profileloaded","orgloading","orgsloaded","Array","isArray","jobTitleOther","gravatarHash","gravatarDefault","react_default","a","createElement","style","maxWidth","margin","alt","src","nouserpic","es_row","padding","gutter","col","span","card","loading","textAlign","userName","input","className","disabled","defaultValue","userID","department","city","country","fundingSource","map","interest","key","org","index","href","target","rel","autosize","readOnly","researchStatement","position","getBFFServiceUrl","_x","_x2","_getBFFServiceUrl","apply","this","arguments","_callee","token","baseURL","body","stringBody","response","responseJson","regenerator_default","wrap","_context","prev","next","id","method","version","params","module_name","JSON","stringify","fetch","mode","headers","Authorization","sent","json","abrupt","result","stop","_callee2","bffServiceUrl","_context2","status","warn","error","t0","fetchNarrativesAPI","_x9","_x10","_x11","_fetchNarrativesAPI","_callee4","param","narratives","_context4","_callee5","_context5","_callee6","searchValue","res","_context6","filter","Content-Type","Option","SearchUsers","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","data","mouseLeave","onChangeHandler","bind","assertThisInitialized","onSearchHandler","onMouseLeaveHandler","onMouseEnterHandler","value","_this2","length","_x15","_x16","_x17","_filteredUserAPI","filteredUserAPI","then","setState","username","realname","window","open","es_select","width","allowClear","showSearch","placeholder","showArrow","onSearch","onChange","onMouseLeave","onMouseEnter","optionFilterProp","filterOption","inputValue","option","item","React","Component","connect","mapStateToProps","components_SearchUsers_SearchUsers","auth","userAuthorization","app","config","baseUrl","Narratives","colums","dataIndex","render","text","row","sorter","b","nameA","toUpperCase","nameB","day","date","delta","Date","now","dayString","toString","slice","dayAndTime","toFixed","dateDisplay","popover","placement","content","lastSavedA","lastSavedB","i","narrative","keys","push","narrativeDetail","user","table","columns","dataSource","Narratives_Narratives","narrativesloaded","TabPane","tabs","Home","searchOnATab","SearchUsersContainer","tabTitle","editEnable","postalCode","avatarOption","userProfileLoaded","narrativesLoaded","sharedNarratives","sharedNarrativesLoaded","organizations","organizationsLoaded","setTitle","authUsername","_x3","_x4","_x5","_fetchProfileAPI","fetchProfileAPI","synced","userdata","_x12","_x13","_x14","_fetchOrgsOfProfileAPI","fetchOrgsOfProfileAPI","orgArr","forEach","loadNarratives","prevProps","prevState","defaultActiveKey","tab","Profile_Profile","Narratives_NarrativeContainer","LOAD_NARRATIVES","ownProps","_state$app","rawParams","runtime","navigation","Error","dispatch","profileID","_ref","asyncToGenerator","mark","getState","rootStore","publicNarratives","narrativeList","narrativePayload","Promise","all","concat","sendTitle","Content","store","createStore","compose","applyMiddleware","thunk","App","es","lib","required","layout","minHeight","backgroundColor","HomeRedux","ReactDOM","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.73853f8b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nouserpic.9af42ba9.png\";","import { Action, Reducer } from \"redux\";\nimport { baseReducer } from \"@kbase/ui-lib\"; \nimport { BaseStoreState } from \"@kbase/ui-lib\"; \nimport { StoreState } from \"../interfaces\";\n\nconst reducer: Reducer<StoreState | undefined, Action> = (state: StoreState | undefined, action: Action) => {\n  const baseState = baseReducer(state as BaseStoreState, action);\n  // if (baseState) {\n  //   return baseState as StoreState;\n  // }\n  return baseState as StoreState;\n};\n\nexport default reducer;","import { Action, Reducer } from 'redux';\nimport narrativeReducer from './narrative_reducers';\nimport reducer from './reducer';\nimport { StoreState, NarrativeData } from  \"../interfaces\";;\n\ninterface narrativeFetchActionType {\n  type: string;\n  payload: Array<NarrativeData>\n}\n//TODO:AKIYO convert this to combine reducers\n\n\nconst rootReducer: Reducer<StoreState | undefined, Action> = (state: StoreState | undefined, action: Action) => {\n\n  // Inital combine state created by store is loaded first \n  const kbaseUIStore = reducer(state as StoreState, action);\n  // if state doesn't load for whatever the reason possibly could be \n  if (!state) {\n    console.log('return state ')\n    return state // honestly I don't know what this returns\n  }\n  \n  // when reducer is creating KbaseUIStore \n  if (kbaseUIStore) {\n    return kbaseUIStore as StoreState;\n  } \n  else {\n    // when actions from app needs specific reducers\n    switch(action.type) {\n      case \"LOAD_NARRATIVES\": \n        console.log('calling narrative Reducer', action)\n        return narrativeReducer(state, action as narrativeFetchActionType);\n      default:\n        return state;\n    }\n  }\n}\n\n\nexport default rootReducer;\n","import { Action } from \"redux\";\nimport { StoreState } from \"../interfaces\";\nimport { NarrativeData } from \"../interfaces\";\n\ninterface narrativeFetchActionType {\n    type: string;\n    payload: Array<NarrativeData>\n}\n\nexport default function narrativeReducer(state: StoreState, action: narrativeFetchActionType):StoreState   {\n    const payload = action.payload;\n    switch (action.type) {\n        case 'LOAD_FAKE_NARRATIVES':\n            return (\n                { ...state,\n                    narrativeDataArray: [\n                        // list of narratives {key: string;\n                        // wsID: string;\n                        // name: string;\n                        // last_saved: number;}\n                        {\n                            wsID: 'foo',\n                            permission: 'r',\n                            name: 'foofoo',\n                            last_saved: 0,\n                            users: {},\n                            narrative_detail: { creator: 'me' }\n                            \n                        },\n                        {\n                            wsID: 'bar',\n                            permission: 'r',\n                            name: 'barbar',\n                            last_saved: 0,\n                            users: {},\n                            narrative_detail: { creator: 'me' }\n                        },\n                        {\n                            wsID: 'baz',\n                            permission: 'r',\n                            name: 'bazbaz',\n                            last_saved: 0,\n                            users: {},\n                            narrative_detail: { creator: 'me' }\n                        }\n                    ]\n                }\n            );\n            \n            break;\n                \n        case 'LOAD_NARRATIVES':\n            console.log('im in narrative reducer', payload)\n            return (\n                { ...state,\n                    narrativeDataArray: payload\n                }\n            );\n            \n        break;\n        \n        default: \n                return state;\n    }\n}","import { createStore, compose, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\n\nimport { makeBaseStoreState } from \"@kbase/ui-lib\";\nimport { StoreState,  NarrativeData, ProfileData,  NarrativeState } from './interfaces';\nimport rootReducer from \"./reducers/index\";\n\n\n// When app starts, this runs first to set the initial state.\nexport function makeInitialStoreState(): StoreState {\n    const baseStoreState = makeBaseStoreState();\n    // setting initial empty narrative state\n    const narrativePreloadedState: Array<NarrativeData>  = [{\n        wsID: '',\n        permission: '',\n        name: '',\n        last_saved: 0,\n        users: {},\n        narrative_detail: { creator: '' }\n    }]\n    console.log('baseStoreState', baseStoreState)\n    return {\n        // ...baseStoreState, userProfileApp:{ narrativeDataArray: narrativePreloadedState }\n        ...baseStoreState,  narrativeDataArray: narrativePreloadedState \n    };\n}\nexport function createReduxStore() {\n    return createStore(rootReducer, makeInitialStoreState(), compose(applyMiddleware(thunk)));\n}","import React from 'react';\nimport { UserName, ProfileData, OrgProp } from '../../redux/interfaces';\nimport { Row, Col, Card, Input } from 'antd';\nimport nouserpic from '../../assets/nouserpic.png';\nconst { Meta } = Card;\nconst { TextArea } = Input;\n\n/**\n *  Profile.tsx is a view component\n *  Parent componenet - pages/Home.tsx\n *\n */\n\ninterface Props {\n    baseURL: string;\n    token: string;\n    userName: UserName;\n    editEnable: Boolean;\n    userProfile: ProfileData;\n    orgs: Array<OrgProp>;\n    gravatarHash: string;\n    profileloaded: Boolean;\n    orgsloaded: Boolean;\n}\n\n/**\n * Returns profile component.\n * @param props\n */\nfunction Profile(props: Props) {\n    // console.log('profile props', props)\n    const profile = props.userProfile;\n    // Set initial value to props for initial render and no-data\n    let jobTitle = '';\n    let gravatarURL = '';\n    let affiliations = [\n        {\n            title: '',\n            organization: '',\n            started: '',\n            ended: ''\n        }\n    ];\n    let researchInterests: Array<string> = [];\n    let orgs = [\n        {\n            name: '',\n            url: ''\n        }\n    ];\n    let profileloading = true;\n    let gravatar;\n    if (props.profileloaded) {\n        profileloading = false;\n    }\n    let orgloading = true;\n    if (props.orgsloaded) {\n        orgloading = false;\n    }\n    // Set affiliations\n    if (typeof profile.affiliations !== 'undefined') {\n        affiliations = profile.affiliations;\n    }\n\n    // Set researchInterests\n    if (typeof profile.researchInterests !== 'undefined' && Array.isArray(profile.researchInterests)) {\n        researchInterests = profile.researchInterests;\n    }\n    // Set jobTitle\n    if (profile.jobTitle === 'Other' && typeof profile.jobTitle !== 'undefined') {\n        jobTitle = profile.jobTitleOther;\n    } else if (typeof profile.jobTitle !== 'undefined') {\n        jobTitle = profile.jobTitle;\n    } else {\n        jobTitle = '';\n    }\n    // set orgs\n    if (props.orgs) {\n        orgs = props.orgs;\n    }\n    // Set gravatarURL\n    if (profile['avatarOption'] === 'silhoutte' || !props.gravatarHash) {\n        gravatar = <img style={{ maxWidth: '100%', margin: '8px 0px' }} alt=\"avatar\" src={nouserpic} />;\n    } else if (props.gravatarHash) {\n        gravatarURL =\n            'https://www.gravatar.com/avatar/' + props.gravatarHash + '?s=300&amp;r=pg&d=' + profile.gravatarDefault;\n        gravatar = <img style={{ maxWidth: '100%', margin: '8px 0px' }} alt=\"avatar\" src={gravatarURL} />;\n    }\n\n    return (\n        <Row style={{ padding: 16 }}>\n            <Row gutter={8}>\n                <Col span={8}>\n                    <Card loading={profileloading} style={{ margin: '8px 0px', textAlign: 'center' }}>\n                        {/* <img style={{ maxWidth: '100%', margin: '8px 0px' }} alt='avatar' src={ gravatarURL } /> */}\n                        {gravatar}\n                    </Card>\n                    <Card\n                        loading={profileloading}\n                        style={{ margin: '8px 0px', textAlign: 'left' }}\n                        title={props.userName.name}\n                    >\n                        <Meta title=\"User ID\" />\n                        <Input className=\"clear-disabled\" disabled defaultValue={props.userName.userID}/>\n                        <Meta title=\"Position\" />\n                        <Input className=\"clear-disabled\" disabled defaultValue={jobTitle}/>\n                        <Meta title=\"Department\" />\n                        <Input className=\"clear-disabled\" disabled defaultValue={profile.department} />\n                        <Meta title=\"Organization\" />\n                        <Input className=\"clear-disabled\" disabled defaultValue={profile.organization}/>\n                        <Meta title=\"Location\" />\n                        <Input className=\"clear-disabled\" disabled defaultValue={profile.city}/>\n                        <Input className=\"clear-disabled\" disabled defaultValue={profile.state}/>\n                        <Input className=\"clear-disabled\" disabled defaultValue={profile.country}/>\n                        <Meta title=\"Primary Funding Source\" />\n                        <Input className=\"clear-disabled\" disabled defaultValue={profile.fundingSource}/>\n                    </Card>\n                </Col>\n                <Col span={16}>\n                    <Row gutter={8}>\n                        <Col span={12}>\n                            <Card className=\"card-with-height\" loading={profileloading} style={{ margin: '8px 0px' }} title=\"Research Interests\">\n                                <ul style={{ textAlign: 'left' }}>\n                                    {researchInterests.map((interest) => (\n                                        <li key={interest}>{interest}</li>\n                                    ))}\n                                </ul>\n                            </Card>\n                        </Col>\n                        <Col span={12}>\n                            <Card className=\"card-with-height\" loading={orgloading} style={{ margin: '8px 0px' }} title=\"Organizations\">\n                                <ul style={{ textAlign: 'left' }}>\n                                    {orgs.map((org, index) => (\n                                        <li key={index}>\n                                            <a href={org.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                                                {org.name}\n                                            </a>\n                                        </li>\n                                    ))}\n                                </ul>\n                            </Card>\n                        </Col>\n                    </Row>\n                    <Row>\n                        {/* TODO:AKIYO FIX - when the box is very small it doesn't break or hide word */}\n                        <Card\n                            loading={profileloading}\n                            style={{ margin: '8px 0px' }}\n                            title=\"Research or Personal Statement\"\n                        >\n                            <TextArea autosize readOnly className='clear-disabled' defaultValue={profile.researchStatement}/>\n                        </Card>\n                        <Card loading={profileloading} style={{ margin: '8px 0px' }} title=\"Afflications\">\n                            <ul style={{ textAlign: 'left' }}>\n                                {affiliations.map((position, index) => (\n                                    <li key={index}>\n                                        {position.title} @ {position.organization}, {position.started} -{' '}\n                                        {position.ended}{' '}\n                                    </li>\n                                ))}\n                            </ul>\n                        </Card>\n                    </Row>\n                </Col>\n            </Row>\n        </Row>\n    );\n}\n\nexport default Profile;\n","import { UserProfileService, ProfileData, UpdatedUserData} from \"../redux/interfaces\";\ninterface foo {\n\n    userdata: ProfileData;\n\n}\nexport async function getBFFServiceUrl(token: string, baseURL: string) {\n    // TODO: for dev, the baseUrl will be whatever works for the CRA workflow, which is ''.\n    // baseURL = 'https://ci.kbase.us/services'; // for dev\n    let url = baseURL + '/services/service_wizard';\n    const body = {\n        id: 0,\n        method: 'ServiceWizard.get_service_status',\n        version: '1.1',\n        params: [\n            {\n                module_name: 'bff',\n                version: null\n            }\n        ]\n    };\n    const stringBody = JSON.stringify(body);\n    const response = await fetch(url, {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n            Authorization: token\n        },\n        body: stringBody\n    });\n    const responseJson = await response.json();\n    return responseJson.result[0]['url'];\n}\n\n/**\n * Return profile data\n * @param id profile id\n * @param token KBase session cookie\n * @param baseUrl hostname\n */\nexport async function fetchProfileAPI(id: string, token: string, baseURL: string) {\n    const bffServiceUrl = await getBFFServiceUrl(token, baseURL);\n    let url = bffServiceUrl + '/fetchUserProfile/' + id;\n    const response = await fetch(url, {\n        method: 'GET'\n    });\n    if (response.status === 404) {\n        console.warn('404 response:', response);\n    } else if (response.status === 500) {\n        console.error('500 response:', response);\n        return;\n    }\n    try {\n        const profile = await response.json();\n        return profile;\n    } catch (err) {\n        console.error('profile fetch failed', response);\n    }\n}\n\nexport async function updateProfileAPI(token: string, baseURL: string, userdata:ProfileData) {\n    \n// export async function updateProfileAPI(token: string, baseURL: string, updatedUserProfleString:string) {\n    const body = {\n        version: '1.1',\n        method: 'UserProfile.update_user_profile',\n        params: [ {profile: {user: {realname: \"Akiyo Marukawa\", username: \"amarukawa\"}, userdata: {userdata}}}]\n    };\n    const stringBody = JSON.stringify(body);\n    //TODO: Akiyo - remove this after testing\n    baseURL = 'https://ci.kbase.us'\n    const url = baseURL + '/services/user_profile/rpc';\n    const response = await fetch(url, {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n            Authorization: token,\n            'Content-Type': 'application/json'\n        },\n        body: stringBody\n    });\n    if( response.status === 500) {\n        console.error('500 response:', response);\n        return;\n    }\n}\n\n/**\n * Return list of narratives\n * @param param shared/mine/public\n * @param token kbase session cookie\n */\nexport async function fetchNarrativesAPI(param: string, token: string, baseURL: string) {\n    const bffServiceUrl = await getBFFServiceUrl(token, baseURL);\n    let url = bffServiceUrl + '/narrative_list/' + param;\n    const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n            Authorization: token\n        }\n    });\n    if (response.status === 500) {\n        console.error('Fetch Narratives 500 response:', response);\n        return;\n    }\n    try {\n        const narratives = await response.json();\n        return narratives;\n    } catch (err) {\n        console.error('fetch narratives failed', response);\n    }\n}\n\n/**\n * returns list of orgs that profile and logged in user are both associated with.\n * @param id id of the profile\n * @param token kbase session cookie\n */\nexport async function fetchOrgsOfProfileAPI(id: string, token: string, baseURL: string) {\n    const bffServiceUrl = await getBFFServiceUrl(token, baseURL);\n    const url = bffServiceUrl + '/org_list/' + id;\n    const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n            Authorization: token\n        }\n    });\n    if (response.status === 500) {\n        console.error('500 response:', response);\n        return;\n    }\n    try {\n        const orgs = await response.json();\n        return orgs;\n    } catch (err) {\n        console.error('fetch org failed', response);\n    }\n}\n\n/**\n * returns list of users that are filtered by search values\n * @param searchValue search values\n * @param token kbase session cookie\n */\nexport async function filteredUserAPI(searchValue: string, token: string, baseURL: string) {\n    const body = {\n        version: '1.1',\n        method: 'UserProfile.filter_users',\n        params: [{ filter: searchValue }]\n    };\n    const stringBody = JSON.stringify(body);\n    const url = baseURL + '/services/user_profile/rpc';\n    const response = await fetch(url, {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n            Authorization: token,\n            'Content-Type': 'application/json'\n        },\n        body: stringBody\n    });\n    if (response.status === 500) {\n        console.error('500 response:', response);\n        return;\n    }\n    try {\n        const res = await response.json();\n        // if you try to: return response.json, it will get error below\n        // Unhandled Rejection (TypeError): Failed to execute 'json' on 'Response': body stream is locked\n        // but assiging it to a vairable somehow magically works.\n        return res;\n    } catch (err) {\n        console.error('fetch search users failed', response);\n    }\n}\n","import React from 'react';\nimport { Select } from 'antd';\nimport { filteredUserAPI } from '../../util/API';\nimport { FilteredUser } from '../../redux/interfaces';\nconst { Option } = Select;\n\n\ninterface State {\n    data: Array<FilteredUser>;\n    mouseLeave: boolean;\n}\n\ninterface Props {\n    token: string;\n    baseURL: string;\n}\n\ninterface Response {\n    version: string;\n    result: Array<any>;\n}\n\n/**\n * View component with user search feature.\n * @param props\n */\nclass SearchUsers extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            data: [],\n            mouseLeave: false\n        };\n        this.onChangeHandler = this.onChangeHandler.bind(this);\n        this.onSearchHandler = this.onSearchHandler.bind(this);\n        this.onMouseLeaveHandler = this.onMouseLeaveHandler.bind(this);\n        this.onMouseEnterHandler = this.onMouseEnterHandler.bind(this);\n    }\n\n    onSearchHandler(value: string): void {\n        if (value.length > 2 && this.state.mouseLeave !== true) {\n            filteredUserAPI(value, this.props.token, this.props.baseURL).then((response: Response) => {\n                if (typeof response !== 'undefined') {\n                    this.setState({ data: response['result'][0] });\n                } else {\n                    this.setState({\n                        data: [{ username: 'error', realname: 'Something went wrong. Try again later.' }]\n                    });\n                }\n            });\n        } else {\n            return;\n        }\n    }\n    onMouseLeaveHandler(): void {\n        this.setState({ mouseLeave: true });\n    }\n    onMouseEnterHandler(): void {\n        this.setState({ mouseLeave: false });\n    }\n    onChangeHandler(value: string): void {\n        if (value !== 'error' && typeof value !== 'undefined') {\n            let url = '/#user/' + value;\n            window.open(url, '_blank');\n        }\n    }\n\n    render() {\n        let data = this.state.data;\n        return (\n            <Select\n                mode=\"single\"\n                style={{ width: 250 }}\n                allowClear\n                showSearch\n                placeholder=\"enter more than 3 characters\"\n                showArrow={false}\n                onSearch={this.onSearchHandler}\n                onChange={this.onChangeHandler}\n                onMouseLeave={this.onMouseLeaveHandler}\n                onMouseEnter={this.onMouseEnterHandler}\n                optionFilterProp=\"children\"\n                filterOption={(inputValue, option) => {\n                    return true;\n                }}\n            >\n                {data.map((item) => {\n                    return (\n                        <Option key={item['username']}>\n                            {item['realname']} ({item['username']})\n                        </Option>\n                    );\n                })}\n            </Select>\n        );\n    }\n}\n\nexport default SearchUsers;\n","import React from 'react';\nimport { connect} from 'react-redux';\n\nimport SearchUsers from './SearchUsers';\n\ninterface AppState {\n    app: {\n        config: {\n            baseUrl: string;\n        }\n    };\n    auth: AuthData;\n}\n\ninterface AuthData {\n    userAuthorization: {\n        realname: string;\n        roles: Array<string>;\n        token: string;\n        username: string;\n    }\n}\n\nconst mapStateToProps = (state:AppState) => {\n    // Since this component is just a redux wrapper \n    // and not modifying state to make component props\n    // simply return state asd props\n    return state\n}\nfunction SearchUsersRedux(mapStateToProps:AppState) {\n    return (\n        <SearchUsers token={mapStateToProps.auth.userAuthorization.token} baseURL={mapStateToProps.app.config.baseUrl}/>\n    )\n}\n\nexport default connect(mapStateToProps)(SearchUsersRedux);","/**\n *  Narrative.tsx is a view component\n *  Parent componenet - pages/Home.tsx\n *\n */\nimport React from 'react';\nimport { dateDisplay } from '../../util/dateDisplay'; // date format\nimport { Table, Popover } from 'antd';\nimport { Narrative_detail, NarrativeData } from '../../redux/interfaces'; //interface\n\ninterface TableData {\n    key: string;\n    wsID: string;\n    name: string;\n    last_saved: number;\n}\n\ninterface Props {\n    narratives: Array<NarrativeData>;\n    narrativesloaded: Boolean;\n}\n\n/**\n * Returns a component with list of narratives in a table.\n * @param props\n */\nfunction Narratives(props: Props) {\n    console.log(\"Narrative props\", props)\n    let data: Array<TableData> = [];\n    let loading = false;\n    // let loading = true;\n    // if (props.narrativesloaded) {\n    //     loading = false;\n    // }\n    // initialize data for the table to be an empty array.\n    const colums = [\n        {\n            title: 'Title',\n            dataIndex: 'name',\n            width: 350,\n            key: 'wsID',\n            render: (text: string, row: TableData) => {\n                let url = '/narrative/' + row.wsID;\n                return (\n                    <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n                        {text}\n                    </a>\n                );\n            },\n            sorter: (a: TableData, b: TableData) => {\n                let nameA = a.name.toUpperCase();\n                let nameB = b.name.toUpperCase();\n                if (nameA < nameB) {\n                    return -1;\n                }\n                if (nameA > nameB) {\n                    return 1;\n                }\n                return 0;\n            }\n        },\n        {\n            title: 'Last Saved',\n            dataIndex: 'last_saved',\n            width: 190,\n            render: (text: string, row: TableData) => {\n                let day = dateDisplay(row.last_saved);\n                return (\n                    <Popover placement=\"right\" content={day[0]}>\n                        {day[1]}\n                    </Popover>\n                );\n            },\n            sorter: (a: TableData, b: TableData) => {\n                let lastSavedA = a.last_saved;\n                let lastSavedB = b.last_saved;\n                if (lastSavedA < lastSavedB) {\n                    return 1;\n                }\n                if (lastSavedA > lastSavedB) {\n                    return -1;\n                }\n                return 0;\n            }\n        }\n    ];\n\n    for (let i = 0; i < props.narratives.length; i += 1) {\n        let narrative = props.narratives[i];\n        if (narrative.permission === 'r' || narrative.permission === 'n') {\n            if (Object.keys(narrative.users).length <= 0) {\n                data.push({\n                    key: narrative.wsID,\n                    wsID: narrative.wsID,\n                    name: narrative.name,\n                    last_saved: narrative.last_saved\n                });\n            } else {\n                data.push({\n                    key: narrative.wsID,\n                    wsID: narrative.wsID,\n                    name: narrative.name,\n                    last_saved: narrative.last_saved\n                });\n            }\n        } else {\n            const narrativeDetail: Narrative_detail = narrative['narrative_detail'];\n            let users = '';\n            for (let user in narrative.users) {\n                if (user !== narrativeDetail.creator) users = users + user + ', ';\n            }\n            data.push({\n                key: narrative.wsID,\n                wsID: narrative.wsID,\n                name: narrative.name,\n                last_saved: narrative.last_saved\n            });\n        }\n    }\n\n    return (\n        <Table<TableData>\n            style={{ width: '85%', margin: 'auto' }}\n            columns={colums}\n            dataSource={data}\n            loading={loading}\n        />\n    );\n}\n\nexport default Narratives;\n","/**\n * returns array of date in MMM DD YYY HH:MM:SS and one of below:\n * less than a min ago, # hours ago, # days ago, day: MMM DD YYYY (if it's more than a month)\n * @param {string} date date format\n * \n */\nexport function dateDisplay(date: number): Array<string> {\n    let delta = (Date.now() - +new Date(date))/1000000 ;\n    let dayString = (new Date(date)).toString();\n    // date format: MMM DD YYYY\n    let day = dayString.slice(4, 7) + ' ' + dayString.slice(8, 10) + ' ' + dayString.slice(11, 15);\n    //  date format: MMM DD YYYY HH:MM:SS\n    let dayAndTime = day + ' ' + dayString.slice(16, 24);\n    if( delta >= 2628 ) {\n        // more than a month ago\n        return [dayAndTime, day];\n    } else if( delta < 2628 && delta >= 86.4) {\n        // less than a month ago, but more than a day ago\n        let days = (delta/(86.4)).toFixed(0);\n        return [dayAndTime, days + ' days ago'];\n    }\n    else if( delta < 86.4 && delta >= 3.6) {\n        return [day, (delta/3.6).toFixed(0) + ' hours ago'];\n    } else if(delta < 3.6 && delta >= 0.06) {\n        return [dayAndTime, ((delta)*10).toFixed(0) + ' min ago'];\n    } else {\n        return [dayAndTime, 'less than a min ago']\n    }\n};","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { NarrativeData, StoreState } from '../../redux/interfaces';\nimport Narratives from './Narratives';\n\n\n\nfunction mapStateToProps (state: StoreState) { \n    console.log(\"narrativeContainer\", state)\n    let narratives = state.narrativeDataArray\n    // Since this component is just a redux wrapper \n    // and not modifying state to make component props\n    // simply return state as props\n    return state \n}\n//TODO: AKIYO narrative loading \nfunction NarrativeContainer (mapStateToProps:StoreState) {\n    console.log('load NarrativeContainer', mapStateToProps.narrativeDataArray)\n    return (\n        <Narratives \n            narratives={mapStateToProps.narrativeDataArray} \n            narrativesloaded={true}\n        />\n    )\n}\n\nexport default connect(mapStateToProps)(NarrativeContainer);","import React from 'react';\n\nimport { Tabs } from 'antd';\nimport ProfileContainer from '../components/Profile/Profile';\nimport Narratives from '../components/Narratives/Narratives';\n\nimport { NarrativeData, OrgProp, Org, ProfileData,  UserName } from '../redux/interfaces';\nimport SearchUsersContainer from '../components/SearchUsers/SearchUsersContainer';\nimport { fetchOrgsOfProfileAPI, fetchProfileAPI } from '../util/API';\nimport NarrativeContainer from '../components/Narratives';\n\nconst TabPane = Tabs.TabPane;\n/**\n * Class component that keeps states for all the variables that viewer/child components needs.\n * This can converted into Redux if needed.\n * Parent component App.tsx\n */\n\n// add Narrative_detail if needed. Currently, data in the object is not used - Akiyo.\n\ninterface HomeState {\n    tabTitle: Array<string>;\n    userName: UserName;\n    userProfile: ProfileData;\n    userProfileLoaded: Boolean;\n    editEnable: Boolean; // profile edit enable \n    narratives: Array<NarrativeData>;\n    narrativesLoaded: Boolean;\n    sharedNarratives: Array<NarrativeData>;\n    sharedNarrativesLoaded: Boolean;\n    organizations: Array<OrgProp>;\n    organizationsLoaded: Boolean;\n    gravatarHash: string;\n}\n\n\nexport interface HomeProps {\n    token: string;\n    authUsername: string;\n    username: string | null;\n    baseURL: string;\n    setTitle: (title: string) => void;\n    loadNarratives: (filter: string, profileID: string) => void;\n}\n\nclass Home extends React.Component<HomeProps, HomeState> {\n    constructor(props: HomeProps) {\n        super(props);\n        this.state = {\n            tabTitle: ['Profile', 'Narratives', 'Shared narratives', 'Search users'],\n            userName: {\n                name: '',\n                userID: ''\n            },\n            editEnable: false,\n            userProfile: {\n                organization: '',\n                department: '',\n                city: '',\n                state: '',\n                postalCode: '',\n                country: '',\n                affiliations: [],\n                researchStatement: '',\n                jobTitle: '',\n                jobTitleOther: '',\n                researchInterests: [],\n                fundingSource: '',\n                gravatarDefault: '',\n                avatarOption: ''\n            },\n            userProfileLoaded: false,\n            narratives: [],\n            narrativesLoaded: false,\n            sharedNarratives: [],\n            sharedNarrativesLoaded: false,\n            organizations: [],\n            organizationsLoaded: false,\n            gravatarHash: ''\n        };\n    }\n\n\n    componentDidMount() {\n        console.log('homeprops in compDidMount', this.props)\n        let username;\n        if (this.props.username) {\n            username = this.props.username;\n            this.props.setTitle('User Profile for ' + username);\n        } else {\n            username = this.props.authUsername;\n            this.props.setTitle('Your User Profile');\n            this.setState({ editEnable: true })\n        }\n        /**\n         * fetch user profile\n         *  @param {string} id  profile ID\n         */\n        fetchProfileAPI(username, this.props.token, this.props.baseURL).then((response) => {\n            console.log('user profile response', response)\n            if (typeof response !== 'undefined') {\n                if (this.props.username) {\n                    this.props.setTitle('User Profile for ' + response.user.realname);\n                }\n                this.setState({\n                    userName: {\n                        name: response.user.realname,\n                        userID: response.user.username\n                    },\n                    gravatarHash: response.profile.synced.gravatarHash,\n                    userProfile: response.profile.userdata,\n                    userProfileLoaded: true\n                });\n            } else {\n                // something went wrong during fetching.\n                this.setState({\n                    userName: {\n                        name: 'Something went wrong. Please check console for error messages..',\n                        userID: ''\n                    }\n                });\n            }\n        });\n\n        /**\n         * fetch orgs that user blongs to the profile\n         *  @param {string} id  profile ID\n         */\n        fetchOrgsOfProfileAPI(username, this.props.token, this.props.baseURL).then((response: Array<Org>) => {\n            let orgArr: Array<OrgProp> = [];\n            if (typeof response !== 'undefined') {\n                response.forEach((org) => {\n                    orgArr.push({ name: org.name, url: this.props.baseURL + '/#org/' + org.id });\n                });\n                this.setState({\n                    organizations: orgArr,\n                    organizationsLoaded: true\n                });\n            } else {\n                // something went wrong during fetching.\n                this.setState({\n                    organizations: [\n                        { name: 'Something went wrong. Please check console for error messages.', url: '' }\n                    ],\n                    organizationsLoaded: true\n                });\n            }\n        });\n\n        /**\n         * Returns narratives that shows in Narrative table.\n         *\n         *\n         * Below logic determines which set of narratives needs to be fetched.\n         * if the viewing profile userid is not the logged in user,\n         * then fetch all of shared and public narrative and filter with the viewing profile userid.\n         */\n        let profileID = this.props.username; // profile to be viewed \n        if (typeof this.props.username === 'undefined'|| typeof this.props.authUsername === 'undefined') {\n            // if there is no logged in user in run time config (redux app state)\n            // returns an empty narrative list\n            this.setState({\n                narratives: [\n                    {\n                        wsID: '',\n                        permission: '',\n                        name: 'Something went wrong. Please check console for error messages.',\n                        last_saved: 1,\n                        users: {},\n                        narrative_detail: { creator: '' }\n                    }\n                ],\n                narrativesLoaded: true\n            });\n            return;\n        } else {            \n            // when logged-in user is viewing own profile. \n            if (this.props.username === this.props.authUsername || this.props.username === null) {\n                console.log(\"fetch 'mine'\")\n                    this.props.loadNarratives('mine', this.props.authUsername ); // redux \n                    // fetchNarrativesAPI('mine', this.props.token, this.props.baseURL).then(\n                    //     (response: Array<NarrativeData>) => {\n                    //         if (typeof response !== 'undefined') {\n                    //             console.log('response fetchNarrativesAPI', response)\n                    //             this.setState({\n                    //                 narratives: response,\n                    //                 narrativesLoaded: true\n                    //             });\n                    //         } else {\n                    //             // fetch failed\n                    //             this.setState({\n                    //                 narratives: [\n                    //                     {\n                    //                         wsID: '',\n                    //                         permission: '',\n                    //                         name: 'Something went wrong. Please check console for error messages.',\n                    //                         last_saved: 0,\n                    //                         users: {},\n                    //                         narrative_detail: { creator: '' }\n                    //                     }\n                    //                 ],\n                    //                 narrativesLoaded: true\n                    //             });\n                    //         }\n                    //     }\n                    //     );\n                        \n                    // this.props.loadNarratives('shared'); // redux \n                    // console.log(\"fetch 'shared'\")\n                    // fetchNarrativesAPI('shared', this.props.token, this.props.baseURL).then(\n                    //     (response: Array<NarrativeData>) => {\n                    //         if (typeof response !== 'undefined') {\n                    //             this.setState({\n                    //                 sharedNarratives: response,\n                    //                 sharedNarrativesLoaded: true\n                    //             });\n                    //         } else {\n                    //             // something went wrong during fetching.\n                    //             this.setState({\n                    //                 sharedNarratives: [\n                    //                     {\n                    //                         wsID: '',\n                    //                         permission: '',\n                    //                         name: 'Something went wrong. Please check console for error messages.',\n                    //                         last_saved: 0,\n                    //                         users: {},\n                    //                         narrative_detail: { creator: '' }\n                    //                     }\n                    //                 ],\n                    //                 sharedNarrativesLoaded: true\n                    //             });\n                    //         }\n                    //     }\n                    //     );\n            } else {\n                /**\n                 * when logged in user is not viewing other user's profile\n                 * pass filter \"they\" <-- gender-neutral singular they\n                 * which tfetch both \"public\" and \"shared\" and filter response with profileID\n                 */\n                \n                console.log(\"fetch 'they'\")\n                this.props.loadNarratives('they', this.props.username); // redux \n                // let publicNarratives = fetchNarrativesAPI('public', this.props.token, this.props.baseURL).then(\n                //     (response: Array<NarrativeData>) => {\n                //         if (typeof response === 'undefined') {\n                //             // fetch failed.\n                //             this.setState({\n                //                 narratives: [\n                //                     {\n                //                         wsID: '',\n                //                         permission: '',\n                //                         name: 'Something went wrong. Please check console for error messages.',\n                //                         last_saved: 0,\n                //                         users: {},\n                //                         narrative_detail: { creator: '' }\n                //                     }\n                //                 ],\n                //                 narrativesLoaded: true\n                //             });\n                //             return;\n                //         }\n                //         return response;\n                //     }\n                // );\n                // let sharedNarratives = fetchNarrativesAPI('shared', this.props.token, this.props.baseURL).then(\n                //     (response: Array<NarrativeData>) => {\n                //         return response;\n                //     }\n                // );\n                // Promise.all([publicNarratives, sharedNarratives]).then((values) => {\n                //     let sharedNarrativeList = [];\n                //     if (typeof values[1] !== 'undefined') {\n                //         for (let i = 0; i < values[1].length; i++) {\n                //             let narrative = values[1][i];\n                //             if (narrative.narrative_detail.creator !== profileID) {\n                //                 for (let user in narrative.users) {\n                //                     if (user === profileID) {\n                //                         sharedNarrativeList.push(narrative);\n                //                     }\n                //                 }\n                //             }\n                //         }\n                //     }\n\n                    // let narrativeList = [];\n                    // if (typeof values[0] !== 'undefined') {\n                    //     let allNarratives = values[0].concat(values[1]);\n                    //     for (let i = 0; i < allNarratives.length; i += 1) {\n                    //         if (allNarratives[i]['narrative_detail']['creator'] === profileID) {\n                    //             narrativeList.push(allNarratives[i]);\n                    //         }\n                    //     }\n                    // }\n                    // this.setState({\n                    //     narratives: narrativeList,\n                    //     narrativesLoaded: true,\n                    //     sharedNarratives: sharedNarrativeList,\n                    //     sharedNarrativesLoaded: true\n                    // });\n                // });\n            }\n        }\n    }\n\n    componentDidUpdate(prevProps: any, prevState: any) {\n        console.log('homeprops in compDidUpdate', this.props)\n        // This privents from infinate component loading loop.\n        if (this.state === prevState) {\n            return;\n        }\n    }\n    // wrap search user component with a div so that display can be controlled.\n    // in order to place search component/box on the navigation tab, \n    // make it into a variable and insert it as tab title. \n    searchOnATab = <div className=\"search-on-a-tab\">Search other users <SearchUsersContainer /></div>\n    \n    render() {\n        return (\n            <div className=\"profile-tabs\">\n                <Tabs type=\"line\" defaultActiveKey=\"1\">\n                    <TabPane  tab=\"Profile\" key=\"1\">\n                        <ProfileContainer\n                            baseURL={this.props.baseURL}\n                            userName={this.state.userName}\n                            editEnable={this.state.editEnable}\n                            userProfile={this.state.userProfile}\n                            orgs={this.state.organizations}\n                            gravatarHash={this.state.gravatarHash}\n                            profileloaded={this.state.userProfileLoaded}\n                            orgsloaded={this.state.organizationsLoaded}\n                            token={this.props.token}\n                        />\n                    </TabPane>\n                    <TabPane tab=\"Narratives\" key=\"3\">\n                        <NarrativeContainer />\n                    </TabPane>\n                    {/* Insert search user component div as a title to place it on the navigation tab  */}\n                    <TabPane disabled tab={this.searchOnATab} key=\"8\"></TabPane>\n                </Tabs>\n            </div>\n        );\n    }\n}\n\nexport default Home;\n","import { ThunkDispatch } from \"redux-thunk\";\nimport { StoreState, NarrativeData } from \"../interfaces\";\nimport { AnyAction} from 'redux';\nimport { fetchNarrativesAPI } from '../../util/API';\n\n\nconst LOAD_NARRATIVES = 'LOAD_NARRATIVES';\n\n/**\n * Fetch narratives dependeing on the filter.\n * filter is one of following: \"mine\", \"shared\", \"public\", \"they\" <-- gender-neutral singular they\n * \"they\" is when logged-in user is viewing other user's profile. \n * \"they\" - fetch both \"public\" and \"shared\" profile and fileter response with profileID\n * @param filter \n */\nexport function loadNarratives (filter:string, profileID: string) {\n    console.log('filter???', filter, profileID)\n    // ThunkDispatch<RootState(Store), ExtraArg, Action>;\n    return async function (dispatch:ThunkDispatch<StoreState, void, AnyAction>, getState: () => StoreState) {\n        const rootStore = getState();\n        if(rootStore.auth.userAuthorization !== null){ \n            const token = rootStore.auth.userAuthorization.token;\n            const baseURL = rootStore.app.config.baseUrl;\n\n            //TODO: AKIYO replace ci.kbase with baseURL\n            switch(filter) {\n                case \"they\":\n                    const publicNarratives = fetchNarrativesAPI('public', token, 'https://ci.kbase.us/');\n                    const sharedNarratives = fetchNarrativesAPI('shared', token, 'https://ci.kbase.us/');\n                    let narrativeList = [];\n                    let narrativePayload:Array<NarrativeData> = [];\n                    Promise.all([publicNarratives, sharedNarratives]).then((response) => {\n                        // generate combined narrative list \n                        if ( typeof response[0] !== 'undefined' && typeof response[1] !== 'undefined') {\n                            console.log(\"i should be here\")\n                            narrativeList = response[0].concat(response[1]);\n                        } else if (typeof response[0] === 'undefined' && typeof response[1] !== 'undefined' ) {\n                            console.log(\"or maybe here\")\n                            narrativeList = response[1];\n                        } else if (typeof response[0] !== 'undefined' && typeof response[1] === 'undefined' ) {\n                            console.log(\"or maybe here?????????\")\n                            narrativeList = response[0];\n                        } else {\n                            // if publich narrative fetch came back empty, there is something major wrong happened\n                            console.error('public narratives are not being fetched correctly.');\n                            narrativeList  = [\n                                {\n                                    wsID: '',\n                                    permission: '',\n                                    name: 'Something went wrong. Please check console for error messages.',\n                                    last_saved: 0,\n                                    users: {},\n                                    narrative_detail: { creator: '' }\n                                }\n                            ]\n                        }\n                        console.log('narrative they profileID', profileID)\n                        console.log('narrative they narrativeList', narrativeList);\n                        \n                        for (let i = 0; i < narrativeList.length; i +=1) {\n                            console.log('narrative they profileID', profileID)\n                            // console.log(narrativeList[i].narrative_detail.creator)\n                            // console.log(narrativeList[i].narrative_detail)\n                            if( narrativeList[i].narrative_detail.creator ===  profileID) {\n                                narrativePayload.push(narrativeList[i]);\n                            }\n                        }\n                        \n                        console.log('loadNarratives \"they\" payload', narrativePayload)\n                        dispatch({ type: LOAD_NARRATIVES, payload: narrativePayload })     \n                                \n                    })\n                    break;\n                case 'mine':\n                case 'shared':\n                case 'public':\n                    const response = await fetchNarrativesAPI(filter, token, 'https://ci.kbase.us/');\n\n                    if(typeof response !== 'undefined') {\n                        // console.log(\"rootstore\", rootStore)\n                        console.log('loadNarratives action with async', response)\n                        dispatch({ type: LOAD_NARRATIVES, payload: response })\n                    } else {\n                        let fetchFailed =  [\n                            {\n                                wsID: '',\n                                permission: '',\n                                name: 'Something went wrong. Please check console for error messages.',\n                                last_saved: 0,\n                                users: {},\n                                narrative_detail: { creator: '' }\n                            }\n                        ]\n                        dispatch({ type: LOAD_NARRATIVES, payload: fetchFailed})\n                    }\n                    break;\n\n            }            \n                        \n        } else {\n            console.error(\"I don't think this even should happen, but if it did, I must ask 'what kind of horrible bugs did you you create?'\")\n        }\n    }\n}\n","import { connect } from 'react-redux';\nimport { Action, Dispatch } from 'redux';\n\nimport Home from './Home';\nimport { StoreState, NarrativeData } from '../redux/interfaces';\nimport { sendTitle } from '@kbase/ui-lib';\nimport { loadNarratives } from '../redux/actions/index';\n\n\ninterface OwnProps {}\n\ninterface StateProps {\n    token: string;\n    authUsername: string;\n    username: string | null;\n    baseURL: string;\n}\n\ninterface DispatchProps {\n    setTitle: (title: string) => void;\n    loadNarratives: (filter:string, profileID: string) => void;\n}\n\n// TODO this should be part of the view definition\ninterface UserProfileViewParams {\n    username?: string;\n}\n\nfunction mapStateToProps(state: StoreState, ownProps: OwnProps): StateProps {\n    const {\n        auth: { userAuthorization },\n        app: {\n            config: { baseUrl },\n            runtime: {\n                navigation: { params: rawParams }\n            }\n        }\n    } = state;\n    if (!userAuthorization) {\n        throw new Error('This plugin only operates with authentication; no KBase token in store');\n    }\n    const params = (rawParams as unknown) as UserProfileViewParams;\n    return {\n        token: userAuthorization.token,\n        authUsername: userAuthorization.username,\n        username: params.username || null,\n        baseURL: baseUrl\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, ownProps: OwnProps): DispatchProps {\n    return {\n        // action creator loadNarratives is passed as props to the home page.\n        loadNarratives: (filter: string, profileID: string) => {\n            return dispatch(loadNarratives(filter, profileID) as any);\n        },\n        setTitle: (title: string) => {\n            return dispatch(sendTitle(title) as any);\n        }\n    };\n}\n\n// function HomeRedux(mapStateToProps:AppState) {\n//     return (\n//         <Home userData={mapStateToProps.auth.userAuthorization} baseURL={mapStateToProps.app.config.baseUrl}/>\n//     )\n// }\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(Home);\n","import React from 'react';\nimport { Layout } from 'antd';\nimport { Provider } from 'react-redux';\nimport { createReduxStore } from './redux/store';\nimport { AppBase, AuthGate } from '@kbase/ui-lib';\n\nimport './App.css';\nimport HomeRedux from './pages/HomeRedux';\n\nconst { Content } = Layout;\nconst store = createReduxStore();\ninterface AppProps {}\ninterface AppState {}\n\nconst App: React.FC = () => {\n    return (\n        <Provider store={store}>\n            <AppBase>\n                <AuthGate required={true}>\n                    <div className=\"App\">\n                        <Layout style={{ minHeight: '100vh' }}>\n                            <Content style={{ backgroundColor: 'white' }}>\n                                <HomeRedux />\n                            </Content>\n                        </Layout>\n                    </div>\n                </AuthGate>\n            </AppBase>\n        </Provider>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n//TODO:AKIYO add service worker\n"],"sourceRoot":""}