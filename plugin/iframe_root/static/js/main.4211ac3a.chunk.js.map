{"version":3,"sources":["assets/nouserpic.png","redux/reducers/narrative_reducers.ts","redux/reducers/profile_reducers.ts","redux/reducers/reducer.ts","redux/reducers/org_reducers.ts","redux/reducers/index.ts","redux/store.ts","util/API.tsx","redux/actions/narrativeActions.ts","redux/actions/profileActions.ts","redux/actions/orgActions.ts","components/Orgs/Orgs.tsx","components/Orgs/OrgsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Narratives/Narratives.tsx","util/dateDisplay.tsx","components/Narratives/NarrativeContainer.tsx","components/SearchUsers/SearchUsers.tsx","components/SearchUsers/SearchUsersContainer.tsx","pages/Home.tsx","pages/HomeRedux.tsx","App.tsx","index.tsx"],"names":["module","exports","narrativeReducer","state","action","payload","type","narrativeDataArray","profileReducer","profileView","reducer","baseReducer","orgsReducer","orgListArray","rootReducer","kbaseUIStore","makeInitialStoreState","makeBaseStoreState","userName","name","userID","profileData","organization","department","city","postalCode","country","affiliations","researchStatement","jobTitle","jobTitleOther","researchInterests","fundingSource","gravatarDefault","avatarOption","gravatarHash","list","loading","getBFFServiceUrl","token","baseURL","a","url","body","id","method","version","params","module_name","stringBody","JSON","stringify","fetch","mode","headers","Authorization","response","json","responseJson","result","fetchProfileAPI","bffServiceUrl","status","console","warn","error","profile","updateProfileAPI","userdata","user","realname","username","fetchNarrativesAPI","param","narratives","fetchOrgsOfProfileAPI","orgs","searchValue","filter","res","LOAD_NARRATIVES","LOAD_PROFILE","updateProfile","dispatch","getState","rootStore","auth","userAuthorization","app","config","baseUrl","LOAD_ORGS","Orgs","props","log","orgList","className","style","margin","title","textAlign","map","org","index","key","href","target","rel","connect","mapStateToProps","Meta","TextArea","Profile","Array","isArray","padding","gutter","span","maxWidth","alt","src","nouserpic","disabled","defaultValue","interest","autosize","readOnly","started","ended","position","size","userAuthToken","editEnable","profileloaded","orgsloaded","profileID","Narratives","data","length","colums","dataIndex","width","render","text","row","wsID","sorter","b","nameA","toUpperCase","nameB","day","date","delta","Date","now","dayString","toString","slice","dayAndTime","toFixed","dateDisplay","last_saved","placement","content","lastSavedA","lastSavedB","i","narrative","permission","Object","keys","users","push","narrativeDetail","creator","columns","dataSource","Option","SearchUsers","mouseLeave","onChangeHandler","bind","onSearchHandler","onMouseLeaveHandler","onMouseEnterHandler","value","this","filteredUserAPI","then","setState","window","open","allowClear","showSearch","placeholder","showArrow","onSearch","onChange","onMouseLeave","onMouseEnter","optionFilterProp","filterOption","inputValue","option","item","React","Component","TabPane","Home","searchOnATab","SearchUsersContainer","narrativesLoaded","organizations","organizationsLoaded","setTitle","authUsername","loadProfile","loadOrgs","loadNarratives","prevProps","prevState","defaultActiveKey","tab","ProfileContainer","ownProps","rawParams","runtime","navigation","Error","publicNarratives","sharedNarratives","narrativeList","narrativePayload","Promise","all","concat","narrative_detail","sendTitle","synced","orgArr","forEach","Content","store","createStore","compose","applyMiddleware","thunk","App","required","minHeight","backgroundColor","HomeRedux","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.4211ac3a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nouserpic.9af42ba9.png\";","import { StoreState, NarrativeActionType } from \"../interfaces\";\n\n\n\nexport default function narrativeReducer(state: StoreState, action: NarrativeActionType):StoreState   {\n    const payload = action.payload;\n    switch (action.type) {\n        \n        case 'LOAD_NARRATIVES':\n            return (\n                { ...state,\n                    narrativeDataArray: payload\n                }\n            );\n            \n        break;\n        \n        default: \n                return state;\n    }\n}","import { StoreState, ProfileActionType } from \"../interfaces\";\n\n\n\nexport default function profileReducer(state:StoreState, action: ProfileActionType): StoreState {\n    const payload = action.payload;\n    switch (action.type) {\n        case 'LOAD_PROFILE':\n            return (\n                {\n                    ...state,\n                    profileView: payload\n                }\n            )\n            break;\n\n        default:\n            return state;\n    }\n\n}","import { Action, Reducer } from \"redux\";\nimport { baseReducer } from \"@kbase/ui-lib\"; \nimport { BaseStoreState } from \"@kbase/ui-lib\"; \nimport { StoreState } from \"../interfaces\";\n\nconst reducer: Reducer<StoreState | undefined, Action> = (state: StoreState | undefined, action: Action) => {\n  const baseState = baseReducer(state as BaseStoreState, action);\n  // if (baseState) {\n  //   return baseState as StoreState;\n  // }\n  return baseState as StoreState;\n};\n\nexport default reducer;","import { StoreState, OrgsActionType } from '../interfaces';\n\nexport default function orgsReducer(state: StoreState, action: OrgsActionType){\n    const payload = action.payload;\n    switch (action.type) {\n        case 'LOAD_ORGS':\n            return (\n                { ...state,\n                    orgListArray: payload\n                }\n            )\n            break;\n\n            default:\n                return state;\n    }\n}","import { Action, Reducer } from 'redux';\nimport narrativeReducer from './narrative_reducers';\nimport profileReducer from './profile_reducers';\nimport reducer from './reducer';\nimport { StoreState, NarrativeActionType, ProfileActionType, OrgsActionType } from  \"../interfaces\";\nimport orgsReducer from './org_reducers';\n\n\n\n//TODO: convert this to combine reducers\n\n\nconst rootReducer: Reducer<StoreState | undefined, Action> = (state: StoreState | undefined, action: Action) => {\n\n  // Inital combine state created by store is loaded first \n  const kbaseUIStore = reducer(state as StoreState, action);\n  // if state doesn't load for whatever the reason possibly could be \n  if (!state) {\n    // TODO: AKIYO - update this.\n    return state;\n  }\n  \n  // root reducer is creating KbaseUIStore \n  if (kbaseUIStore) {\n    return kbaseUIStore as StoreState;\n  } \n  else {\n    switch(action.type) {\n        case \"LOAD_NARRATIVES\": \n            return narrativeReducer(state, action as NarrativeActionType);\n        case \"LOAD_PROFILE\": \n            return profileReducer(state, action as ProfileActionType);\n        case \"LOAD_ORGS\":\n            return orgsReducer(state, action as OrgsActionType);\n        \n      default:\n        return state;\n    }\n  }\n}\n\n\nexport default rootReducer;\n","import { createStore, compose, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\n\nimport { makeBaseStoreState } from \"@kbase/ui-lib\";\nimport { StoreState,  NarrativeData, ProfileView, OrgProp } from './interfaces';\nimport rootReducer from \"./reducers/index\";\n\n\n// When app starts, this runs first to set the initial state.\nexport function makeInitialStoreState(): StoreState {\n    const baseStoreState = makeBaseStoreState();\n    // setting initial empty narrative state\n    const narrativeInitialState: Array<NarrativeData>  = [{\n        wsID: '',\n        permission: '',\n        name: '',\n        last_saved: 0,\n        users: {},\n        narrative_detail: { creator: '' }\n    }];\n    // \n    const profileViewInitialState: ProfileView = {\n        userName: {\n            name: '',\n            userID: ''\n        },\n        profileData: {\n            organization: '',\n            department: '',\n            city: '',\n            state: '',\n            postalCode: '',\n            country: '',\n            affiliations: [],\n            researchStatement: '', \n            jobTitle: '',\n            jobTitleOther: '',\n            researchInterests: [],\n            fundingSource: '',\n            gravatarDefault: '',\n            avatarOption: '',\n        },\n        gravatarHash: ''\n    }\n    \n\n    return {\n        ...baseStoreState,  \n        narrativeDataArray: [], \n        profileView: profileViewInitialState,\n        orgListArray: {\n            list: [],\n            loading: true\n        }\n    };\n}\nexport function createReduxStore() {\n    return createStore(rootReducer, makeInitialStoreState(), compose(applyMiddleware(thunk)));\n}","import { UserProfileService, ProfileData} from \"../redux/interfaces\";\n\nexport async function getBFFServiceUrl(token: string, baseURL: string) {\n    // TODO: for dev, the baseUrl will be whatever works for the CRA workflow, which is ''.\n    // baseURL = 'https://ci.kbase.us/services'; // for dev\n    let url = baseURL + '/services/service_wizard';\n    const body = {\n        id: 0,\n        method: 'ServiceWizard.get_service_status',\n        version: '1.1',\n        params: [\n            {\n                module_name: 'bff',\n                version: null\n            }\n        ]\n    };\n    const stringBody = JSON.stringify(body);\n    const response = await fetch(url, {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n            Authorization: token\n        },\n        body: stringBody\n    });\n    const responseJson = await response.json();\n    return responseJson.result[0]['url'];\n}\n\n/**\n * Return profile data\n * @param id profile id\n * @param token KBase session cookie\n * @param baseUrl hostname\n */\nexport async function fetchProfileAPI(id: string, token: string, baseURL: string) {\n    const bffServiceUrl = await getBFFServiceUrl(token, baseURL);\n    let url = bffServiceUrl + '/fetchUserProfile/' + id;\n    const response = await fetch(url, {\n        method: 'GET'\n    });\n    if (response.status === 404) {\n        console.warn('404 response:', response);\n    } else if (response.status === 500) {\n        console.error('500 response:', response);\n        return;\n    }\n    try {\n        const profile = await response.json();\n        return profile;\n    } catch (err) {\n        console.error('profile fetch failed', response);\n    }\n}\n\n/**\n * update profile \n * method \"UserProfile.update_user_profile\" takes top level key of profile object. \n * @param token \n * @param baseURL \n * @param userdata \n */\nexport async function updateProfileAPI(token: string, baseURL: string, userdata:ProfileData) {\n    \n// export async function updateProfileAPI(token: string, baseURL: string, updatedUserProfleString:string) {\n    const body = {\n        version: '1.1',\n        method: 'UserProfile.update_user_profile',\n        params: [ {profile: {user: {realname: \"Akiyo Marukawa\", username: \"amarukawa\"}, userdata: {userdata}}}]\n    };\n    const stringBody = JSON.stringify(body);\n    //TODO: Akiyo - remove this after testing\n    baseURL = 'https://ci.kbase.us';\n    const url = baseURL + '/services/user_profile/rpc';\n    const response = await fetch(url, {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n            Authorization: token,\n            'Content-Type': 'application/json'\n        },\n        body: stringBody\n    });\n    if( response.status === 500) {\n        console.error('500 response:', response);\n        return;\n    }\n}\n\n/**\n * Return list of narratives\n * @param param shared/mine/public\n * @param token kbase session cookie\n */\nexport async function fetchNarrativesAPI(param: string, token: string, baseURL: string) {\n    const bffServiceUrl = await getBFFServiceUrl(token, baseURL);\n    let url = bffServiceUrl + '/narrative_list/' + param;\n    const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n            Authorization: token\n        }\n    });\n    if (response.status === 500) {\n        console.error('Fetch Narratives 500 response:', response);\n        return;\n    }\n    try {\n        const narratives = await response.json();\n        return narratives;\n    } catch (err) {\n        console.error('fetch narratives failed', response);\n    }\n}\n\n/**\n * returns list of orgs that profile and logged in user are both associated with.\n * @param id id of the profile\n * @param token kbase session cookie\n */\nexport async function fetchOrgsOfProfileAPI(id: string, token: string, baseURL: string) {\n    const bffServiceUrl = await getBFFServiceUrl(token, baseURL);\n    const url = bffServiceUrl + '/org_list/' + id;\n    const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n            Authorization: token\n        }\n    });\n    if (response.status === 500) {\n        console.error('500 response:', response);\n        return;\n    }\n    try {\n        const orgs = await response.json();\n        return orgs;\n    } catch (err) {\n        console.error('fetch org failed', response);\n    }\n}\n\n/**\n * returns list of users that are filtered by search values\n * @param searchValue search values\n * @param token kbase session cookie\n */\nexport async function filteredUserAPI(searchValue: string, token: string, baseURL: string) {\n    const body = {\n        version: '1.1',\n        method: 'UserProfile.filter_users',\n        params: [{ filter: searchValue }]\n    };\n    const stringBody = JSON.stringify(body);\n    const url = baseURL + '/services/user_profile/rpc';\n    const response = await fetch(url, {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n            Authorization: token,\n            'Content-Type': 'application/json'\n        },\n        body: stringBody\n    });\n    if (response.status === 500) {\n        console.error('500 response:', response);\n        return;\n    }\n    try {\n        const res = await response.json();\n        // if you try to: return response.json, it will get error below\n        // Unhandled Rejection (TypeError): Failed to execute 'json' on 'Response': body stream is locked\n        // but assiging it to a vairable somehow magically works.\n        return res;\n    } catch (err) {\n        console.error('fetch search users failed', response);\n    }\n}\n","import { ThunkDispatch } from \"redux-thunk\";\nimport { StoreState, NarrativeData } from \"../interfaces\";\nimport { AnyAction} from 'redux';\nimport { fetchNarrativesAPI } from '../../util/API';\n\n\nconst LOAD_NARRATIVES = 'LOAD_NARRATIVES';\n\n/**\n * Fetch narratives dependeing on the filter.\n * filter is one of following: \"mine\", \"shared\", \"public\", \"they\" <-- gender-neutral singular they\n * \"they\" is when logged-in user is viewing other user's profile. \n * \"they\" - fetch both \"public\" and \"shared\" profile and fileter response with profileID\n * @param filter \n */\nexport function loadNarratives (filter:string, profileID: string) {\n    // ThunkDispatch<RootState(Store), ExtraArg, Action>;\n    return async function (dispatch:ThunkDispatch<StoreState, void, AnyAction>, getState: () => StoreState) {\n        const rootStore = getState();\n        if(rootStore.auth.userAuthorization !== null){ \n            const token = rootStore.auth.userAuthorization.token;\n            const baseURL = rootStore.app.config.baseUrl;\n\n            //TODO: AKIYO replace ci.kbase with baseURL\n            switch(filter) {\n                case \"they\":\n                    const publicNarratives = fetchNarrativesAPI('public', token, 'https://ci.kbase.us/');\n                    const sharedNarratives = fetchNarrativesAPI('shared', token, 'https://ci.kbase.us/');\n                    let narrativeList = [];\n                    let narrativePayload:Array<NarrativeData> = [];\n                    Promise.all([publicNarratives, sharedNarratives]).then((response) => {\n                        // generate combined narrative list \n                        if ( typeof response[0] !== 'undefined' && typeof response[1] !== 'undefined') {\n                            narrativeList = response[0].concat(response[1]);\n                        } else if (typeof response[0] === 'undefined' && typeof response[1] !== 'undefined' ) {\n                            // if public narrative fetch came back empty, there is something major wrong happened\n                            console.error('error occuerred during fetching narratives.');\n                            narrativeList = response[1];\n                        } else if (typeof response[0] !== 'undefined' && typeof response[1] === 'undefined' ) {\n                            narrativeList = response[0];\n                        } else {\n                            // if public narrative fetch came back empty, there is something major wrong happened\n                            console.error('error occuerred during fetching narratives.');\n                            narrativeList  = [\n                                {\n                                    wsID: '',\n                                    permission: '',\n                                    name: 'Something went wrong. Please check console for error messages.',\n                                    last_saved: 0,\n                                    users: {},\n                                    narrative_detail: { creator: '' }\n                                }\n                            ]\n                        }\n                        \n                        for (let i = 0; i < narrativeList.length; i +=1) {\n  \n                            if( narrativeList[i].narrative_detail.creator ===  profileID) {\n                                narrativePayload.push(narrativeList[i]);\n                            }\n                        }\n                        \n                        dispatch({ type: LOAD_NARRATIVES, payload: narrativePayload })     \n                                \n                    })\n                    break;\n                case 'mine':\n                case 'shared':\n                case 'public':\n                    const response = await fetchNarrativesAPI(filter, token, 'https://ci.kbase.us/');\n\n                    if(typeof response !== 'undefined') {\n                        // console.log(\"rootstore\", rootStore)\n                        dispatch({ type: LOAD_NARRATIVES, payload: response })\n                    } else {\n                        let fetchFailed =  [\n                            {\n                                wsID: '',\n                                permission: '',\n                                name: 'Something went wrong. Please check console for error messages.',\n                                last_saved: 0,\n                                users: {},\n                                narrative_detail: { creator: '' }\n                            }\n                        ]\n                        dispatch({ type: LOAD_NARRATIVES, payload: fetchFailed})\n                    }\n                    break;\n\n            }            \n                        \n        } else {\n            console.error(\"I don't think this even should happen, but if it did, I must ask 'what kind of horrible bugs did you you create?'\")\n        }\n    }\n}\n","import { ThunkDispatch } from 'redux-thunk';\nimport { StoreState, UserProfileService } from \"../interfaces\";\nimport { AnyAction } from 'redux';\nimport { fetchProfileAPI, updateProfileAPI } from '../../util/API';\nimport { sendTitle } from '@kbase/ui-lib';\n\nconst LOAD_PROFILE = 'LOAD_PROFILE';\n\n/**\n * fetch user profile\n *  @param {string} id  profile ID\n */\nexport function loadProfile(profileID:string) {\n    return async function (dispatch:ThunkDispatch<StoreState, void, AnyAction>, getState:() => StoreState ) {\n        const rootStore = getState();\n        if(rootStore.auth.userAuthorization !== null) {\n            const token = rootStore.auth.userAuthorization.token;\n            const baseURL = rootStore.app.config.baseUrl;\n            let payload:any;\n            let response:UserProfileService = await fetchProfileAPI(profileID, token, baseURL);\n            if (typeof response !== 'undefined') {\n                if (response.user.username !== rootStore.auth.userAuthorization.username) {\n                    dispatch(sendTitle('User Profile for ' + response.user.realname));\n                }\n                // shape response to profile before dispatch \n                payload = {\n                    userName: {\n                        userID: response.user.username,\n                        name: response.user.realname\n                    },\n                    profileData: {\n                        organization: response.profile.userdata.organization,\n                        department: response.profile.userdata.department,\n                        city: response.profile.userdata.city,\n                        state: response.profile.userdata.state,\n                        postalCode: response.profile.userdata.postalCode,\n                        country: response.profile.userdata.country,\n                        affiliations: response.profile.userdata.affiliations,\n                        researchStatement: response.profile.userdata.researchStatement,\n                        jobTitle: response.profile.userdata.jobTitle,\n                        jobTitleOther: response.profile.userdata.jobTitleOther,\n                        researchInterests: response.profile.userdata.researchInterests,\n                        fundingSource: response.profile.userdata.fundingSource,\n                        gravatarDefault: response.profile.userdata.gravatarDefault,\n                        avatarOption: response.profile.userdata.avatarOption\n                    },\n                    gravatarHash: response.profile.synced.gravatarHash\n                }\n            } else {\n                payload = {\n                    userName: {\n                        name: 'Something went wrong. Please check console for error messages..',\n                        userID: ''\n                    }\n                }\n            }\n            \n            dispatch({ type: LOAD_PROFILE, payload: payload});\n\n        }\n    }\n}\n\nexport function updateProfile(profile:any) {\n    return async function (dispatch:ThunkDispatch<StoreState, void, AnyAction> , getState:() => StoreState ) {\n        const rootStore = getState();\n        if(rootStore.auth.userAuthorization !== null) {\n            const token = rootStore.auth.userAuthorization.token;\n            const baseURL = rootStore.app.config.baseUrl;\n            updateProfileAPI(token, baseURL, profile);\n        }\n    }\n}","import { ThunkDispatch } from 'redux-thunk';\nimport { StoreState, OrgProp, Org } from '../interfaces';\nimport { AnyAction } from 'redux';\nimport { fetchOrgsOfProfileAPI } from '../../util/API'\n\nconst LOAD_ORGS = 'LOAD_ORGS';\n\n/**\n * \n * @param userID \n */\nexport function loadOrgs(profileID:string){\n    return async function (dispatch:ThunkDispatch<StoreState, void, AnyAction>, getState:() => StoreState ) {\n        const rootStore = getState();\n        let orgArr: Array<OrgProp> = [];\n        if(rootStore.auth.userAuthorization !== null ) {\n            let token: string = rootStore.auth.userAuthorization.token;\n            let response: Array<Org> = await fetchOrgsOfProfileAPI(profileID, token, rootStore.app.config.baseUrl);\n            if( typeof response !== 'undefined' ) {\n                response.forEach((org) => {\n                    orgArr.push({ name: org.name, url: rootStore.app.config.baseUrl + '/#org/' + org.id });\n                });\n            } else {\n                // Fetch error\n                orgArr = [\n                    {\n                        name: 'Something went wrong during fetching organizations. Check console for errors.',\n                        url: ''\n                    }\n                ]\n            }\n        } \n        dispatch({ type: LOAD_ORGS, payload: {list: orgArr, loading: false} });\n    }\n}\n\n","import React from'react';\nimport {OrgProp} from '../../redux/interfaces';\n\n\nimport { Card } from 'antd';\n\n\n\ninterface Props {\n    orgList: Array<OrgProp>;\n    loading: boolean;\n}\n\n// orgList type could setup as Array<OrgProp> or null \n// and use it to set conditional rendering \n// but it might defeat the purpose of typescript? \n\nfunction Orgs(props: Props) {\n    console.log(props)\n    let orgList = props.orgList;\n    let loading = props.loading;\n    return(\n        <Card className=\"card-with-height\" loading={loading} style={{ margin: '8px 0px' }} title=\"Organizations\">\n            <ul style={{ textAlign: 'left' }}>\n                {orgList.map((org, index) => (\n                    <li key={index}>\n                        <a href={org.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                            {org.name}\n                        </a>\n                    </li>\n                ))}\n            </ul>\n        </Card>\n    )\n    \n}\n\nexport default Orgs;","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { StoreState } from '../../redux/interfaces';\nimport Orgs from  './Orgs';\n\n\nfunction mapStateToProps(state: StoreState) {\n    // Since this component is just a redux wrapper \n    // and not modifying state to make component props\n    // simply return state as props\n    console.log(state)\n    return state\n}\n\nfunction OrgsContainer(mapStateToProps:StoreState){\n    return <Orgs orgList={mapStateToProps.orgListArray.list} loading={mapStateToProps.orgListArray.loading} />\n}\n\nexport default connect(mapStateToProps)(OrgsContainer);","import React from 'react';\nimport { UserName, ProfileData, OrgProp } from '../../redux/interfaces';\nimport { Row, Col, Card, Input, Spin } from 'antd';\nimport nouserpic from '../../assets/nouserpic.png';\nimport OrgsContainer from '../Orgs/OrgsContainer';\nconst { Meta } = Card;\nconst { TextArea } = Input;\n\n/**\n *  Profile.tsx is a view component\n *  Parent componenet - pages/Home.tsx\n *\n */\n\ninterface Props {\n    baseURL: string;\n    token: string;\n    userName: UserName;\n    editEnable: Boolean;\n    profileData: ProfileData;\n    orgs: Array<OrgProp>;\n    gravatarHash: string;\n    profileloaded: Boolean;\n    orgsloaded: Boolean;\n}\n\n\n/**\n * Returns profile component.\n * @param props\n */\nfunction Profile(props: Props) {\n    const profile = props.profileData;\n\n    // Set initial value for properties that are arrays. \n    // otherwise .map will complain during initial render. \n\n    // set affiliations\n    function setAffiliations(){\n        if(typeof profile.affiliations !== 'undefined' && Array.isArray(profile.affiliations)){\n            return profile.affiliations;\n        } else {\n            return [\n                {\n                    title: '',\n                    organization: '',\n                    started: '',\n                    ended: ''\n                }\n            ];\n        }\n    }\n    // set researchInterests to an empty array inital render.\n    let researchInterests: Array<string> = [];\n\n    // set org to an empty org list for inital render.\n    let orgs = [\n        {\n            name: '',\n            url: ''\n        }\n    ];\n    \n    // Set researchInterests\n    if (typeof profile.researchInterests !== 'undefined' && Array.isArray(profile.researchInterests)) {\n        researchInterests = profile.researchInterests;\n    }\n  \n    // function handleOnBlur(event) {\n    //     console.log(event.target)\n    // }\n\n    // Set gravatarURL\n    function gravaterSrc(){\n        if (profile['avatarOption'] === 'silhoutte' || !props.gravatarHash) {\n            // let gravatar = <img style={{ maxWidth: '100%', margin: '8px 0px' }} alt=\"avatar\" src={nouserpic} />;\n            return nouserpic\n        } else if (props.gravatarHash) {\n            return 'https://www.gravatar.com/avatar/' + props.gravatarHash + '?s=300&amp;r=pg&d=' + profile.gravatarDefault;\n            // let gravatar = <img style={{ maxWidth: '100%', margin: '8px 0px' }} alt=\"avatar\" src={gravaterSrc} />;\n        }\n        return 'https://www.gravatar.com/avatar/' + props.gravatarHash + '?s=300&amp;r=pg&d=' + profile.gravatarDefault;\n    }\n\n    // Set jobTitle\n    function setJobTitle():string {\n        if (profile.jobTitle === 'Other' && typeof profile.jobTitle !== 'undefined') {\n            return profile.jobTitleOther;\n        } else if (typeof profile.jobTitle !== 'undefined') {\n            return profile.jobTitle;\n        } else {\n            return '';\n        }\n    }\n    \n    // conditional rendering of the profile tab pane\n    if(props.userName.name !== ''){\n        return (\n            <Row style={{ padding: 16 }}>\n                <Row gutter={8}>\n                    <Col span={8}>\n                        <Card style={{ margin: '8px 0px', textAlign: 'center' }}>\n                            <img style={{ maxWidth: '100%', margin: '8px 0px' }} alt='avatar' src={ gravaterSrc() } />\n                            {/* {gravatar} */}\n                        </Card>\n                        {/* <pre>\n                            { JSON.stringify(props.profileData, null, 2) }\n                        </pre> */}\n                        <Card\n                            style={{ margin: '8px 0px', textAlign: 'left' }}\n                            title={props.userName.name}\n                        >\n                            <Meta title=\"User ID\" />\n                            <Input className=\"clear-disabled\" disabled defaultValue={props.userName.userID} />\n                            <Meta title=\"Position\" />\n                            <Input className=\"clear-disabled\" defaultValue={setJobTitle()}/>\n                            <Meta title=\"Department\" />\n                            <Input className=\"clear-disabled\" disabled defaultValue={profile.department} />\n                            <Meta title=\"Organization\" />\n                            <Input className=\"clear-disabled\" disabled defaultValue={profile.organization}/>\n                            <Meta title=\"Location\" />\n                            <Input className=\"clear-disabled\" disabled defaultValue={profile.city}/>\n                            <Input className=\"clear-disabled\" disabled defaultValue={profile.state}/>\n                            <Input className=\"clear-disabled\" disabled defaultValue={profile.country}/>\n                            <Meta title=\"Primary Funding Source\" />\n                            <Input className=\"clear-disabled\" disabled defaultValue={profile.fundingSource}/>\n                        </Card>\n                    </Col>\n                    <Col span={16}>\n                        <Row gutter={8}>\n                            <Col span={12}>\n                                <Card className=\"card-with-height\" style={{ margin: '8px 0px' }} title=\"Research Interests\">\n                                    <ul style={{ textAlign: 'left' }}>\n                                        {researchInterests.map((interest) => (\n                                            <li key={interest}>{interest}</li>\n                                        ))}\n                                    </ul>\n                                </Card>\n                            </Col>\n                            <Col span={12}>\n                                <OrgsContainer />\n                            </Col>\n                        </Row>\n                        <Row>\n                            {/* TODO:AKIYO FIX - when the box is very small it doesn't break or hide word */}\n                            <Card\n                                style={{ margin: '8px 0px' }}\n                                title=\"Research or Personal Statement\"\n                            >\n                                <TextArea autosize readOnly className='clear-disabled'  defaultValue={props.profileData.researchStatement}/>\n                            </Card>\n                            <Card style={{ margin: '8px 0px' }} title=\"Afflications\">\n                                <ul style={{ textAlign: 'left' }}>\n                                    {setAffiliations().map((position, index) => (\n                                        <li key={index}>\n                                            {position.title} @ {position.organization}, {position.started} -{' '}\n                                            {position.ended}{' '}\n                                        </li>\n                                    ))}\n                                </ul>\n                            </Card>\n                        </Row>\n                    </Col>\n                </Row>\n            </Row>\n        );\n    } \n    else {\n        return(\n            <div style={{ textAlign: 'center' }}><Spin size=\"large\" /></div>\n        )\n    }\n}\nexport default Profile;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Action, Dispatch } from 'redux';\n\nimport { OrgProp, UserName, ProfileData, StoreState } from '../../redux/interfaces';\nimport {  updateProfile } from '../../redux/actions';\nimport Profile from './Profile';\n\n\ninterface Props {\n    baseURL: string;\n    token: string;\n    userName: UserName;\n    editEnable: Boolean;\n    profileData: ProfileData;\n    orgs: Array<OrgProp>;\n    gravatarHash: string;\n    profileloaded: Boolean;\n    orgsloaded: Boolean;\n};\n\ninterface DispatchProps {\n    updateProfile: (profileID: string) => void;\n};\n\n\ninterface OwnProps {};\n\nfunction mapStateToProps(state: StoreState): Props {\n\n    // token can be null\n    let userAuthToken;\n    if( state.auth.userAuthorization !== null ) {\n        userAuthToken = state.auth.userAuthorization.token\n    }\n    return {\n        baseURL: state.app.config.baseUrl,\n        token: userAuthToken ? userAuthToken : '', \n        userName: {\n            userID: state.profileView.userName.userID,\n            name: state.profileView.userName.name\n        },\n        editEnable:false,\n        profileData: {\n            organization: state.profileView.profileData.organization,\n            department: state.profileView.profileData.department,\n            city: state.profileView.profileData.city,\n            state: state.profileView.profileData.state,\n            postalCode: state.profileView.profileData.postalCode,\n            country: state.profileView.profileData.country,\n            affiliations: state.profileView.profileData.affiliations,\n            researchStatement: state.profileView.profileData.researchStatement,\n            jobTitle: state.profileView.profileData.jobTitle,\n            jobTitleOther: state.profileView.profileData.jobTitleOther,\n            researchInterests: state.profileView.profileData.researchInterests,\n            fundingSource: state.profileView.profileData.fundingSource,\n            gravatarDefault: state.profileView.profileData.gravatarDefault,\n            avatarOption: state.profileView.profileData.avatarOption\n        },\n        orgs: [],\n        gravatarHash: state.profileView.gravatarHash,\n        profileloaded: true,\n        orgsloaded: true\n    }\n    \n};\n\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        updateProfile: (profileID: string) => {\n            return dispatch(updateProfile(profileID) as any);\n        }\n    }\n};\n\n\nexport default connect<Props, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps, \n    mapDispatchToProps\n)(Profile);\n","/**\n *  Narrative.tsx is a view component\n *\n */\nimport React from 'react';\nimport { dateDisplay } from '../../util/dateDisplay'; // date format\nimport { Table, Popover } from 'antd';\nimport { Narrative_detail, NarrativeData } from '../../redux/interfaces'; //interface\n\ninterface TableData {\n    key: string;\n    wsID: string;\n    name: string;\n    last_saved: number;\n}\n\ninterface Props {\n    narratives: Array<NarrativeData>;\n}\n\n/**\n * Returns a component with list of narratives in a table.\n * @param props\n */\nfunction Narratives(props: Props) {\n    console.log(props)\n    let data: Array<TableData> = [];\n    let loading = true;\n\n    // narratives type could setup as Array<NarrativeData> or null \n    // and use it to set conditional rendering \n    // but it might defeat the purpose of typescript? \n\n    if(props.narratives.length !== 0){\n        loading = false;\n    }\n\n    const colums = [\n        {\n            title: 'Title',\n            dataIndex: 'name',\n            width: 350,\n            key: 'wsID',\n            render: (text: string, row: TableData) => {\n                let url = '/narrative/' + row.wsID;\n                return (\n                    <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n                        {text}\n                    </a>\n                );\n            },\n            sorter: (a: TableData, b: TableData) => {\n                let nameA = a.name.toUpperCase();\n                let nameB = b.name.toUpperCase();\n                if (nameA < nameB) {\n                    return -1;\n                }\n                if (nameA > nameB) {\n                    return 1;\n                }\n                return 0;\n            }\n        },\n        {\n            title: 'Last Saved',\n            dataIndex: 'last_saved',\n            width: 190,\n            render: (text: string, row: TableData) => {\n                let day = dateDisplay(row.last_saved);\n                return (\n                    <Popover placement=\"right\" content={day[0]}>\n                        {day[1]}\n                    </Popover>\n                );\n            },\n            sorter: (a: TableData, b: TableData) => {\n                let lastSavedA = a.last_saved;\n                let lastSavedB = b.last_saved;\n                if (lastSavedA < lastSavedB) {\n                    return 1;\n                }\n                if (lastSavedA > lastSavedB) {\n                    return -1;\n                }\n                return 0;\n            }\n        }\n    ];\n\n    for (let i = 0; i < props.narratives.length; i += 1) {\n        let narrative = props.narratives[i];\n        if (narrative.permission === 'r' || narrative.permission === 'n') {\n            if (Object.keys(narrative.users).length <= 0) {\n                data.push({\n                    key: narrative.wsID,\n                    wsID: narrative.wsID,\n                    name: narrative.name,\n                    last_saved: narrative.last_saved\n                });\n            } else {\n                data.push({\n                    key: narrative.wsID,\n                    wsID: narrative.wsID,\n                    name: narrative.name,\n                    last_saved: narrative.last_saved\n                });\n            }\n        } else {\n            const narrativeDetail: Narrative_detail = narrative['narrative_detail'];\n            let users = '';\n            for (let user in narrative.users) {\n                if (user !== narrativeDetail.creator) users = users + user + ', ';\n            }\n            data.push({\n                key: narrative.wsID,\n                wsID: narrative.wsID,\n                name: narrative.name,\n                last_saved: narrative.last_saved\n            });\n        }\n    }\n\n    return (\n        <Table<TableData>\n            style={{ width: '85%', margin: 'auto' }}\n            columns={colums}\n            dataSource={data}\n            loading={loading}\n        />\n    );\n}\n\nexport default Narratives;\n","/**\n * returns array of date in MMM DD YYY HH:MM:SS and one of below:\n * less than a min ago, # hours ago, # days ago, day: MMM DD YYYY (if it's more than a month)\n * @param {string} date date format\n * \n */\nexport function dateDisplay(date: number): Array<string> {\n    let delta = (Date.now() - +new Date(date))/1000000 ;\n    let dayString = (new Date(date)).toString();\n    // date format: MMM DD YYYY\n    let day = dayString.slice(4, 7) + ' ' + dayString.slice(8, 10) + ' ' + dayString.slice(11, 15);\n    //  date format: MMM DD YYYY HH:MM:SS\n    let dayAndTime = day + ' ' + dayString.slice(16, 24);\n    if( delta >= 2628 ) {\n        // more than a month ago\n        return [dayAndTime, day];\n    } else if( delta < 2628 && delta >= 86.4) {\n        // less than a month ago, but more than a day ago\n        let days = (delta/(86.4)).toFixed(0);\n        return [dayAndTime, days + ' days ago'];\n    }\n    else if( delta < 86.4 && delta >= 3.6) {\n        return [day, (delta/3.6).toFixed(0) + ' hours ago'];\n    } else if(delta < 3.6 && delta >= 0.06) {\n        return [dayAndTime, ((delta)*10).toFixed(0) + ' min ago'];\n    } else {\n        return [dayAndTime, 'less than a min ago']\n    }\n};","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { StoreState } from '../../redux/interfaces';\nimport Narratives from './Narratives';\n\n\n\nfunction mapStateToProps (state: StoreState) { \n    // Since this component is just a redux wrapper \n    // and not modifying state to make component props\n    // simply return state as props\n    return state \n}\n\nfunction NarrativeContainer (mapStateToProps:StoreState) {\n    return (\n        <Narratives \n            narratives={mapStateToProps.narrativeDataArray} \n        />\n    )\n}\n\nexport default connect(mapStateToProps)(NarrativeContainer);","import React from 'react';\nimport { Select } from 'antd';\nimport { filteredUserAPI } from '../../util/API';\nimport { UsernameRealname } from '../../redux/interfaces';\nconst { Option } = Select;\n\n\ninterface State {\n    data: Array<UsernameRealname>;\n    mouseLeave: boolean;\n}\n\ninterface Props {\n    token: string;\n    baseURL: string;\n}\n\ninterface Response {\n    version: string;\n    result: Array<any>;\n}\n\n/**\n * View component with user search feature.\n * @param props\n */\nclass SearchUsers extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            data: [],\n            mouseLeave: false\n        };\n        this.onChangeHandler = this.onChangeHandler.bind(this);\n        this.onSearchHandler = this.onSearchHandler.bind(this);\n        this.onMouseLeaveHandler = this.onMouseLeaveHandler.bind(this);\n        this.onMouseEnterHandler = this.onMouseEnterHandler.bind(this);\n    }\n\n    onSearchHandler(value: string): void {\n        if (value.length > 2 && this.state.mouseLeave !== true) {\n            filteredUserAPI(value, this.props.token, this.props.baseURL).then((response: Response) => {\n                if (typeof response !== 'undefined') {\n                    this.setState({ data: response['result'][0] });\n                } else {\n                    this.setState({\n                        data: [{ username: 'error', realname: 'Something went wrong. Try again later.' }]\n                    });\n                }\n            });\n        } else {\n            return;\n        }\n    }\n    onMouseLeaveHandler(): void {\n        this.setState({ mouseLeave: true });\n    }\n    onMouseEnterHandler(): void {\n        this.setState({ mouseLeave: false });\n    }\n    onChangeHandler(value: string): void {\n        if (value !== 'error' && typeof value !== 'undefined') {\n            let url = '/#user/' + value;\n            window.open(url, '_blank');\n        }\n    }\n\n    render() {\n        let data = this.state.data;\n        return (\n            <Select\n                mode=\"single\"\n                style={{ width: 250 }}\n                allowClear\n                showSearch\n                placeholder=\"enter more than 3 characters\"\n                showArrow={false}\n                onSearch={this.onSearchHandler}\n                onChange={this.onChangeHandler}\n                onMouseLeave={this.onMouseLeaveHandler}\n                onMouseEnter={this.onMouseEnterHandler}\n                optionFilterProp=\"children\"\n                filterOption={(inputValue, option) => {\n                    return true;\n                }}\n            >\n                {data.map((item) => {\n                    return (\n                        <Option key={item['username']}>\n                            {item['realname']} ({item['username']})\n                        </Option>\n                    );\n                })}\n            </Select>\n        );\n    }\n}\n\nexport default SearchUsers;\n","import React from 'react';\nimport { connect} from 'react-redux';\n\nimport SearchUsers from './SearchUsers';\n\ninterface AppState {\n    app: {\n        config: {\n            baseUrl: string;\n        }\n    };\n    auth: AuthData;\n}\n\ninterface AuthData {\n    userAuthorization: {\n        realname: string;\n        roles: Array<string>;\n        token: string;\n        username: string;\n    }\n}\n\nconst mapStateToProps = (state:AppState) => {\n    // Since this component is just a redux wrapper \n    // and not modifying state to make component props\n    // simply return state asd props\n    return state\n}\nfunction SearchUsersRedux(mapStateToProps:AppState) {\n    return (\n        <SearchUsers token={mapStateToProps.auth.userAuthorization.token} baseURL={mapStateToProps.app.config.baseUrl}/>\n    )\n}\n\nexport default connect(mapStateToProps)(SearchUsersRedux);","import React from 'react';\n\nimport { Tabs } from 'antd';\n\nimport ProfileContainer from '../components/Profile/ProfileContainer';\nimport NarrativeContainer from '../components/Narratives';\nimport { OrgProp, UserName } from '../redux/interfaces';\nimport SearchUsersContainer from '../components/SearchUsers/SearchUsersContainer';\n\n\nconst TabPane = Tabs.TabPane;\n/**\n * Class component that keeps states for all the variables that viewer/child components needs.\n * This can converted into Redux if needed.\n * Parent component App.tsx\n */\n\n// add Narrative_detail if needed. Currently, data in the object is not used - Akiyo.\ninterface HomeState {\n    userName: UserName;\n    editEnable: Boolean; // profile edit enable \n    narrativesLoaded: Boolean;\n    organizations: Array<OrgProp>;\n    organizationsLoaded: Boolean;\n    gravatarHash: string;\n}\n\n\nexport interface HomeProps {\n    token: string;\n    authUsername: string;\n    username: string | null;\n    baseURL: string;\n    setTitle: (title: string) => void;\n    loadNarratives: (filter: string, profileID: string) => void;\n    loadProfile: (profileID: string) => void;\n    updateProfile: (profileID: string) => void;\n    loadOrgs: (profileID: string) => void;\n}\n\nclass Home extends React.Component<HomeProps, HomeState> {\n    constructor(props: HomeProps) {\n        super(props);\n        this.state = {\n            userName: {\n                name: '',\n                userID: ''\n            },\n            editEnable: false,\n            narrativesLoaded: false,\n            organizations: [],\n            organizationsLoaded: false,\n            gravatarHash: ''\n        };\n    }\n\n\n    componentDidMount() {\n        let username;\n        if (this.props.username) {\n            username = this.props.username;\n            this.props.setTitle('User Profile for ' + username);\n        } else {\n            username = this.props.authUsername;\n            this.props.setTitle('Your User Profile');\n            this.setState({ editEnable: true })\n        }\n\n         /**\n         * fetch profile data for the diplayed profile\n         * and load it to the profile component.\n         *  @param {string} id  profile ID\n         */\n        this.props.loadProfile(username); // reduux\n\n\n        /**\n         * fetch orgs that user blongs to the profile\n         * and load them to the orgs component.\n         *  @param {string} id  profile ID\n         */\n        this.props.loadOrgs(username); //redux\n\n        /**\n         * Returns narratives that shows in Narrative table.\n         *\n         *\n         * Below logic determines which set of narratives needs to be fetched.\n         * if the viewing profile userid is not the logged in user,\n         * then fetch all of shared and public narrative and filter with the viewing profile userid.\n         */\n        if (typeof this.props.username === 'undefined'|| typeof this.props.authUsername === 'undefined') {\n            // if there is no logged in user in run time config (redux app state)\n            // returns an empty narrative list\n            console.error('How did this even happened? Check error message from Kbase-UI.')\n            return;\n        } else {            \n            // when logged-in user is viewing own profile. \n            if (this.props.username === this.props.authUsername || this.props.username === null) {\n                    this.props.loadNarratives('mine', this.props.authUsername ); // redux \n            } else {\n                /**\n                 * when logged in user is not viewing other user's profile\n                 * pass filter \"they\" <-- gender-neutral singular they\n                 * which tfetch both \"public\" and \"shared\" and filter response with profileID\n                 */\n                this.props.loadNarratives('they', this.props.username); // redux \n            }\n        }\n    }\n\n    componentDidUpdate(prevProps: any, prevState: any) {\n        // This privents from infinate component loading loop.\n        if (this.state === prevState) {\n            return;\n        }\n    }\n    // wrap search user component with a div so that display can be controlled.\n    // in order to place search component/box on the navigation tab, \n    // make it into a variable and insert it as tab title. \n    searchOnATab = <div className=\"search-on-a-tab\">Search other users <SearchUsersContainer /></div>\n    \n    render() {\n        return (\n            <div className=\"profile-tabs\">\n                <Tabs type=\"line\" defaultActiveKey=\"1\">\n                    <TabPane  tab=\"Profile\" key=\"1\">\n                        <ProfileContainer />\n                    </TabPane>\n                    <TabPane tab=\"Narratives\" key=\"3\">\n                        <NarrativeContainer />\n                    </TabPane>\n                    {/* Insert search user component div as a title to place it on the navigation tab  */}\n                    <TabPane disabled tab={this.searchOnATab} key=\"8\"></TabPane>\n                </Tabs>\n            </div>\n        );\n    }\n}\n\nexport default Home;\n","import { connect } from 'react-redux';\nimport { Action, Dispatch } from 'redux';\n\nimport Home from './Home';\nimport { StoreState } from '../redux/interfaces';\nimport { sendTitle } from '@kbase/ui-lib';\nimport { loadNarratives, loadProfile, updateProfile, loadOrgs } from '../redux/actions/index';\n\ninterface OwnProps {}\n\ninterface StateProps {\n    token: string;\n    authUsername: string;\n    username: string | null;\n    baseURL: string;\n}\n\ninterface DispatchProps {\n    setTitle: (title: string) => void;\n    loadNarratives: (filter:string, profileID: string) => void;\n    loadProfile: (profileID: string) => void;\n    updateProfile: (profileID: string) => void;\n    loadOrgs: (profileID: string) => void;\n}\n\n// TODO this should be part of the view definition\ninterface UserProfileViewParams {\n    username?: string;\n}\n\nfunction mapStateToProps(state: StoreState, ownProps: OwnProps): StateProps {\n    const {\n        auth: { userAuthorization },\n        app: {\n            config: { baseUrl },\n            runtime: {\n                navigation: { params: rawParams }\n            }\n        }\n    } = state;\n    if (!userAuthorization) {\n        throw new Error('This plugin only operates with authentication; no KBase token in store');\n    }\n    const params = (rawParams as unknown) as UserProfileViewParams;\n    return {\n        token: userAuthorization.token,\n        authUsername: userAuthorization.username,\n        username: params.username || null,\n        baseURL: baseUrl\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, ownProps: OwnProps): DispatchProps {\n    return {\n        // action creator loadNarratives is passed as props to the home page.\n        loadNarratives: (filter: string, profileID: string) => {\n            return dispatch(loadNarratives(filter, profileID) as any);\n        },\n        setTitle: (title: string) => {\n            return dispatch(sendTitle(title) as any);\n        },\n        updateProfile: (profileID: string) => {\n            return dispatch(updateProfile(profileID) as any);\n        },\n        loadProfile: (profileID: string) => {\n            return dispatch(loadProfile(profileID) as any);\n        },\n        loadOrgs: (profileID: string) => {\n            return dispatch(loadOrgs(profileID) as any);\n        }\n        \n    };\n}\n\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(Home);\n","import React from 'react';\nimport { Layout } from 'antd';\nimport { Provider } from 'react-redux';\nimport { createReduxStore } from './redux/store';\nimport { AppBase, AuthGate } from '@kbase/ui-lib';\n\nimport './App.css';\nimport HomeRedux from './pages/HomeRedux';\n\nconst { Content } = Layout;\nconst store = createReduxStore();\n\n\nconst App: React.FC = () => {\n    return (\n        <Provider store={store}>\n            <AppBase>\n                <AuthGate required={true}>\n                    <div className=\"App\">\n                        <Layout style={{ minHeight: '100vh' }}>\n                            <Content style={{ backgroundColor: 'white' }}>\n                                <HomeRedux />\n                            </Content>\n                        </Layout>\n                    </div>\n                </AuthGate>\n            </AppBase>\n        </Provider>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n//TODO:AKIYO add service worker\n"],"sourceRoot":""}