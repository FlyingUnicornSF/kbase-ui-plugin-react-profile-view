{"version":3,"sources":["assets/nouserpic.png","redux/actions/actionTypes.ts","redux/fetchStatuses.ts","redux/reducers/narrative_reducers.ts","redux/reducers/reducer.ts","redux/reducers/index.ts","redux/reducers/profile_reducers.ts","redux/reducers/org_reducers.ts","redux/store.ts","util/API.tsx","redux/actions/actionCreators.ts","redux/actions/profileActions.ts","components/Orgs/Orgs.tsx","components/Spinner.tsx","components/ErrorMessage.tsx","components/Orgs/OrgsContainer.tsx","components/Orgs/WhichComponent.tsx","profileConfig.ts","components/Profile/ProfileClass.tsx","components/Profile/ProfileClassCountainer.tsx","components/Profile/ohwhattodo.tsx","components/Narratives/Narratives.tsx","util/dateDisplay.tsx","components/Narratives/NarrativeContainer.tsx","components/SearchUsers/SearchUsers.tsx","components/SearchUsers/SearchUsersContainer.tsx","pages/Home.tsx","pages/HomeRedux.tsx","redux/actions/narrativeActions.ts","redux/actions/orgActions.ts","App.tsx","index.tsx"],"names":["module","exports","profileActionTypes","orgsActionTypes","narrativeActionTypes","profileFetchStatuses","orgFetchStatuses","narrativeReducer","state","action","payload","type","FETCH_NARRATIVE_SUCCESS","FETCH_NARRATIVE_ERROR","narrativeState","reducer","baseReducer","rootReducer","kbaseUIStore","FETCH_NARRATIVE","FETCH_NARRATIVE_NONE","FETCH_PROFILE","FETCH_PROFILE_NONE","FETCH_PROFILE_SUCCESS","FETCH_PROFILE_ERROR","profileView","profileFetchStatus","ERROR","FETCHING","NONE","profileReducer","FETCH_ORGS","FETCH_ORGS_NONE","FETCH_ORGS_SUCCESS","FETCH_ORGS_ERROR","orgState","orgFetchStatus","orgsReducer","makeInitialStoreState","makeBaseStoreState","narrativeList","loading","getBFFServiceUrl","token","baseURL","a","url","body","id","method","version","params","module_name","stringBody","JSON","stringify","fetch","mode","headers","Authorization","response","json","responseJson","console","log","result","fetchProfileAPI","bffServiceUrl","status","warn","error","profile","updateProfileAPI","userdata","user","realname","username","fetchNarrativesAPI","param","narratives","fetchOrgsOfProfileAPI","orgs","searchValue","filter","res","fetchProfile","loadProfile","fetchErrorProfile","getProfile","profileID","dispatch","getState","rootStore","auth","userAuthorization","app","config","baseUrl","sendTitle","userName","userID","name","profileData","gravatarHash","synced","SUCCESS","Orgs","props","orgList","style","textAlign","map","org","index","key","href","target","rel","Spinner","size","ErrorMessage","connect","maxInputLength","researchInterestsList","jobTitles","Meta","TextArea","Option","ProfileClass","foo","profileDataKeySet","Set","researchInterestsModalVisible","researchInterestsValue","afflicationModalVisible","jobTitleModalVisible","jobTitleValue","tooltipVisibility","bind","gravaterSrc","setName","affiliations","researchInterests","setJobTitle","handleOnClick","showModal","closeModal","handleOnBlur","researchStatementChange","jobTitleOnChange","researchInterestSave","researchInterestOnChange","this","newDataKeySet","item","add","setState","Array","isArray","prevProps","prevState","snapshot","visibility","gravatarDefault","nouserpic","title","className","maxLength","defaultValue","position","organization","started","ended","image","PRESENTED_IMAGE_SIMPLE","jobTitle","jobTitleOther","interest","event","hasAttribute","removeAttribute","currentTarget","preventDefault","elem","i","classList","length","targetClass","has","value","trim","updateProfile","arrState","arrProps","boo","padding","gutter","span","margin","overlayStyle","maxWidth","alt","src","trigger","readOnly","placeholder","onClick","visible","okText","onOk","onCancel","closable","footer","Item","handleOnSubmit","onSubmit","width","onChange","label","onBlur","department","disabled","city","country","fundingSource","Group","options","OrgsContainer","autosize","researchStatement","React","Component","editEnable","Narratives","data","colums","dataIndex","render","text","row","wsID","sorter","b","nameA","toUpperCase","nameB","day","date","delta","Date","now","dayString","toString","slice","dayAndTime","toFixed","dateDisplay","last_saved","placement","content","lastSavedA","lastSavedB","narrative","permission","Object","keys","users","push","narrativeDetail","creator","columns","dataSource","SearchUsers","mouseLeave","onChangeHandler","onSearchHandler","onMouseLeaveHandler","onMouseEnterHandler","filteredUserAPI","then","window","open","allowClear","showSearch","showArrow","onSearch","onMouseLeave","onMouseEnter","optionFilterProp","filterOption","inputValue","option","mapStateToProps","TabPane","Home","searchOnATab","SearchUsersContainer","narrativesLoaded","organizations","organizationsLoaded","setTitle","authUsername","getOrgs","loadNarratives","defaultActiveKey","tab","NarrativeContainer","ownProps","rawParams","runtime","navigation","Error","publicNarratives","sharedNarratives","allNarratives","Promise","all","concat","narrative_detail","fetchFailed","orgArr","forEach","Content","store","createStore","compose","applyMiddleware","thunk","App","required","minHeight","backgroundColor","HomeRedux","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.1239bc09.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nouserpic.9af42ba9.png\";","export enum profileActionTypes {\n    FETCH_PROFILE = 'FETCH_PROFILE',\n    FETCH_PROFILE_NONE = 'FETCH_PROFILE_NONE',\n    FETCH_PROFILE_SUCCESS =  'FETCH_PROFILE_SUCCESS',\n    FETCH_PROFILE_ERROR = 'FETCH_PROFILE_ERROR'\n}\n\nexport enum orgsActionTypes {\n    FETCH_ORGS = 'FETCH_ORGS',\n    FETCH_ORGS_NONE = 'INITIAL_RENDER_ORGS',\n    FETCH_ORGS_SUCCESS =  'FETCH_ORGS_SUCCESS',\n    FETCH_ORGS_ERROR = 'FETCH_ORGS_ERROR'\n}\n\nexport enum narrativeActionTypes {\n    FETCH_NARRATIVE = 'FETCH_NARRATIVE',\n    FETCH_NARRATIVE_NONE = 'INITIAL_RENDER_NARRATIVE',\n    FETCH_NARRATIVE_SUCCESS =  'FETCH_NARRATIVE_SUCCESS',\n    FETCH_NARRATIVE_ERROR = 'FETCH_NARRATIVE_ERROR'\n}","// Honestly, I'm don't know where this file supposed to be. \n// It doesn't look like I have to separate them\n// but when/if the app grows, then this separation will be necessary.  \n\nexport enum profileFetchStatuses {\n    NONE = 'none',\n    FETCHING = 'fetching',\n    SUCCESS = 'success',\n    ERROR = 'error'\n}\n\nexport enum orgFetchStatuses {\n    NONE = 'none',\n    FETCHING = 'fetching',\n    SUCCESS = 'success',\n    ERROR = 'error'\n}","import { StoreState, NarrativeAction } from \"../interfaces\";\nimport { narrativeActionTypes } from '../actions/actionTypes';\n\n\nexport default function narrativeReducer(state: StoreState, action: NarrativeAction):StoreState {\n    const payload = action.payload;\n    // console.log(\"narrative\", payload)\n    switch (action.type) {\n        \n        case narrativeActionTypes.FETCH_NARRATIVE_SUCCESS:\n        case narrativeActionTypes.FETCH_NARRATIVE_ERROR:\n            return (\n                { ...state,\n                    narrativeState: payload\n                }\n            );\n            \n        break;\n        \n        default: \n                return state;\n    }\n}","import { Action, Reducer } from \"redux\";\nimport { baseReducer } from \"@kbase/ui-lib\"; \nimport { BaseStoreState } from \"@kbase/ui-lib\"; \nimport { StoreState } from \"../interfaces\";\n\nconst reducer: Reducer<StoreState | undefined, Action> = (state: StoreState | undefined, action: Action) => {\n  const baseState = baseReducer(state as BaseStoreState, action);\n  // if (baseState) {\n  //   return baseState as StoreState;\n  // }\n  return baseState as StoreState;\n};\n\nexport default reducer;","import { Action, Reducer } from 'redux';\nimport narrativeReducer from './narrative_reducers';\nimport profileReducer from './profile_reducers';\nimport reducer from './reducer';\nimport { StoreState, NarrativeAction, loadProfileAction, loadOrgAction } from  \"../interfaces\";\nimport { profileActionTypes, orgsActionTypes, narrativeActionTypes } from '../actions/actionTypes';\nimport orgsReducer from './org_reducers';\n\n\n\n//TODO: convert this to combine reducers\n\n\nconst rootReducer: Reducer<StoreState | undefined, Action> = (state: StoreState | undefined, action: Action) => {\n\n  // Inital combine state created by store is loaded first \n  const kbaseUIStore = reducer(state as StoreState, action);\n  // if state doesn't load for whatever the reason possibly could be \n  if (!state) {\n    // TODO: AKIYO - return intial state \n    return state;\n  }\n  \n  // root reducer is creating KbaseUIStore \n  if (kbaseUIStore) {\n    return kbaseUIStore as StoreState;\n  } \n  else {\n    switch(action.type) {\n        case narrativeActionTypes.FETCH_NARRATIVE: \n        case narrativeActionTypes.FETCH_NARRATIVE_NONE: \n        case narrativeActionTypes.FETCH_NARRATIVE_SUCCESS: \n        case narrativeActionTypes.FETCH_NARRATIVE_ERROR: \n            return narrativeReducer(state, action as NarrativeAction);\n        case profileActionTypes.FETCH_PROFILE: \n        case profileActionTypes.FETCH_PROFILE_NONE: \n        case profileActionTypes.FETCH_PROFILE_SUCCESS: \n        case profileActionTypes.FETCH_PROFILE_ERROR: \n            return profileReducer(state, action as loadProfileAction);\n        case orgsActionTypes.FETCH_ORGS:\n        case orgsActionTypes.FETCH_ORGS_NONE:\n        case orgsActionTypes.FETCH_ORGS_SUCCESS:\n        case orgsActionTypes.FETCH_ORGS_ERROR:\n            return orgsReducer(state, action as loadOrgAction);\n        \n      default:\n        return state;\n    }\n  }\n}\n\n\nexport default rootReducer;\n","import { StoreState, loadProfileAction } from \"../interfaces\";\nimport { profileActionTypes } from \"../actions/actionTypes\";\nimport { profileFetchStatuses } from '../fetchStatuses';\n\nexport default function profileReducer(state:StoreState, action: loadProfileAction): StoreState {\n    const payload = action.payload;\n    // console.log('in profile reducer ', action)\n    switch (action.type) {\n        case profileActionTypes.FETCH_PROFILE_SUCCESS:\n            return (\n                {\n                    ...state,\n                    profileView: payload\n                }\n            );\n            break;\n                \n        case profileActionTypes.FETCH_PROFILE_ERROR:\n            return {\n                ... state,\n                profileView: { profileFetchStatus: profileFetchStatuses.ERROR}\n            };\n\n        case profileActionTypes.FETCH_PROFILE:\n            return {\n                ... state,\n                profileView: { profileFetchStatus: profileFetchStatuses.FETCHING }\n            };\n\n        case profileActionTypes.FETCH_PROFILE_NONE:\n            return {\n                ...state,\n                profileView: { profileFetchStatus: profileFetchStatuses.NONE }\n            };\n\n        default:\n            return state;\n    }\n\n}","import { StoreState, OrgsAction, loadOrgAction } from '../interfaces';\nimport { orgsActionTypes } from \"../actions/actionTypes\";\nimport { orgFetchStatuses } from '../fetchStatuses';\n\nexport default function orgsReducer(state: StoreState, action: loadOrgAction){\n    const payload = action.payload;\n    // console.log('in orgs reducer ', payload)\n    switch (action.type) {\n\n        case orgsActionTypes.FETCH_ORGS_SUCCESS:\n            \n                return (\n                    { ...state,\n                        orgState: payload\n                    }\n                )\n                break;\n\n        case orgsActionTypes.FETCH_ORGS:\n                return (\n                    { ...state,\n                        orgState: { orgFetchStatus: orgFetchStatuses.FETCHING }\n                    }\n                )\n                break;\n\n        case orgsActionTypes.FETCH_ORGS_ERROR:\n                return (\n                    { ...state,\n                        orgState: { orgFetchStatus: orgFetchStatuses.ERROR }\n                    }\n                )\n                break;\n    \n        case orgsActionTypes.FETCH_ORGS_NONE:\n                return (\n                    { ...state,\n                        orgState: { orgFetchStatus: orgFetchStatuses.ERROR }\n                    }\n                )\n                break;\n        \n            default:\n                return state;\n    }\n}","import { createStore, compose, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\n\nimport { makeBaseStoreState } from \"@kbase/ui-lib\";\nimport { StoreState } from './interfaces';\nimport rootReducer from \"./reducers/index\";\nimport { profileFetchStatuses, orgFetchStatuses } from './fetchStatuses';\n\n// I think i need to use action creator initialRenderOrgs & initialRenderProfile instead\n\n// When app starts, this runs first to set the initial state.\nexport function makeInitialStoreState(): StoreState {\n    const baseStoreState = makeBaseStoreState();\n    \n    return {\n        ...baseStoreState,  \n        narrativeState: {\n            narrativeList: [],\n            loading: true\n        },\n        profileView: { profileFetchStatus: profileFetchStatuses.NONE },\n        orgState:  { orgFetchStatus: orgFetchStatuses.NONE }\n    };\n};\n\nexport function createReduxStore() {\n    return createStore(rootReducer, makeInitialStoreState(), compose(applyMiddleware(thunk)));\n};","import { ProfileData } from \"../redux/interfaces\";\n\nexport async function getBFFServiceUrl(token: string, baseURL: string) {\n    // TODO: for dev, the baseUrl will be whatever works for the CRA workflow, which is ''.\n    // baseURL = 'https://ci.kbase.us/services'; // for dev\n    let url = baseURL + '/services/service_wizard';\n    const body = {\n        id: 0,\n        method: 'ServiceWizard.get_service_status',\n        version: '1.1',\n        params: [\n            {\n                module_name: 'bff',\n                version: null\n            }\n        ]\n    };\n    const stringBody = JSON.stringify(body);\n    const response = await fetch(url, {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n            Authorization: token\n        },\n        body: stringBody\n    });\n    const responseJson = await response.json();\n    console.log(\"getBFFServiceUrl\", responseJson)\n    return responseJson.result[0]['url'];\n}\n\n/**\n * Return profile data\n * @param id profile id\n * @param token KBase session cookie\n * @param baseUrl hostname\n */\nexport async function fetchProfileAPI(id: string, token: string, baseURL: string) {\n    const bffServiceUrl = await getBFFServiceUrl(token, baseURL);\n    let url = bffServiceUrl + '/fetchUserProfile/' + id;\n    const response = await fetch(url, {\n        method: 'GET'\n    });\n    console.log(\"fetchProfileAPI\", response)\n    if (response.status === 404) {\n        console.warn('404 response:', response);\n    } else if (response.status === 500) {\n        console.error('500 response:', response);\n        return;\n    }\n    try {\n        const profile = await response.json();\n        return profile;\n    } catch (err) {\n        console.error('profile fetch failed', response);\n    }\n}\n\n/**\n * update profile \n * method \"UserProfile.update_user_profile\" takes top level key of profile object. \n * @param token \n * @param baseURL \n * @param userdata \n */\nexport async function updateProfileAPI(token: string, baseURL: string, userdata:ProfileData) {\n    // console.log(userdata)\n\n// export async function updateProfileAPI(token: string, baseURL: string, updatedUserProfleString:string) {\n    const body = {\n        version: '1.1',\n        method: 'UserProfile.update_user_profile',\n        params: [ { profile: { user: { realname: \"Akiyo Marukawa\", username: \"amarukawa\" }, profile: {userdata: userdata}}}]\n        // params: [ { profile: { user: { realname: \"Akiyo Marukawa\", username: \"amarukawa\" }, userdata: userdata}}]\n    };\n    const stringBody = JSON.stringify(body);\n    //TODO: Akiyo - remove this after testing\n    baseURL = 'https://ci.kbase.us';\n    const url = baseURL + '/services/user_profile/rpc';\n    const response = await fetch(url, {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n            Authorization: token,\n            'Content-Type': 'application/json'\n        },\n        body: stringBody\n    });\n    return(response.status);\n}\n\n/**\n * Return list of narratives\n * @param param shared/mine/public\n * @param token kbase session cookie\n */\nexport async function fetchNarrativesAPI(param: string, token: string, baseURL: string) {\n    const bffServiceUrl = await getBFFServiceUrl(token, baseURL);\n    let url = bffServiceUrl + '/narrative_list/' + param;\n    const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n            Authorization: token\n        }\n    });\n    if (response.status === 500) {\n        console.error('Fetch Narratives 500 response:', response);\n        return;\n    }\n    try {\n        const narratives = await response.json();\n        return narratives;\n    } catch (err) {\n        console.error('fetch narratives failed', response);\n    }\n}\n\n/**\n * returns list of orgs that profile and logged in user are both associated with.\n * @param id id of the profile\n * @param token kbase session cookie\n */\nexport async function fetchOrgsOfProfileAPI(id: string, token: string, baseURL: string) {\n    const bffServiceUrl = await getBFFServiceUrl(token, baseURL);\n    const url = bffServiceUrl + '/org_list/' + id;\n    const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n            Authorization: token\n        }\n    });\n    if (response.status === 500) {\n        console.error('500 response:', response);\n        return;\n    }\n    try {\n        const orgs = await response.json();\n        return orgs;\n    } catch (err) {\n        console.error('fetch org failed', response);\n    }\n}\n\n/**\n * returns list of users that are filtered by search values\n * @param searchValue search values\n * @param token kbase session cookie\n */\nexport async function filteredUserAPI(searchValue: string, token: string, baseURL: string) {\n    const body = {\n        version: '1.1',\n        method: 'UserProfile.filter_users',\n        params: [{ filter: searchValue }]\n    };\n    const stringBody = JSON.stringify(body);\n    const url = baseURL + '/services/user_profile/rpc';\n    const response = await fetch(url, {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n            Authorization: token,\n            'Content-Type': 'application/json'\n        },\n        body: stringBody\n    });\n    if (response.status === 500) {\n        console.error('500 response:', response);\n        return;\n    }\n    try {\n        const res = await response.json();\n        // if you try to: return response.json, it will get error below\n        // Unhandled Rejection (TypeError): Failed to execute 'json' on 'Response': body stream is locked\n        // but assiging it to a vairable somehow magically works.\n        return res;\n    } catch (err) {\n        console.error('fetch search users failed', response);\n    }\n}\n","import React from 'react';\nimport { loadOrgAction, OrgList, loadProfileAction, ProfileView, ProfileState } from '../interfaces';\nimport { profileActionTypes, orgsActionTypes } from './actionTypes';\n\n\n// fetching profile data is initiated\nexport function fetchProfile(){ // put type!\n    return {\n        type: profileActionTypes.FETCH_PROFILE\n    };\n};\n\n// fetching profile data was successful \nexport function loadProfile(payload:ProfileView):loadProfileAction {\n    return {\n        type: profileActionTypes.FETCH_PROFILE_SUCCESS,\n        payload\n    };\n};\n\n// fetch profile failed\nexport function fetchErrorProfile() {\n    return {\n        type: profileActionTypes.FETCH_PROFILE_ERROR,\n    };\n};\n\n// during mounting - render before componentDidMount\nexport function initialRenderProfile() { \n    return {\n        type: profileActionTypes.FETCH_PROFILE_NONE,\n    };\n};\n\n\n// fetching Orgs was successful \nexport function loadOrgs(payload:OrgList):loadOrgAction {\n    return {\n        type: orgsActionTypes.FETCH_ORGS_SUCCESS,\n        payload\n    };\n};\n\n// fetching orgs is initiated\nexport function fetchOrgs(){\n    return {\n        type: orgsActionTypes.FETCH_ORGS\n    };\n};\n\n// fetch orgs failed\nexport function fetchErrorOrgs() {\n    return {\n        type: orgsActionTypes.FETCH_ORGS_ERROR,\n    };\n};\n\n// during mounting - render before componentDidMount\nexport function initialRenderOrgs() { \n    return {\n        type: orgsActionTypes.FETCH_ORGS_NONE,\n    };\n};\n","import { ThunkDispatch } from 'redux-thunk';\nimport { AnyAction } from 'redux';\nimport { sendTitle } from '@kbase/ui-lib';\nimport { fetchProfileAPI, updateProfileAPI } from '../../util/API';\nimport { StoreState, UserProfileService, ProfileView,  ProfileData} from \"../interfaces\";\nimport { fetchProfile, loadProfile, fetchErrorProfile } from './actionCreators';\nimport { profileFetchStatuses } from '../fetchStatuses';\n\n/**\n * fetch user profile\n *  @param {string} id  profile ID\n */\nexport function getProfile(profileID:string) {\n    return async function (dispatch:ThunkDispatch<StoreState, void, AnyAction>, getState:() => StoreState ) {\n        // set the life cycle state to \"fetching\"\n        dispatch(fetchProfile())\n        \n        const rootStore = getState();\n        if(rootStore.auth.userAuthorization !== null) {\n            const token = rootStore.auth.userAuthorization.token;\n            const baseURL = rootStore.app.config.baseUrl;\n            let payload:ProfileView;\n            let response:UserProfileService = await fetchProfileAPI(profileID, token, baseURL);\n            console.log('getProfile', response);\n            if (typeof response !== 'undefined') {\n                if (response.user.username !== rootStore.auth.userAuthorization.username) {\n                    dispatch(sendTitle('User Profile for ' + response.user.realname));\n                }\n                // shape response to profile before dispatch \n                payload = {\n                    userName: {\n                        userID: response.user.username,\n                        name: response.user.realname\n                    },\n                    profileData: response.profile.userdata,\n                    gravatarHash: response.profile.synced.gravatarHash,\n                    profileFetchStatus: profileFetchStatuses.SUCCESS\n                }\n                dispatch(loadProfile(payload));\n            } else {\n                //  set \"profileIsFetching\" to \"error\"\n                dispatch(fetchErrorProfile());\n            }\n        }\n    }\n}\n\n\n/**\n * set the spinner with fetchProfile action,\n * then call updateProfileAPI.\n * when the repose is good, update the profile with getProfile \n * @param profileID \n * @param userdata \n */\n\n//TODO: change baseURL back to const\nexport function updateProfile(profileID:string, userdata:ProfileData) {\n    return async function (dispatch:ThunkDispatch<StoreState, void, AnyAction>, getState:() => StoreState ) {\n        dispatch(fetchProfile())\n        const rootStore = getState();\n        if(rootStore.auth.userAuthorization !== null) {\n            const token = rootStore.auth.userAuthorization.token;\n            let baseURL = rootStore.app.config.baseUrl;\n            baseURL = 'https://ci.kbase.us';\n            let response = await updateProfileAPI(token, baseURL, userdata);\n            console.log(\"update response\", response)\n            if(response === 200) {\n                dispatch(getProfile(profileID))\n            } else {\n                dispatch(fetchErrorProfile());\n            }\n        }\n\n    }\n}","import React from'react';\nimport {OrgProp} from '../../redux/interfaces';\n\n\ninterface Props {\n    orgList: Array<OrgProp>;\n}\n\n/**\n * render org component \n * loading is false when fetch organization completes and returns response. \n * @param props \n */\nfunction Orgs(props: Props) {\n    console.log(props)\n    let orgList = props.orgList;\n    return(\n            <ul style={{ textAlign: 'left' }}>\n                {orgList.map((org, index) => (\n                    <li key={index}>\n                        <a href={org.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                            {org.name}\n                        </a>\n                    </li>\n                ))}\n            </ul>\n    )\n    \n}\n\nexport default Orgs;","import React from 'react';\nimport { Spin } from 'antd';\n\n\nexport default function Spinner(props:any) {\n    return(\n        <div style={{ textAlign: 'center' }}><Spin size=\"large\" /></div>\n    )\n}","import React from 'react';\n\n\nexport default function ErrorMessage(props:any) {\n    return(\n        <div style={{ textAlign: 'center' }}><p>Something went wrong... </p></div>\n    )\n}","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { StoreState, OrgList } from '../../redux/interfaces';\nimport WhichComponent from './WhichComponent';\nimport { orgFetchStatuses } from '../../redux/fetchStatuses';\n\nfunction mapStateToProps(state: StoreState) {\n    // console.log('orgs container', state);\n    switch( state.orgState.orgFetchStatus ){\n        case orgFetchStatuses.NONE:\n        case orgFetchStatuses.FETCHING:\n            return {\n                orgFetchStatus: state.orgState.orgFetchStatus\n            };\n            break;\n\n        case orgFetchStatuses.ERROR:\n            return {\n                orgFetchStatus: state.orgState.orgFetchStatus\n            };\n            break;\n\n        case orgFetchStatuses.SUCCESS:\n            // typescript isn't good at switch case yet... \n            let orgList = state.orgState as OrgList\n            return {\n                orgList: orgList.orgList,\n                orgFetchStatus: state.orgState.orgFetchStatus\n            }\n\n        default: \n            return {\n                orgFetchStatus: state.orgState.orgFetchStatus\n            };\n        break;\n    }\n};\n\nexport default connect(mapStateToProps)(WhichComponent);","import React from 'react';\n\nimport Orgs from './Orgs';\nimport Spinner from '../Spinner';\nimport ErrorMessage from '../ErrorMessage';\n\nexport default function WhichComponent(props:any) {\n    switch(props.orgFetchStatus){\n        case 'none':\n            return <Spinner />;\n            break;\n\n        case 'fetching':\n                return <Spinner />;\n                break;\n\n        case 'success':\n            return <Orgs orgList={props.orgList} />;\n            break;\n            \n            case 'error':\n                return <ErrorMessage />;\n                break;\n                \n            default: \n            return ( <div>hello</div>);\n            break;\n\n    }\n     \n}","/**\n * some of these can be found in \n * kbase-ui-plugin-auth2-client/src/plugin/iframe_root/resources/dataSources/\n * modified some of them to make dealing with ant design a bit easier.\n */\n\nexport const maxInputLength = {\n    researchStatement: 1000,\n    department: 50,\n    position: 50,\n    name: 100\n}\n\n\nexport const researchInterestsList = [\n    { \"value\": \"Genome Annotation\", \"label\": \"Genome Annotation\" },\n    { \"value\": \"Genome Assembly\", \"label\": \"Genome Assembl\" }, \n    { \"value\": \"Microbial Communities\", \"label\": \"Microbial Communities\" }, \n    { \"value\": \"Comparative Genomics\", \"label\": \"Comparative Genomi\" }, \n    { \"value\": \"Expression\", \"label\": \"Expression\" }, \n    { \"value\": \"Metabolic Modeling\", \"label\": \"Metabolic Modeling\" },\n    { \"value\": \"Read Processing\", \"label\": \"Read Processin\" },\n    { \"value\": \"Sequence Analysis\", \"label\": \"Sequence Analysis\" },\n    { \"value\": \"Utilities\", \"label\": \"Utilities\" },\n    { \"value\": \"Other\", \"label\": \"Other\" }\n]\n\nexport const jobTitles = [\n    { \"value\": \"CEO\", \"label\": \"CEO\" },\n    { \"value\": \"CSO\", \"label\": \"CSO\" },\n    { \"value\": \"Scientific Director\", \"label\": \"Scientific Director\" },\n    { \"value\": \"Principal Investigator\", \"label\": \"Principal Investigator\" },\n    { \"value\": \"Co-investigator\", \"label\": \"Co-investigator\" },\n    { \"value\": \"Staff Scientist\", \"label\": \"Staff Scientist\" },\n    { \"value\": \"Research Associate\", \"label\": \"Research Associate\" },\n    { \"value\": \"Postdoctoral Scientist\", \"label\": \"Postdoctoral Scientist\" },\n    { \"value\": \"Graduate Student\", \"label\": \"Graduate Student\" },\n    { \"value\": \"Undergraduate Student\", \"label\": \"Undergraduate Student\" },\n    { \"value\": \"Assistant Professor\", \"label\": \"Assistant Professor\" },\n    { \"value\": \"Associate Professor\", \"label\": \"Associate Professor\" },\n    { \"value\": \"Professor\", \"label\": \"Professor\" },\n    { \"value\": \"Physician\", \"label\": \"Physician\" },\n    { \"value\": \"Other\", \"label\": \"Other\" }\n]\n\n","import React, { CSSProperties } from 'react';\nimport { Row, Col, Card, Input, Tooltip, Form, Checkbox, Modal, Select, Button, Empty } from 'antd';\nimport { FormItemProps } from 'antd/es/form';\nimport { UserName, ProfileData } from '../../redux/interfaces';\nimport nouserpic from '../../assets/nouserpic.png';\nimport OrgsContainer from '../Orgs/OrgsContainer';\nimport { maxInputLength, researchInterestsList, jobTitles } from '../../profileConfig';\n\nconst { Meta } = Card;\nconst { TextArea } = Input;\nconst { Option } = Select;\n\n\ninterface Props {\n    userName: UserName;\n    editEnable: Boolean;\n    profileData: ProfileData;\n    gravatarHash: string;\n    profileFetchStatus: string;\n    updateProfile: (profileID: string, userdata:ProfileData) => void;\n};\n\ninterface State{\n    foo: string;\n    profileDataKeySet: Set<string>\n    researchInterestsModalVisible: boolean;\n    researchInterestsValue: Array<string>; // value returned by onChange\n    afflicationModalVisible: boolean;\n    jobTitleModalVisible:boolean;\n    jobTitleValue:string; // value returned by onChange\n}\ninterface Woo {\n    woo:FormItemProps;\n}\n\n/**\n * Returns profile component.\n * @param props\n */\nclass ProfileClass extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state ={ \n            foo: 'foo',\n            profileDataKeySet: new Set(),\n            researchInterestsModalVisible: false,\n            researchInterestsValue: [],\n            afflicationModalVisible: false,\n            jobTitleModalVisible: false,\n            jobTitleValue: ''\n\n        };\n\n        this.tooltipVisibility = this.tooltipVisibility.bind(this); // tooltip is visible when auth user is using the profile\n        this.gravaterSrc = this.gravaterSrc.bind(this); // setting img src for gravater\n        this.setName = this.setName.bind(this); // creating html element including tooltip to fit in card header \n        this.affiliations = this.affiliations.bind(this); // handles no-data or underfined data and populate data\n        this.researchInterests = this.researchInterests.bind(this); // handles no-data or underfined data and populate data\n        this.setJobTitle = this.setJobTitle.bind(this); // handles no-data or underfined data and populate data\n        this.handleOnClick = this.handleOnClick.bind(this);\n        this.showModal = this.showModal.bind(this);\n        this.closeModal = this.closeModal.bind(this);\n        this.handleOnBlur = this.handleOnBlur.bind(this);\n        this.researchStatementChange = this.researchStatementChange.bind(this);\n        this.jobTitleOnChange = this.jobTitleOnChange.bind(this); // update/save value from pull down\n        this.foo = this.foo.bind(this);\n        this.researchInterestSave = this.researchInterestSave.bind(this);\n        this.researchInterestOnChange = this.researchInterestOnChange.bind(this); // update/save value from checkbox group \n\n    }\n    \n    componentDidMount(){\n        console.log('profile props', this.props)\n        let profile: ProfileData;\n        profile = this.props.profileData;\n        \n        let newDataKeySet:Set<string> = new Set();\n        for (let item in profile) {\n            newDataKeySet.add(item);\n        };\n        this.setState({ profileDataKeySet:  newDataKeySet })\n        if(typeof profile.researchInterests !== 'undefined' && \n                Array.isArray(profile.researchInterests)){\n            this.setState({ researchInterestsValue: profile.researchInterests})\n        }\n        this.tooltipVisibility();\n    }\n    // if you're going ot use prevProps, prevState\n    // you need to put all these three for typescript to be happy.\n    componentDidUpdate(prevProps:Props, prevState: State, snapshot:any){\n        console.log('componentdidUpdate', this.state)\n        console.log('componentdidUpdate', prevState)\n        this.tooltipVisibility();\n    }\n    \n    /**\n     * if profile is auth user's profile, then edit is enabled \n     * make tool tips visible\n     */\n    tooltipVisibility ():CSSProperties {\n        // if (props.profileEdit) {\n        //     return {visibility: 'visible'}\n        // } else {visibility: 'hidden' }\n        return {visibility: 'visible'};\n    }\n    \n    // Set gravatarURL\n    gravaterSrc(){\n        if (this.props.profileData['avatarOption'] === 'silhoutte' || !this.props.gravatarHash) {\n            // let gravatar = <img style={{ maxWidth: '100%', margin: '8px 0px' }} alt=\"avatar\" src={nouserpic} />;\n            return nouserpic\n        } else if (this.props.gravatarHash) {\n            return 'https://www.gravatar.com/avatar/' + this.props.gravatarHash + '?s=300&amp;r=pg&d=' + this.props.profileData.gravatarDefault;\n            // let gravatar = <img style={{ maxWidth: '100%', margin: '8px 0px' }} alt=\"avatar\" src={gravaterSrc} />;\n        }\n        return 'https://www.gravatar.com/avatar/' + this.props.gravatarHash + '?s=300&amp;r=pg&d=' + this.props.profileData.gravatarDefault;\n    };\n    \n    // Set name and tooltip \n    setName(){\n        return <Tooltip title='must be less than 100 characters'><Input className=\"clear-disabled\" maxLength={maxInputLength.name} defaultValue={this.props.userName.name}/> </Tooltip>\n    }\n    \n\n    // populate afflications and handles case that afflication list prop is empty\n    affiliations(){\n        if(typeof this.props.profileData.affiliations !== 'undefined' && Array.isArray(this.props.profileData.affiliations)){\n                return(\n                <ul style={{ textAlign: 'left' }}>\n                    {this.props.profileData.affiliations.map((position, index) => (\n                        <li key={index}>\n                            {position.title} @ {position.organization}, {position.started} -{' '}\n                            {position.ended}{' '}\n                        </li>\n                    ))}\n                </ul>\n\n            )\n        } else {\n            return (\n                <div><Empty image={Empty.PRESENTED_IMAGE_SIMPLE} /></div>\n            )\n        };\n    };\n\n\n    // populate jobTitle\n    setJobTitle():string {\n        if (this.props.profileData.jobTitle === 'Other' && typeof this.props.profileData.jobTitle !== 'undefined') {\n            return this.props.profileData.jobTitleOther;\n        } else if (typeof this.props.profileData.jobTitle !== 'undefined') {\n            return this.props.profileData.jobTitle;\n        } else {\n            return '';\n        };\n    };\n    \n    // populate research interest and handles case that prop is empty\n    researchInterests() {\n        let researchInterests: Array<string> = [];\n        if (typeof this.props.profileData.researchInterests !== 'undefined' && Array.isArray(this.props.profileData.researchInterests)) {\n            researchInterests = this.props.profileData.researchInterests;\n\n            return (\n                <ul style={{ textAlign: 'left' }}>\n                    {researchInterests.map((interest) => (\n                        <li key={interest}>{interest}</li>\n                    ))}\n                </ul>\n            )\n\n        } else {\n            return (\n                <div>No reasearch interest chosen.</div>\n            )\n        };\n    }\n    \n    handleOnClick(event:any) {\n        console.log('on click',  event.target)\n        if(event.target.hasAttribute('readonly')) {\n            event.target.removeAttribute('readonly');\n        };\n    };\n\n    /**\n     * I'll be looking forward to suggestions for better ways to do this.\n     * @param event \n     */\n    showModal(event:any) {\n        console.log('showModal',  event.currentTarget)\n        switch(event.currentTarget.id){\n            case 'researchInterests':\n                this.setState({researchInterestsModalVisible: true});\n                break;\n            case 'affiliations':\n                this.setState({afflicationModalVisible: true});\n                break;\n            case 'jobTitle':\n                this.setState({jobTitleModalVisible: true});\n                break;\n            default:\n                break;\n        }\n    };\n\n    closeModal(event:any) {\n        console.log('closeModal',  event.target, event);\n        switch(event.target.id){\n            case 'researchInterests':\n                this.setState({researchInterestsModalVisible: false});\n                break;\n            case 'affiliations':\n                this.setState({afflicationModalVisible: false});\n                break;\n            case 'jobTitle':\n                this.setState({jobTitleModalVisible: false});\n                break;\n            default:\n                break;\n        }\n    }\n\n    handleOnSubmit(event:any) {\n        event.preventDefault();\n        console.log('handleOnSubmit',  event.target, event);\n        switch(event.target.id){\n            case 'researchInterests':\n                this.setState({researchInterestsModalVisible: false});\n                if(this.state.researchInterestsValue === this.props.profileData.researchInterests){\n                    console.log('this need to be updated')\n                } else {\n                    console.log('keep the same thing')\n                }\n                break;\n            case 'affiliations':\n                this.setState({afflicationModalVisible: false});\n                break;\n            case 'jobTitle':\n                this.setState({jobTitleModalVisible: false});\n                if(this.state.jobTitleValue === this.props.profileData.jobTitle){\n                    console.log('this need to be updated')\n                } else {\n                    console.log('keep the same thing')\n                }\n                break;\n            default:\n                break;\n        }\n    }\n    \n    \n    handleOnBlur(event:any) {\n        console.log('handleOnBlur',  event.target)\n        let elem = event.target;\n        let profileData:any = this.props.profileData;\n        for( let i = 0; i < elem.classList.length; i++ ){\n            let targetClass = elem.classList[i];\n            if ( this.state.profileDataKeySet.has(targetClass) && profileData[targetClass] !== elem.value ){\n                profileData[targetClass] = elem.value.trim();\n                this.props.updateProfile(this.props.userName.userID, profileData);\n            };\n        };\n    };\n\n    /**\n     * onBlur event handler for reseachStatement\n     * if the event targat value is not the same as the prop value, \n     * then update / make sure to trim it! \n     * @param event \n     */\n    researchStatementChange(event:any) {\n        console.log('researchStatement',  event.target)\n        // need to check if it's really the right element has(class)\n        // trim value\n        // check if it's the same as before. don't re-render when you don't need to\n        let elem = event.target;\n\n        // haven't figure out how to make it work without using 'any' type.\n        let profileData:any = this.props.profileData; \n        for( let i = 0; i < elem.classList.length; i++ ){\n            let targetClass = elem.classList[i];\n            if ( this.state.profileDataKeySet.has(targetClass) && profileData[targetClass] !== elem.value ){\n                profileData[targetClass] = elem.value.trim();\n                this.props.updateProfile(this.props.userName.userID, profileData);\n            };\n        };\n    };\n    \n    jobTitleOnChange(event:any){\n        // console.log(event.target.value.length);\n        this.setState({ jobTitleValue: event })\n    }\n\n    researchInterestOnChange(event:any){\n        if(typeof event !== 'undefined'){\n            this.setState({ researchInterestsValue: event })\n        }\n    }\n\n    researchInterestSave(event:any){\n        this.setState({ researchInterestsModalVisible: false })\n        let profileData:any = this.props.profileData; \n        let arrState = this.state.researchInterestsValue;\n        let arrProps = profileData.researchInterests;\n        // it does bother me that there ae two exact same 2 lines of code....\n        if( arrState.length !== arrProps.length ) {\n            profileData['researchInterests'] = arrState;\n            this.props.updateProfile(this.props.userName.userID, profileData);\n        } else {\n            for( let i=0; i < arrState.length; i++ ) {\n                if( arrState[i] !== arrProps[i] ){\n                    profileData['researchInterests'] = arrState;\n                    this.props.updateProfile(this.props.userName.userID, profileData);\n                    break;\n                }\n            } \n        }\n    }\n\n    foo(boo:string) {\n        let moo:FormItemProps[\"validateStatus\"] = 'success';\n        return moo\n    }\n    \n\n    render() {\n        return (\n            <Row style={{ padding: 16 }}>\n                <Row gutter={8}>\n                    <Col span={8}>\n                        <Card style={{ margin: '8px 0px', textAlign: 'center' }}>\n                            <Tooltip  overlayStyle={this.tooltipVisibility()} title='click to edit Avatar Options'>\n                                <img style={{ maxWidth: '100%', margin: '8px 0px' }} alt='avatar' src={ this.gravaterSrc() } />\n                                {/* {gravatar} */}\n                            </Tooltip>\n                        </Card>\n                        {/* <pre>\n                            { JSON.stringify(props.profileData, null, 2) }\n                        </pre> */}\n                        <Card\n                            style={{ margin: '8px 0px', textAlign: 'left' }}\n                            title={this.setName} // less than 100\n                        >\n                            <Meta title=\"User ID\" />\n                            <Tooltip overlayStyle={this.tooltipVisibility()} trigger={'click'} title='User ID cannot be changed'>\n                                <Input className=\"clear-disabled userID\" readOnly placeholder='User ID' defaultValue={this.props.userName.userID} />\n                            </Tooltip>\n                            <Meta title=\"Position\" />\n                            {/* job title less than 50 */}\n                            <div id=\"jobTitle\" onClick={this.showModal} >\n                                <Input className=\"clear-disabled\" maxLength={maxInputLength.position} defaultValue={this.setJobTitle()}/> \n                            </div>\n                            <Modal\n                                visible={this.state.jobTitleModalVisible}\n                                title=\"Job Title\"\n                                okText=\"Save\"\n                                onOk={this.closeModal}\n                                onCancel={this.closeModal}\n                                closable\n                                footer={[\n                                    // make sure button id match with the id for onclick={this.showModal}\n                                    <Button key=\"back\" id=\"jobTitle\" onClick={this.closeModal}>\n                                      Return\n                                    </Button>,\n                                    <Form.Item>\n                                    <Button key=\"submit\" id=\"jobTitle\" type=\"primary\" onClick={this.handleOnSubmit}>\n                                      Submit\n                                    </Button>\n                                    </Form.Item>,\n                                ]}\n                            >\n                                <Form onSubmit={this.handleOnSubmit}>\n                                    <Form.Item>\n                                    <Select style={{ width: \"100%\" }} onChange={this.jobTitleOnChange}>\n                                        {jobTitles.map((item)=>{\n                                            return <Option value={item.value}>{item.label}</Option>\n                                        })}\n                                    </Select>\n                                    </Form.Item>\n                                </Form>\n                            </Modal>\n                            <Meta title=\"Department\" />\n                            <Tooltip overlayStyle={this.tooltipVisibility()} trigger={'click'} title='must be more than 2 and less than 50 characters'>\n                                <Input \n                                    className=\"clear-disabled department\" \n                                    readOnly maxLength={maxInputLength.department} \n                                    onClick={this.handleOnClick} onBlur={this.handleOnBlur} \n                                    defaultValue={this.props.profileData.department} \n                                />\n                            </Tooltip>\n                            <Meta title=\"Organization\" />\n                            <Input className=\"clear-disabled\" disabled defaultValue={this.props.profileData.organization}/>\n                            <Meta title=\"Location\" />\n                            <Tooltip overlayStyle={this.tooltipVisibility()}  trigger={'click'} title='must be less than 100 characters'>\n                                <Input className=\"clear-disabled\" disabled defaultValue={this.props.profileData.city}/>\n                            </Tooltip>\n                            <Input className=\"clear-disabled\" disabled defaultValue={this.props.profileData.state}/>\n                            <Input className=\"clear-disabled\" disabled defaultValue={this.props.profileData.country}/>\n                            <Meta title=\"Primary Funding Source\" />\n                            <Input className=\"clear-disabled\" disabled defaultValue={this.props.profileData.fundingSource}/>\n                        </Card>\n                    </Col>\n                    <Col span={16}>\n                        <Row gutter={8}>\n                            <Col span={12}>\n                                <Card className=\"card-with-height researchInterests\" style={{ margin: '8px 0px' }} title=\"Research Interests\">\n                                    <div id=\"researchInterests\" onClick={this.showModal} >\n                                        {/* <List\n                                            // if dataSource - list of research interest is undefined, then use an empty array.\n                                            dataSource={this.props.profileData.researchInterests && Array.isArray(this.props.profileData.researchInterests) ? this.props.profileData.researchInterests : []}\n                                            renderItem={item => <List.Item className='profile-list'>{item}</List.Item>}\n                                        /> */}\n                                        <this.researchInterests />\n                                    </div>  \n                                    <Modal\n                                        visible={this.state.researchInterestsModalVisible}\n                                        title=\"Research Interests\"\n                                        okText=\"Save\"\n                                        onOk={this.closeModal}\n                                        onCancel={this.closeModal}\n                                        footer={[\n                                            // make sure button id match with the id for onclick={this.showModal}\n                                            <Button key=\"back\"id=\"researchInterests\" onClick={this.closeModal}>\n                                              Return\n                                            </Button>,\n                                            <Button key=\"submit\" id=\"researchInterests\" type=\"primary\" onClick={this.researchInterestSave}>\n                                              Submit\n                                            </Button>,\n                                        ]}\n                                    >\n                                        <Checkbox.Group\n                                            options={researchInterestsList}\n                                            defaultValue={this.props.profileData.researchInterests}\n                                            onChange={this.researchInterestOnChange}\n                                        />\n                                    </Modal>\n                                </Card>\n                            </Col>\n                            <Col span={12}>\n                                <Card className=\"card-with-height\" style={{ margin: '8px 0px' }} title=\"Organizations\">\n                                    <OrgsContainer />\n                                </Card>\n                            </Col>\n                        </Row>\n                        <Row>\n                            {/* TODO:AKIYO FIX - when the box is very small it doesn't break or hide word */}\n                            <Card\n                                style={{ margin: '8px 0px' }}\n                                title=\"Research or Personal Statement\"\n                            > \n                            {/* less than 1000 */}\n                            <Form.Item>\n                            <Tooltip overlayStyle={this.tooltipVisibility()} trigger={'click'} title='must be less than 1000 characters'>\n                                <TextArea \n                                    autosize \n                                    maxLength={maxInputLength.researchStatement} \n                                    readOnly \n                                    className='clear-disabled researchStatement' \n                                    onClick={this.handleOnClick} \n                                    onBlur={this.researchStatementChange} \n                                    defaultValue={this.props.profileData.researchStatement} \n                                /> \n                                {/* <TextArea autosize maxLength={maxInputLength.researchStatement} readOnly className='clear-disabled researchStatement' onClick={handleOnClick} onBlur={researchStatementChange} value={props.profileData.researchStatement}/>  */}\n                            </Tooltip>\n                            </Form.Item>\n                            </Card>\n                            <Card style={{ margin: '8px 0px' }} title=\"Affiliations\">\n                                <div id='affiliations' onClick={this.showModal} onBlur={this.handleOnBlur} >\n                                    <this.affiliations />\n                                </div>\n                                <Modal\n                                    visible={this.state.afflicationModalVisible}\n                                    title=\"Research Interests\"\n                                    okText=\"Save\"\n                                    onOk={this.closeModal}\n                                    onCancel={this.closeModal}\n                                    footer={[\n                                        // make sure button id match with the id for onclick={this.showModal}\n                                        <Button key=\"back\" id=\"affiliations\" onClick={this.closeModal}>\n                                          Return\n                                        </Button>,\n                                        <Button key=\"submit\" id=\"affiliations\" type=\"primary\" onClick={this.closeModal}>\n                                          Submit\n                                        </Button>,\n                                    ]}\n                                >\n                                    sweet\n                                </Modal>\n                                    \n                            </Card>\n                        </Row>\n                    </Col>\n                </Row>\n            </Row>\n        );\n    }\n}\n\nexport default ProfileClass;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Action, Dispatch } from 'redux';\n\nimport { UserName, ProfileData, StoreState, ProfileView, ProfileFetchStatus } from '../../redux/interfaces';\nimport {  updateProfile } from '../../redux/actions';\nimport OhWhat from './ohwhattodo';\n\nimport { profileFetchStatuses } from '../../redux/fetchStatuses';\n\ninterface PropsWithProfileData {\n    userName: UserName;\n    editEnable: Boolean;\n    profileData: ProfileData;\n    gravatarHash: string;\n    profileFetchStatus: string;\n};\ninterface PropsWithoutProfileData {\n    profileFetchStatus: string;\n};\n\ntype Props = PropsWithoutProfileData | PropsWithProfileData;\n\ninterface DispatchProps {\n    updateProfile: (profileID: string, profileData: ProfileData) => void;\n};\n\n\ninterface OwnProps {};\nlet component: JSX.Element;\nfunction mapStateToProps(state: StoreState): Props {\n    // console.log('profile state container', state)\n    // token can be null\n    let userAuthToken;\n    if( state.auth.userAuthorization !== null ) {\n        userAuthToken = state.auth.userAuthorization.token\n    } else {\n        userAuthToken = '';\n    }\n    switch(state.profileView.profileFetchStatus) {\n        case profileFetchStatuses.NONE:\n        case profileFetchStatuses.FETCHING:\n            return {\n                    profileFetchStatus: state.profileView.profileFetchStatus\n                }\n                break;\n\n        case profileFetchStatuses.ERROR:\n            return {\n                    profileFetchStatus: state.profileView.profileFetchStatus\n                }\n                break;\n\n        case profileFetchStatuses.SUCCESS:\n            // typescript isn't good at switch case yet... \n            let profileData = state.profileView as ProfileView;\n            return {\n                userName: profileData.userName,\n                editEnable: false,\n                profileData: profileData.profileData,\n                gravatarHash: profileData.gravatarHash,\n                profileFetchStatus: profileData.profileFetchStatus\n            }\n            break;\n\n        default:\n            // if you don't return Props type, it will complain. \n            // but if you try to return state.profileView.profileFetchStatus\n            // its type is \"never\" \n            // hacky way to fix that. \n            return {\n                profileFetchStatus: profileFetchStatuses.NONE\n            }\n            break;    \n    }\n\n};\n\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        updateProfile: (profileID: string, profileData: ProfileData) => {\n            return dispatch(updateProfile(profileID, profileData) as any);\n        }\n    };\n};\n\nexport default connect<Props, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps, \n    mapDispatchToProps\n)(OhWhat);\n","import React from 'react';\n\nimport ProfileClass from './ProfileClass';\nimport Spinner from '../Spinner';\nimport ErrorMessage from '../ErrorMessage'\n\nexport default function OhWhat(props:any) {\n    switch(props.profileFetchStatus){\n        case 'none':\n            return <Spinner />;\n            break;\n\n        case 'fetching':\n                return <Spinner />;\n                break;\n\n        case 'success':\n            return <ProfileClass userName={props.userName} \n            editEnable= {props.editEnable}\n            profileData= {props.profileData}\n            gravatarHash= {props.gravatarHash}\n            profileFetchStatus= {props.profileFetchStatus}\n            updateProfile = {props.updateProfile} />;\n            break;\n\n        case 'error':\n            return <ErrorMessage />;\n            break;\n\n        default: \n            return ( <div>hello</div>);\n            break;\n\n    }\n     \n}","/**\n *  Narrative.tsx is a view component\n *\n */\nimport React from 'react';\nimport { dateDisplay } from '../../util/dateDisplay'; // date format\nimport { Table, Popover } from 'antd';\nimport { NarrativeData } from '../../redux/interfaces'; //interface\n\ninterface TableData {\n    key: string;\n    wsID: string;\n    name: string;\n    last_saved: number;\n}\n\ninterface Props {\n    narratives: Array<NarrativeData>;\n    loading: boolean;\n}\n\n/**\n * Returns a component with list of narratives in a table.\n * @param props\n */\nfunction Narratives(props: Props) {\n    console.log(props)\n    let data: Array<TableData> = [];\n    let loading = props.loading;\n\n    const colums = [\n        {\n            title: 'Title',\n            dataIndex: 'name',\n            width: 350,\n            key: 'wsID',\n            render: (text: string, row: TableData) => {\n                let url = '/narrative/' + row.wsID;\n                return (\n                    <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n                        {text}\n                    </a>\n                );\n            },\n            sorter: (a: TableData, b: TableData) => {\n                let nameA = a.name.toUpperCase();\n                let nameB = b.name.toUpperCase();\n                if (nameA < nameB) {\n                    return -1;\n                }\n                if (nameA > nameB) {\n                    return 1;\n                }\n                return 0;\n            }\n        },\n        {\n            title: 'Last Saved',\n            dataIndex: 'last_saved',\n            width: 190,\n            render: (text: string, row: TableData) => {\n                let day = dateDisplay(row.last_saved);\n                return (\n                    <Popover placement=\"right\" content={day[0]}>\n                        {day[1]}\n                    </Popover>\n                );\n            },\n            sorter: (a: TableData, b: TableData) => {\n                let lastSavedA = a.last_saved;\n                let lastSavedB = b.last_saved;\n                if (lastSavedA < lastSavedB) {\n                    return 1;\n                }\n                if (lastSavedA > lastSavedB) {\n                    return -1;\n                }\n                return 0;\n            }\n        }\n    ];\n\n    for (let i = 0; i < props.narratives.length; i += 1) {\n        let narrative = props.narratives[i];\n        if (narrative.permission === 'r' || narrative.permission === 'n') {\n            if (Object.keys(narrative.users).length <= 0) {\n                data.push({\n                    key: narrative.wsID,\n                    wsID: narrative.wsID,\n                    name: narrative.name,\n                    last_saved: narrative.last_saved\n                });\n            } else {\n                data.push({\n                    key: narrative.wsID,\n                    wsID: narrative.wsID,\n                    name: narrative.name,\n                    last_saved: narrative.last_saved\n                });\n            }\n        } else {\n            const narrativeDetail = narrative['narrative_detail'];\n            let users = '';\n            for (let user in narrative.users) {\n                if (user !== narrativeDetail.creator) users = users + user + ', ';\n            }\n            data.push({\n                key: narrative.wsID,\n                wsID: narrative.wsID,\n                name: narrative.name,\n                last_saved: narrative.last_saved\n            });\n        }\n    }\n\n    return (\n        <Table<TableData>\n            style={{ width: '85%', margin: 'auto' }}\n            columns={colums}\n            dataSource={data}\n            loading={loading}\n        />\n    );\n}\n\nexport default Narratives;\n","/**\n * returns array of date in MMM DD YYY HH:MM:SS and one of below:\n * less than a min ago, # hours ago, # days ago, day: MMM DD YYYY (if it's more than a month)\n * @param {string} date date format\n * \n */\nexport function dateDisplay(date: number): Array<string> {\n    let delta = (Date.now() - +new Date(date))/1000000 ;\n    let dayString = (new Date(date)).toString();\n    // date format: MMM DD YYYY\n    let day = dayString.slice(4, 7) + ' ' + dayString.slice(8, 10) + ' ' + dayString.slice(11, 15);\n    //  date format: MMM DD YYYY HH:MM:SS\n    let dayAndTime = day + ' ' + dayString.slice(16, 24);\n    if( delta >= 2628 ) {\n        // more than a month ago\n        return [dayAndTime, day];\n    } else if( delta < 2628 && delta >= 86.4) {\n        // less than a month ago, but more than a day ago\n        let days = (delta/(86.4)).toFixed(0);\n        return [dayAndTime, days + ' days ago'];\n    }\n    else if( delta < 86.4 && delta >= 3.6) {\n        return [day, (delta/3.6).toFixed(0) + ' hours ago'];\n    } else if(delta < 3.6 && delta >= 0.06) {\n        return [dayAndTime, ((delta)*10).toFixed(0) + ' min ago'];\n    } else {\n        return [dayAndTime, 'less than a min ago']\n    }\n};","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { StoreState } from '../../redux/interfaces';\nimport Narratives from './Narratives';\n\n\n\nfunction mapStateToProps (state: StoreState) { \n    console.log('narrativeState', state);\n    return {narratives: state.narrativeState.narrativeList, loading: state.narrativeState.loading};\n};\n\n\nexport default connect(mapStateToProps)(Narratives);","import React from 'react';\nimport { Select } from 'antd';\nimport { filteredUserAPI } from '../../util/API';\nimport { UsernameRealname } from '../../redux/interfaces';\nconst { Option } = Select;\n\n\ninterface State {\n    data: Array<UsernameRealname>;\n    mouseLeave: boolean;\n}\n\ninterface Props {\n    token: string;\n    baseURL: string;\n}\n\ninterface Response {\n    version: string;\n    result: Array<any>;\n}\n\n/**\n * View component with user search feature.\n * @param props\n */\nclass SearchUsers extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            data: [],\n            mouseLeave: false\n        };\n        this.onChangeHandler = this.onChangeHandler.bind(this);\n        this.onSearchHandler = this.onSearchHandler.bind(this);\n        this.onMouseLeaveHandler = this.onMouseLeaveHandler.bind(this);\n        this.onMouseEnterHandler = this.onMouseEnterHandler.bind(this);\n    }\n    /**\n     * when search value is more than 2 charactors, \n     * it makes API call and returns filtered list of users \n     * \n     * @param value \n     */\n    onSearchHandler(value: string): void {\n        if (value.length > 2 && this.state.mouseLeave !== true) {\n            filteredUserAPI(value, this.props.token, this.props.baseURL).then((response: Response) => {\n                if (typeof response !== 'undefined') {\n                    this.setState({ data: response['result'][0] });\n                } else {\n                    this.setState({\n                        data: [{ username: 'error', realname: 'Something went wrong. Try again later.' }]\n                    });\n                }\n            });\n        } else {\n            return;\n        }\n    }\n    onMouseLeaveHandler(): void {\n        this.setState({ mouseLeave: true });\n    }\n    onMouseEnterHandler(): void {\n        this.setState({ mouseLeave: false });\n    }\n    onChangeHandler(value: string): void {\n        if (value !== 'error' && typeof value !== 'undefined') {\n            let url = '/#user/' + value;\n            window.open(url, '_blank');\n        }\n    }\n\n    render() {\n        let data = this.state.data;\n        return (\n            <Select\n                mode=\"single\"\n                style={{ width: 250 }}\n                allowClear\n                showSearch\n                placeholder=\"enter more than 3 characters\"\n                showArrow={false}\n                onSearch={this.onSearchHandler}\n                onChange={this.onChangeHandler}\n                onMouseLeave={this.onMouseLeaveHandler}\n                onMouseEnter={this.onMouseEnterHandler}\n                optionFilterProp=\"children\"\n                filterOption={(inputValue, option) => {\n                    return true;\n                }}\n            >\n                {data.map((item) => {\n                    return (\n                        <Option key={item['username']}>\n                            {item['realname']} ({item['username']})\n                        </Option>\n                    );\n                })}\n            </Select>\n        );\n    }\n}\n\nexport default SearchUsers;\n","import React from 'react';\nimport { connect} from 'react-redux';\n\nimport SearchUsers from './SearchUsers';\n\ninterface AppState {\n    app: {\n        config: {\n            baseUrl: string;\n        }\n    };\n    auth: AuthData;\n}\n\ninterface AuthData {\n    userAuthorization: {\n        realname: string;\n        roles: Array<string>;\n        token: string;\n        username: string;\n    }\n}\n\nconst mapStateToProps = (state:AppState) => {\n    // Since this component is just a redux wrapper \n    // and not modifying state to make component props\n    // simply return state asd props\n    return state\n}\nfunction SearchUsersRedux(mapStateToProps:AppState) {\n    return (\n        <SearchUsers token={mapStateToProps.auth.userAuthorization.token} baseURL={mapStateToProps.app.config.baseUrl}/>\n    )\n}\n\nexport default connect(mapStateToProps)(SearchUsersRedux);","import React from 'react';\n\nimport { Tabs } from 'antd';\n\nimport ProfileContainer from '../components/Profile/ProfileContainer';\nimport ProfileClassContainer from '../components/Profile/ProfileClassCountainer';\nimport NarrativeContainer from '../components/Narratives';\nimport { OrgProp, UserName } from '../redux/interfaces';\nimport SearchUsersContainer from '../components/SearchUsers/SearchUsersContainer';\n\n\nconst TabPane = Tabs.TabPane;\n/**\n * Class component that keeps states for all the variables that viewer/child components needs.\n * This can converted into Redux if needed.\n * Parent component App.tsx\n */\n\n// add Narrative_detail if needed. Currently, data in the object is not used - Akiyo.\ninterface HomeState {\n    userName: UserName;\n    editEnable: Boolean; // profile edit enable \n    narrativesLoaded: Boolean;\n    organizations: Array<OrgProp>;\n    organizationsLoaded: Boolean;\n    gravatarHash: string;\n}\n\n\nexport interface HomeProps {\n    token: string;\n    authUsername: string;\n    username: string | null;\n    baseURL: string;\n    setTitle: (title: string) => void;\n    loadNarratives: (filter: string, profileID: string) => void;\n    getProfile: (profileID: string) => void;\n    getOrgs: (profileID: string) => void;\n}\n\nclass Home extends React.Component<HomeProps, HomeState> {\n    constructor(props: HomeProps) {\n        super(props);\n        this.state = {\n            userName: {\n                name: '',\n                userID: ''\n            },\n            editEnable: false,\n            narrativesLoaded: false,\n            organizations: [],\n            organizationsLoaded: false,\n            gravatarHash: ''\n        };\n    };\n\n\n    componentDidMount() {\n        let username;\n        if (this.props.username) {\n            username = this.props.username;\n            this.props.setTitle('User Profile for ' + username);\n        } else {\n            username = this.props.authUsername;\n            this.props.setTitle('Your User Profile');\n            this.setState({ editEnable: true });\n        }\n\n         /**\n         * fetch profile data for the diplayed profile\n         * and load it to the profile component.\n         *  @param {string} id  profile ID\n         */\n        this.props.getProfile(username); // reduux\n\n\n        /**\n         * fetch orgs that user blongs to the profile\n         * and load them to the orgs component.\n         *  @param {string} id  profile ID\n         */\n        this.props.getOrgs(username); //redux\n\n        /**\n         * Returns narratives that shows in Narrative table.\n         *\n         *\n         * Below logic determines which set of narratives needs to be fetched.\n         * if the viewing profile userid is not the logged in user,\n         * then fetch all of shared and public narrative and filter with the viewing profile userid.\n         */\n        if (typeof this.props.username === 'undefined'|| typeof this.props.authUsername === 'undefined') {\n            // if there is no logged in user in run time config (redux app state)\n            // returns an empty narrative list\n            console.error('How did this even happened? Check error message from Kbase-UI.')\n            return;\n        } else {            \n            // when logged-in user is viewing own profile. \n            if (this.props.username === this.props.authUsername || this.props.username === null) {\n                    this.props.loadNarratives('mine', this.props.authUsername ); // redux \n            } else {\n                /**\n                 * when logged in user is not viewing other user's profile\n                 * pass filter \"they\" <-- gender-neutral singular they\n                 * which tfetch both \"public\" and \"shared\" and filter response with profileID\n                 */\n                this.props.loadNarratives('they', this.props.username); // redux \n            };\n        };\n    };\n\n    componentDidUpdate(prevProps: any, prevState: any) {\n        // This privents from infinate component loading loop.\n        if (this.state === prevState) {\n            return;\n        };\n    };\n    // wrap search user component with a div so that display can be controlled.\n    // in order to place search component/box on the navigation tab, \n    // make it into a variable and insert it as tab title. \n    searchOnATab = <div className=\"search-on-a-tab\">Search other users <SearchUsersContainer /></div>\n    \n    render() {\n        return (\n            <div className=\"profile-tabs\">\n                <Tabs type=\"line\" defaultActiveKey=\"5\">\n                    {/* <TabPane  tab=\"Profile\" key=\"1\">\n                        <ProfileContainer />\n                    </TabPane> */}\n                    <TabPane tab=\"Narratives\" key=\"3\">\n                        <NarrativeContainer />\n                    </TabPane>\n                    <TabPane tab=\"Profile with class\" key=\"5\">\n                        <ProfileClassContainer />\n                    </TabPane>\n                    {/* Insert search user component div as a title to place it on the navigation tab  */}\n                    <TabPane disabled tab={this.searchOnATab} key=\"8\"></TabPane>\n                </Tabs>\n            </div>\n        );\n    };\n};\n\nexport default Home;\n","import { connect } from 'react-redux';\nimport { Action, Dispatch } from 'redux';\n\nimport Home from './Home';\nimport { StoreState } from '../redux/interfaces';\nimport { sendTitle } from '@kbase/ui-lib';\nimport { loadNarratives, getProfile,  getOrgs } from '../redux/actions';\n\ninterface OwnProps {};\n\ninterface StateProps {\n    token: string;\n    authUsername: string;\n    username: string | null;\n    baseURL: string;\n};\n\ninterface DispatchProps {\n    setTitle: (title: string) => void;\n    loadNarratives: (filter:string, profileID: string) => void;\n    getProfile: (profileID: string) => void;\n    getOrgs: (profileID: string) => void;\n};\n\n// TODO this should be part of the view definition\ninterface UserProfileViewParams {\n    username?: string;\n};\n\nfunction mapStateToProps(state: StoreState, ownProps: OwnProps): StateProps {\n    const {\n        auth: { userAuthorization },\n        app: {\n            config: { baseUrl },\n            runtime: {\n                navigation: { params: rawParams }\n            }\n        }\n    } = state;\n    if (!userAuthorization) {\n        throw new Error('This plugin only operates with authentication; no KBase token in store');\n    }\n    const params = (rawParams as unknown) as UserProfileViewParams;\n    return {\n        token: userAuthorization.token,\n        authUsername: userAuthorization.username,\n        username: params.username || null,\n        baseURL: baseUrl\n    };\n};\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, ownProps: OwnProps): DispatchProps {\n    return {\n        loadNarratives: (filter: string, profileID: string) => {\n            return dispatch(loadNarratives(filter, profileID) as any);\n        },\n        setTitle: (title: string) => {\n            return dispatch(sendTitle(title) as any);\n        },\n        getProfile: (profileID: string) => {\n            return dispatch(getProfile(profileID) as any);\n        },\n        getOrgs: (profileID: string) => {\n            return dispatch(getOrgs(profileID) as any);\n        }\n    };\n};\n\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(Home);\n","import { ThunkDispatch } from \"redux-thunk\";\nimport { StoreState, NarrativeData } from \"../interfaces\";\nimport { AnyAction} from 'redux';\nimport { fetchNarrativesAPI } from '../../util/API';\nimport { narrativeActionTypes } from '../actions/actionTypes';\n\n/**\n * Fetch narratives dependeing on the filter.\n * filter is one of following: \"mine\", \"shared\", \"public\", \"they\" <-- gender-neutral singular they\n * \"they\" is when logged-in user is viewing other user's profile. \n * \"they\" - fetch both \"public\" and \"shared\" profile and fileter response with profileID\n * @param filter \n */\nexport function loadNarratives (filter:string, profileID: string) {\n    // ThunkDispatch<RootState(Store), ExtraArg, Action>;\n    return async function (dispatch:ThunkDispatch<StoreState, void, AnyAction>, getState: () => StoreState) {\n        const rootStore = getState();\n        if(rootStore.auth.userAuthorization !== null){ \n            const token = rootStore.auth.userAuthorization.token;\n            const baseURL = rootStore.app.config.baseUrl;\n\n            //TODO: AKIYO replace ci.kbase with baseURL\n            switch(filter) {\n                case \"they\":\n                    const publicNarratives = fetchNarrativesAPI('public', token, 'https://ci.kbase.us/');\n                    const sharedNarratives = fetchNarrativesAPI('shared', token, 'https://ci.kbase.us/');\n                    let allNarratives:Array<NarrativeData> = [];\n                    let narrativeList:Array<NarrativeData> = [];\n                    Promise.all([publicNarratives, sharedNarratives]).then((response) => {\n                        // generate combined narrative list \n                        if ( typeof response[0] !== 'undefined' && typeof response[1] !== 'undefined') {\n                            allNarratives = response[0].concat(response[1]);\n                        } else if (typeof response[0] === 'undefined' && typeof response[1] !== 'undefined' ) {\n                            // if public narrative fetch came back empty, there is something major wrong happened\n                            console.error('error occuerred during fetching narratives.');\n                            allNarratives = response[1];\n                        } else if (typeof response[0] !== 'undefined' && typeof response[1] === 'undefined' ) {\n                            allNarratives = response[0];\n                        } else {\n                            // if public narrative fetch came back empty, there is something major wrong happened\n                            console.error('error occuerred during fetching narratives.');\n                            narrativeList  = [\n                                {\n                                    wsID: '',\n                                    permission: '',\n                                    name: 'Something went wrong. Please check console for error messages.',\n                                    last_saved: 0,\n                                    users: {},\n                                    narrative_detail: { creator: '' }\n                                }\n                            ]\n                        }\n                        \n                        for (let i = 0; i < allNarratives.length; i +=1) {\n  \n                            if( allNarratives[i].narrative_detail.creator ===  profileID) {\n                                narrativeList.push(allNarratives[i]);\n                            }\n                        }\n                        \n                        dispatch({ type: narrativeActionTypes.FETCH_NARRATIVE_SUCCESS, \n                                payload: { narrativeList: narrativeList, loading: false }})     \n                                \n                    })\n                    break;\n                case 'mine':\n                case 'shared':\n                case 'public':\n                    const response = await fetchNarrativesAPI(filter, token, 'https://ci.kbase.us/');\n\n                    if(typeof response !== 'undefined') {\n                        // console.log(\"rootstore\", rootStore)\n                        dispatch({ type: narrativeActionTypes.FETCH_NARRATIVE_SUCCESS,\n                            payload: { narrativeList: response, loading: false }})\n                    } else {\n                        let fetchFailed =  [\n                            {\n                                wsID: '',\n                                permission: '',\n                                name: 'Something went wrong. Please check console for error messages.',\n                                last_saved: 0,\n                                users: {},\n                                narrative_detail: { creator: '' }\n                            }\n                        ]\n\n                        dispatch({ type: narrativeActionTypes.FETCH_NARRATIVE_ERROR, \n                            payload: { narrativeList: fetchFailed, loading: false }})\n                    }\n                    break;\n\n            }            \n                        \n        } else {\n            console.error(\"I don't think this even should happen, but if it did, I must ask 'what kind of horrible bugs did you you create?'\")\n        }\n    }\n}\n","import { ThunkDispatch } from 'redux-thunk';\nimport { StoreState, OrgProp, Org } from '../interfaces';\nimport { AnyAction } from 'redux';\nimport { fetchOrgsOfProfileAPI } from '../../util/API'\nimport { loadOrgs, fetchOrgs, fetchErrorOrgs } from './actionCreators';\nimport { orgFetchStatuses } from '../fetchStatuses';\n\n\n/**\n * \n * @param userID \n */\nexport function getOrgs(profileID:string){\n    // add dispatch to let the app know fetch is started so spinner can be loaded \n    return async function (dispatch:ThunkDispatch<StoreState, void, AnyAction>, getState:() => StoreState ) {\n        dispatch(fetchOrgs());\n        const rootStore = getState();\n        let orgArr: Array<OrgProp> = [];\n        if(rootStore.auth.userAuthorization !== null ) {\n            let token: string = rootStore.auth.userAuthorization.token;\n            let response: Array<Org> = await fetchOrgsOfProfileAPI(profileID, token, rootStore.app.config.baseUrl);\n            if( typeof response !== 'undefined' ) {\n                response.forEach((org) => {\n                    orgArr.push({ name: org.name, url: rootStore.app.config.baseUrl + '/#org/' + org.id });\n                });\n                \n                dispatch(loadOrgs({ orgList: orgArr, orgFetchStatus: orgFetchStatuses.SUCCESS}));\n            } else {\n                dispatch(fetchErrorOrgs());\n            }\n        } \n    }\n}\n\n","import React from 'react';\nimport { Layout } from 'antd';\nimport { Provider } from 'react-redux';\nimport { createReduxStore } from './redux/store';\nimport { AppBase, AuthGate } from '@kbase/ui-lib';\n\nimport './App.css';\nimport HomeRedux from './pages/HomeRedux';\n\nconst { Content } = Layout;\nconst store = createReduxStore();\n\n\nconst App: React.FC = () => {\n    return (\n        <Provider store={store}>\n            <AppBase>\n                <AuthGate required={true}>\n                    <div className=\"App\">\n                        <Layout style={{ minHeight: '100vh' }}>\n                            <Content style={{ backgroundColor: 'white' }}>\n                                <HomeRedux />\n                            </Content>\n                        </Layout>\n                    </div>\n                </AuthGate>\n            </AppBase>\n        </Provider>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n//TODO:AKIYO add service worker\n"],"sourceRoot":""}