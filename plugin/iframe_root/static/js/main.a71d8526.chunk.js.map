{"version":3,"sources":["assets/nouserpic.png","redux/reducers/narrative_reducers.ts","redux/reducers/reducer.ts","redux/reducers/index.ts","redux/store.ts","components/Profile/Profile.tsx","components/Narratives/Narratives.tsx","util/dateDisplay.tsx","util/API.tsx","redux/actions/narrativeActions.ts","components/Test/TestContainer.tsx","components/Test/MockProfile.tsx","components/Test/mockProfileContainer.tsx","components/SearchUsers/SearchUsers.tsx","components/SearchUsers/SearchUsersContainer.tsx","pages/Home.tsx","pages/HomeRedux.tsx","App.tsx","index.tsx"],"names":["module","exports","__webpack_require__","p","narrativeReducer","state","action","console","log","payload","type","_objectSpread","narrativeDataArray","wsID","permission","name","last_saved","users","narrative_detail","creator","reducer","baseReducer","rootReducer","kbaseUIStore","makeInitialStoreState","baseStoreState","makeBaseStoreState","store_objectSpread","Meta","TextArea","Profile","props","gravatar","profile","userProfile","jobTitle","gravatarURL","affiliations","title","organization","started","ended","researchInterests","orgs","url","profileloading","profileloaded","orgloading","orgsloaded","Array","isArray","jobTitleOther","gravatarHash","gravatarDefault","react_default","a","createElement","style","maxWidth","margin","alt","src","nouserpic","es_row","padding","gutter","col","span","card","loading","textAlign","userName","userID","department","city","country","fundingSource","className","map","interest","key","org","index","href","target","rel","researchStatement","position","Narratives","data","narrativesloaded","colums","dataIndex","width","render","text","row","sorter","b","nameA","toUpperCase","nameB","day","date","delta","Date","now","dayString","toString","slice","dayAndTime","toFixed","dateDisplay","popover","placement","content","lastSavedA","lastSavedB","i","narratives","length","narrative","Object","keys","push","narrativeDetail","user","table","columns","dataSource","getBFFServiceUrl","_x","_x2","_getBFFServiceUrl","apply","this","arguments","_callee","token","baseURL","body","stringBody","response","responseJson","regenerator_default","wrap","_context","prev","next","id","method","version","params","module_name","JSON","stringify","fetch","mode","headers","Authorization","sent","json","abrupt","result","stop","_callee2","bffServiceUrl","_context2","status","warn","error","t0","_callee3","userdata","_context3","realname","username","Content-Type","fetchNarrativesAPI","_x9","_x10","_x11","_fetchNarrativesAPI","_callee4","param","_context4","_callee5","_context5","_callee6","searchValue","res","_context6","filter","LOAD_NARRATIVES","LOAD_MINE_NARRATIVES","loadNarratives_original","loadNarratives","_ref","asyncToGenerator","mark","dispatch","getState","rootStore","auth","userAuthorization","app","config","baseUrl","mapStateToProps","narrativeList","connect","onSubmitDispatch","onSubmitDispatchThat","es_form","onSubmit","event","preventDefault","Item","es_button","htmlType","MockProfile","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","postalCode","avatarOption","userProfileLoading","organizations","organizationsLoading","inputEnable","bind","assertThisInitialized","handleEdit","userNameDisplay","inputSave","setState","attributes","HTMLElement","Error","hasAttribute","removeAttribute","setAttribute","value","_x6","_x7","_x8","_updateProfileAPI","updateProfileAPI","input","defaultValue","onClick","layout","label","tooltip","disabled","MockProfile_TextArea","readOnly","onBlur","onPressEnter","React","Component","Test_MockProfile","editEnable","Option","SearchUsers","mouseLeave","onChangeHandler","onSearchHandler","onMouseLeaveHandler","onMouseEnterHandler","_this2","_x15","_x16","_x17","_filteredUserAPI","filteredUserAPI","then","window","open","es_select","allowClear","showSearch","placeholder","showArrow","onSearch","onChange","onMouseLeave","onMouseEnter","optionFilterProp","filterOption","inputValue","option","item","components_SearchUsers_SearchUsers","TabPane","tabs","Home","searchOnATab","SearchUsersContainer","tabTitle","userProfileLoaded","narrativesLoaded","sharedNarratives","sharedNarrativesLoaded","organizationsLoaded","setTitle","authUsername","_x3","_x4","_x5","_fetchProfileAPI","fetchProfileAPI","synced","_x12","_x13","_x14","_fetchOrgsOfProfileAPI","fetchOrgsOfProfileAPI","orgArr","forEach","profileID","publicNarratives","Promise","all","values","sharedNarrativeList","allNarratives","concat","prevProps","prevState","defaultActiveKey","tab","Profile_Profile","Narratives_Narratives","mockProfileContainer","ownProps","_state$app","rawParams","runtime","navigation","sendTitle","Content","store","createStore","compose","applyMiddleware","thunk","App","es","lib","required","minHeight","backgroundColor","HomeRedux","ReactDOM","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.a71d8526.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nouserpic.9af42ba9.png\";","import { Action } from \"redux\";\nimport { StoreState } from \"../interfaces\";\nimport { NarrativeData } from \"../interfaces\";\n\ninterface narrativeFetchActionType {\n    type: string;\n    payload: Array<NarrativeData>\n}\n\nexport default function narrativeReducer(state: StoreState, action: narrativeFetchActionType):StoreState   {\n    console.log('im in narrative reducer', action.payload)\n    const payload = action.payload;\n    console.log('im in narrative reducer', payload)\n    switch (action.type) {\n        case 'LOAD_NARRATIVES':\n            return (\n                { ...state,\n                    narrativeDataArray: [\n                        // list of narratives {key: string;\n                    // wsID: string;\n                    // name: string;\n                    // last_saved: number;}\n                        {\n                            wsID: 'foo',\n                            permission: 'r',\n                            name: 'foofoo',\n                            last_saved: 0,\n                            users: {},\n                            narrative_detail: { creator: 'me' }\n        \n                        },\n                        {\n                            wsID: 'bar',\n                            permission: 'r',\n                            name: 'barbar',\n                            last_saved: 0,\n                            users: {},\n                            narrative_detail: { creator: 'me' }\n                        },\n                        {\n                            wsID: 'baz',\n                            permission: 'r',\n                            name: 'bazbaz',\n                            last_saved: 0,\n                            users: {},\n                            narrative_detail: { creator: 'me' }\n                        }\n                    ]\n                }\n            );\n            break;\n        case 'LOAD_MINE_NARRATIVES':\n\n                return (\n                    { ...state,\n                        narrativeDataArray: payload\n                    }\n                );\n            break;\n        default: \n                return state;\n    }\n}","import { Action, Reducer } from \"redux\";\nimport { baseReducer } from \"@kbase/ui-lib\"; //? \nimport { BaseStoreState } from \"@kbase/ui-lib\"; //? \nimport { StoreState } from \"../interfaces\";\n\nconst reducer: Reducer<StoreState | undefined, Action> = (state: StoreState | undefined, action: Action) => {\n  const baseState = baseReducer(state as BaseStoreState, action);\n  // if (baseState) {\n  //   return baseState as StoreState;\n  // }\n  return baseState as StoreState;\n};\n\nexport default reducer;","import { Action, Reducer } from 'redux';\nimport narrativeReducer from './narrative_reducers';\nimport reducer from './reducer';\nimport { StoreState, NarrativeData } from  \"../interfaces\";;\n\ninterface narrativeFetchActionType {\n  type: string;\n  payload: Array<NarrativeData>\n}\n//TODO:AKIYO convert this to combine reducers\n\n\nconst rootReducer: Reducer<StoreState | undefined, Action> = (state: StoreState | undefined, action: Action) => {\n\n  // Inital combine state created by store is loaded first \n  const kbaseUIStore = reducer(state as StoreState, action);\n  // if state doesn't load for whatever the reason possibly could be \n  if (!state) {\n    console.log('return state ')\n    return state // honestly I don't know what this returns\n  }\n  \n  // when reducer is creating KbaseUIStore \n  if (kbaseUIStore) {\n    return kbaseUIStore as StoreState;\n  } \n  else {\n    // when actions from app needs specific reducers\n    switch(action.type) {\n      case \"LOAD_NARRATIVES\": \n        console.log('calling narrative Reducer', action)\n        return narrativeReducer(state, action as narrativeFetchActionType) ;\n      case \"LOAD_MINE_NARRATIVES\": \n        console.log('calling narrative Reducer', action)\n        return narrativeReducer(state, action as narrativeFetchActionType) ;\n      default:\n        return state;\n    }\n  }\n}\n\n\nexport default rootReducer;\n","import { createStore, compose, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\n\nimport { makeBaseStoreState } from \"@kbase/ui-lib\";\nimport { StoreState,  NarrativeData, ProfileData,  NarrativeState } from './interfaces';\nimport rootReducer from \"./reducers/index\";\n\n\n// When app starts, this runs first to set the initial state.\nexport function makeInitialStoreState(): StoreState {\n    const baseStoreState = makeBaseStoreState();\n    // setting initial empty narrative state\n    const narrativePreloadedState: Array<NarrativeData>  = [{\n        wsID: '',\n        permission: '',\n        name: '',\n        last_saved: 0,\n        users: {},\n        narrative_detail: { creator: '' }\n    }]\n    console.log('baseStoreState', baseStoreState)\n    return {\n        // ...baseStoreState, userProfileApp:{ narrativeDataArray: narrativePreloadedState }\n        ...baseStoreState,  narrativeDataArray: narrativePreloadedState \n    };\n}\nexport function createReduxStore() {\n    return createStore(rootReducer, makeInitialStoreState(), compose(applyMiddleware(thunk)));\n}","import React from 'react';\nimport { UserName, ProfileData, OrgProp } from '../../redux/interfaces';\nimport { Row, Col, Card, Input } from 'antd';\nimport nouserpic from '../../assets/nouserpic.png';\nconst { Meta } = Card;\nconst { TextArea } = Input;\n\n/**\n *  Profile.tsx is a view component\n *  Parent componenet - pages/Home.tsx\n *\n */\n\ninterface Props {\n    token: string;\n    userName: UserName;\n    editEnable: Boolean;\n    userProfile: ProfileData;\n    orgs: Array<OrgProp>;\n    gravatarHash: string;\n    profileloaded: Boolean;\n    orgsloaded: Boolean;\n}\n\n/**\n * Returns profile component.\n * @param props\n */\nfunction Profile(props: Props) {\n    // console.log('profile props', props)\n    const profile = props.userProfile;\n    // Set initial value to props for initial render and no-data\n    let jobTitle = '';\n    let gravatarURL = '';\n    let affiliations = [\n        {\n            title: '',\n            organization: '',\n            started: '',\n            ended: ''\n        }\n    ];\n    let researchInterests: Array<string> = [];\n    let orgs = [\n        {\n            name: '',\n            url: ''\n        }\n    ];\n    let profileloading = true;\n    let gravatar;\n    if (props.profileloaded) {\n        profileloading = false;\n    }\n    let orgloading = true;\n    if (props.orgsloaded) {\n        orgloading = false;\n    }\n    // Set affiliations\n    if (typeof profile.affiliations !== 'undefined') {\n        affiliations = profile.affiliations;\n    }\n\n    // Set researchInterests\n    if (typeof profile.researchInterests !== 'undefined' && Array.isArray(profile.researchInterests)) {\n        researchInterests = profile.researchInterests;\n    }\n    // Set jobTitle\n    if (profile.jobTitle === 'Other' && typeof profile.jobTitle !== 'undefined') {\n        jobTitle = profile.jobTitleOther;\n    } else if (typeof profile.jobTitle !== 'undefined') {\n        jobTitle = profile.jobTitle;\n    } else {\n        jobTitle = '';\n    }\n    // set orgs\n    if (props.orgs) {\n        orgs = props.orgs;\n    }\n    // Set gravatarURL\n    if (profile['avatarOption'] === 'silhoutte' || !props.gravatarHash) {\n        gravatar = <img style={{ maxWidth: '100%', margin: '8px 0px' }} alt=\"avatar\" src={nouserpic} />;\n    } else if (props.gravatarHash) {\n        gravatarURL =\n            'https://www.gravatar.com/avatar/' + props.gravatarHash + '?s=300&amp;r=pg&d=' + profile.gravatarDefault;\n        gravatar = <img style={{ maxWidth: '100%', margin: '8px 0px' }} alt=\"avatar\" src={gravatarURL} />;\n    }\n\n    return (\n        <Row style={{ padding: 16 }}>\n            <Row gutter={8}>\n                <Col span={8}>\n                    <Card loading={profileloading} style={{ margin: '8px 0px', textAlign: 'center' }}>\n                        {/* <img style={{ maxWidth: '100%', margin: '8px 0px' }} alt='avatar' src={ gravatarURL } /> */}\n                        {gravatar}\n                    </Card>\n                    <Card\n                        loading={profileloading}\n                        style={{ margin: '8px 0px', textAlign: 'left' }}\n                        title={props.userName.name}\n                    >\n                        <Meta title=\"User ID\" />\n                        <p>{props.userName.userID}</p>\n                        <Meta title=\"Position\" />\n                        <p>{jobTitle}</p>\n                        <Meta title=\"Department\" />\n                        <p>{profile.department}</p>\n                        <Meta title=\"Organization\" />\n                        <p>{profile.organization}</p>\n                        <Meta title=\"Location\" />\n                        <p>\n                            {profile.city}, {profile.state}, {profile.country}\n                        </p>\n                        <Meta title=\"Primary Funding Source\" />\n                        <p>{profile.fundingSource}</p>\n                    </Card>\n                </Col>\n                <Col span={16}>\n                    <Row gutter={8}>\n                        <Col span={12}>\n                            <Card className=\"card-with-height\" loading={profileloading} style={{ margin: '8px 0px' }} title=\"Research Interests\">\n                                <ul style={{ textAlign: 'left' }}>\n                                    {researchInterests.map((interest) => (\n                                        <li key={interest}>{interest}</li>\n                                    ))}\n                                </ul>\n                            </Card>\n                        </Col>\n                        <Col span={12}>\n                            <Card className=\"card-with-height\" loading={orgloading} style={{ margin: '8px 0px' }} title=\"Organizations\">\n                                <ul style={{ textAlign: 'left' }}>\n                                    {orgs.map((org, index) => (\n                                        <li key={index}>\n                                            <a href={org.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                                                {org.name}\n                                            </a>\n                                        </li>\n                                    ))}\n                                </ul>\n                            </Card>\n                        </Col>\n                    </Row>\n                    <Row>\n                        {/* TODO:AKIYO FIX - when the box is very small it doesn't break or hide word */}\n                        <Card\n                            loading={profileloading}\n                            style={{ margin: '8px 0px' }}\n                            title=\"Research or Personal Statement\"\n                        >\n                            {profile.researchStatement}\n                        </Card>\n                        <Card loading={profileloading} style={{ margin: '8px 0px' }} title=\"Afflications\">\n                            <ul style={{ textAlign: 'left' }}>\n                                {affiliations.map((position, index) => (\n                                    <li key={index}>\n                                        {position.title} @ {position.organization}, {position.started} -{' '}\n                                        {position.ended}{' '}\n                                    </li>\n                                ))}\n                            </ul>\n                        </Card>\n                    </Row>\n                </Col>\n            </Row>\n        </Row>\n    );\n}\n\nexport default Profile;\n","/**\n *  Narrative.tsx is a view component\n *  Parent componenet - pages/Home.tsx\n *\n */\nimport React from 'react';\nimport { dateDisplay } from '../../util/dateDisplay'; // date format\nimport { Table, Popover } from 'antd';\nimport { Narrative_detail, NarrativeData } from '../../redux/interfaces'; //interface\n\ninterface TableData {\n    key: string;\n    wsID: string;\n    name: string;\n    last_saved: number;\n}\n\ninterface Props {\n    narratives: Array<NarrativeData>;\n    narrativesloaded: Boolean;\n}\n\n/**\n * Returns a component with list of narratives in a table.\n * @param props\n */\nfunction Narratives(props: Props) {\n    console.log(\"Narrative props\", props)\n    let data: Array<TableData> = [];\n    let loading = true;\n    if (props.narrativesloaded) {\n        loading = false;\n    }\n    // initialize data for the table to be an empty array.\n    const colums = [\n        {\n            title: 'Title',\n            dataIndex: 'name',\n            width: 350,\n            key: 'wsID',\n            render: (text: string, row: TableData) => {\n                let url = '/narrative/' + row.wsID;\n                return (\n                    <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n                        {text}\n                    </a>\n                );\n            },\n            sorter: (a: TableData, b: TableData) => {\n                let nameA = a.name.toUpperCase();\n                let nameB = b.name.toUpperCase();\n                if (nameA < nameB) {\n                    return -1;\n                }\n                if (nameA > nameB) {\n                    return 1;\n                }\n                return 0;\n            }\n        },\n        {\n            title: 'Last Saved',\n            dataIndex: 'last_saved',\n            width: 190,\n            render: (text: string, row: TableData) => {\n                let day = dateDisplay(row.last_saved);\n                return (\n                    <Popover placement=\"right\" content={day[0]}>\n                        {day[1]}\n                    </Popover>\n                );\n            },\n            sorter: (a: TableData, b: TableData) => {\n                let lastSavedA = a.last_saved;\n                let lastSavedB = b.last_saved;\n                if (lastSavedA < lastSavedB) {\n                    return 1;\n                }\n                if (lastSavedA > lastSavedB) {\n                    return -1;\n                }\n                return 0;\n            }\n        }\n    ];\n\n    for (let i = 0; i < props.narratives.length; i += 1) {\n        let narrative = props.narratives[i];\n        if (narrative.permission === 'r' || narrative.permission === 'n') {\n            if (Object.keys(narrative.users).length <= 0) {\n                data.push({\n                    key: narrative.wsID,\n                    wsID: narrative.wsID,\n                    name: narrative.name,\n                    last_saved: narrative.last_saved\n                });\n            } else {\n                data.push({\n                    key: narrative.wsID,\n                    wsID: narrative.wsID,\n                    name: narrative.name,\n                    last_saved: narrative.last_saved\n                });\n            }\n        } else {\n            const narrativeDetail: Narrative_detail = narrative['narrative_detail'];\n            let users = '';\n            for (let user in narrative.users) {\n                if (user !== narrativeDetail.creator) users = users + user + ', ';\n            }\n            data.push({\n                key: narrative.wsID,\n                wsID: narrative.wsID,\n                name: narrative.name,\n                last_saved: narrative.last_saved\n            });\n        }\n    }\n\n    return (\n        <Table<TableData>\n            style={{ width: '85%', margin: 'auto' }}\n            columns={colums}\n            dataSource={data}\n            loading={loading}\n        />\n    );\n}\n\nexport default Narratives;\n","/**\n * returns array of date in MMM DD YYY HH:MM:SS and one of below:\n * less than a min ago, # hours ago, # days ago, day: MMM DD YYYY (if it's more than a month)\n * @param {string} date date format\n * \n */\nexport function dateDisplay(date: number): Array<string> {\n    let delta = (Date.now() - +new Date(date))/1000000 ;\n    let dayString = (new Date(date)).toString();\n    // date format: MMM DD YYYY\n    let day = dayString.slice(4, 7) + ' ' + dayString.slice(8, 10) + ' ' + dayString.slice(11, 15);\n    //  date format: MMM DD YYYY HH:MM:SS\n    let dayAndTime = day + ' ' + dayString.slice(16, 24);\n    if( delta >= 2628 ) {\n        // more than a month ago\n        return [dayAndTime, day];\n    } else if( delta < 2628 && delta >= 86.4) {\n        // less than a month ago, but more than a day ago\n        let days = (delta/(86.4)).toFixed(0);\n        return [dayAndTime, days + ' days ago'];\n    }\n    else if( delta < 86.4 && delta >= 3.6) {\n        return [day, (delta/3.6).toFixed(0) + ' hours ago'];\n    } else if(delta < 3.6 && delta >= 0.06) {\n        return [dayAndTime, ((delta)*10).toFixed(0) + ' min ago'];\n    } else {\n        return [dayAndTime, 'less than a min ago']\n    }\n};","import { UserProfileService, ProfileData, UpdatedUserData} from \"../redux/interfaces\";\ninterface foo {\n\n    userdata: ProfileData;\n\n}\nexport async function getBFFServiceUrl(token: string, baseURL: string) {\n    // TODO: for dev, the baseUrl will be whatever works for the CRA workflow, which is ''.\n    // baseURL = 'https://ci.kbase.us/services'; // for dev\n    let url = baseURL + '/services/service_wizard';\n    const body = {\n        id: 0,\n        method: 'ServiceWizard.get_service_status',\n        version: '1.1',\n        params: [\n            {\n                module_name: 'bff',\n                version: null\n            }\n        ]\n    };\n    const stringBody = JSON.stringify(body);\n    const response = await fetch(url, {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n            Authorization: token\n        },\n        body: stringBody\n    });\n    const responseJson = await response.json();\n    return responseJson.result[0]['url'];\n}\n\n/**\n * Return profile data\n * @param id profile id\n * @param token KBase session cookie\n * @param baseUrl hostname\n */\nexport async function fetchProfileAPI(id: string, token: string, baseURL: string) {\n    const bffServiceUrl = await getBFFServiceUrl(token, baseURL);\n    let url = bffServiceUrl + '/fetchUserProfile/' + id;\n    const response = await fetch(url, {\n        method: 'GET'\n    });\n    if (response.status === 404) {\n        console.warn('404 response:', response);\n    } else if (response.status === 500) {\n        console.error('500 response:', response);\n        return;\n    }\n    try {\n        const profile = await response.json();\n        return profile;\n    } catch (err) {\n        console.error('profile fetch failed', response);\n    }\n}\n\nexport async function updateProfileAPI(token: string, baseURL: string, userdata:ProfileData) {\n    \n// export async function updateProfileAPI(token: string, baseURL: string, updatedUserProfleString:string) {\n    const body = {\n        version: '1.1',\n        method: 'UserProfile.update_user_profile',\n        params: [ {profile: {user: {realname: \"Akiyo Marukawa\", username: \"amarukawa\"}, userdata: {userdata}}}]\n    };\n    const stringBody = JSON.stringify(body);\n    //TODO: Akiyo - remove this after testing\n    baseURL = 'https://ci.kbase.us'\n    const url = baseURL + '/services/user_profile/rpc';\n    const response = await fetch(url, {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n            Authorization: token,\n            'Content-Type': 'application/json'\n        },\n        body: stringBody\n    });\n    if( response.status === 500) {\n        console.error('500 response:', response);\n        return;\n    }\n}\n\n/**\n * Return list of narratives\n * @param param shared/mine/public\n * @param token kbase session cookie\n */\nexport async function fetchNarrativesAPI(param: string, token: string, baseURL: string) {\n    const bffServiceUrl = await getBFFServiceUrl(token, baseURL);\n    let url = bffServiceUrl + '/narrative_list/' + param;\n    const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n            Authorization: token\n        }\n    });\n    if (response.status === 500) {\n        console.error('Fetch Narratives 500 response:', response);\n        return;\n    }\n    try {\n        const narratives = await response.json();\n        return narratives;\n    } catch (err) {\n        console.error('fetch narratives failed', response);\n    }\n}\n\n/**\n * returns list of orgs that profile and logged in user are both associated with.\n * @param id id of the profile\n * @param token kbase session cookie\n */\nexport async function fetchOrgsOfProfileAPI(id: string, token: string, baseURL: string) {\n    const bffServiceUrl = await getBFFServiceUrl(token, baseURL);\n    const url = bffServiceUrl + '/org_list/' + id;\n    const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n            Authorization: token\n        }\n    });\n    if (response.status === 500) {\n        console.error('500 response:', response);\n        return;\n    }\n    try {\n        const orgs = await response.json();\n        return orgs;\n    } catch (err) {\n        console.error('fetch org failed', response);\n    }\n}\n\n/**\n * returns list of users that are filtered by search values\n * @param searchValue search values\n * @param token kbase session cookie\n */\nexport async function filteredUserAPI(searchValue: string, token: string, baseURL: string) {\n    const body = {\n        version: '1.1',\n        method: 'UserProfile.filter_users',\n        params: [{ filter: searchValue }]\n    };\n    const stringBody = JSON.stringify(body);\n    const url = baseURL + '/services/user_profile/rpc';\n    const response = await fetch(url, {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n            Authorization: token,\n            'Content-Type': 'application/json'\n        },\n        body: stringBody\n    });\n    if (response.status === 500) {\n        console.error('500 response:', response);\n        return;\n    }\n    try {\n        const res = await response.json();\n        // if you try to: return response.json, it will get error below\n        // Unhandled Rejection (TypeError): Failed to execute 'json' on 'Response': body stream is locked\n        // but assiging it to a vairable somehow magically works.\n        return res;\n    } catch (err) {\n        console.error('fetch search users failed', response);\n    }\n}\n","import { ThunkDispatch } from \"redux-thunk\";\nimport { StoreState } from \"../interfaces\";\nimport { Action, AnyAction, Dispatch } from 'redux';\nimport { fetchOrgsOfProfileAPI, fetchProfileAPI, fetchNarrativesAPI } from '../../util/API';\n\n\nconst LOAD_NARRATIVES = 'LOAD_NARRATIVES';\nconst LOAD_MINE_NARRATIVES = 'LOAD_MINE_NARRATIVES';\nexport function loadNarratives_original() {\n    return {\n            type: LOAD_NARRATIVES,\n            payload: \n                [\n                    {\n                        wsID: 'foo',\n                        permission: 'r',\n                        name: 'foofoo',\n                        last_saved: 0,\n                        users: {},\n                        narrative_detail: { creator: 'me' }\n    \n                    }\n                ]\n            \n    }\n}\n\n// function dispatches \nexport function loadNarratives (filter:string) {\n    // ThunkDispatch<RootState(Store), ExtraArg, Action>;\n    return async function (dispatch:ThunkDispatch<StoreState, void, AnyAction>, getState: () => StoreState) {\n        const rootStore = getState();\n        if(rootStore.auth.userAuthorization !== null){ \n            const token = rootStore.auth.userAuthorization.token;\n            const baseURL = rootStore.app.config.baseUrl\n            //TODO: AKIYO replace ci.kbase with baseURL\n            // const response = await fetchNarrativesAPI('mine', token, baseURL);\n            const response = await fetchNarrativesAPI(filter, token, 'https://ci.kbase.us/');\n            console.log('loadNarratives action with async', response)\n            dispatch({ type: LOAD_MINE_NARRATIVES, payload: { response } })\n        }\n        \n    }\n}\n\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { NarrativeData, StoreState } from '../../redux/interfaces';\nimport { loadNarratives, loadNarratives_original } from '../../redux/actions/index';\nimport { Form, Button } from 'antd';\n\n\ninterface DispatchProps {\n    onSubmitDispatch: (filter:string) => void;\n    onSubmitDispatchThat: () => void;\n}\n\n\ninterface StateProps {\n    narrativeList: Array<NarrativeData>;\n}\n\n// props has to be combination os state and dispatch\ntype Props = StateProps & DispatchProps \n\n// this state comes from redux state \n// mapStateToProps is making that redux state into \n// this component's props\nfunction mapStateToProps (state:StoreState):StateProps { \n    /**\n     * take narrative out of the state and return as props\n     */\n    let narrativeList = state.narrativeDataArray \n    return { narrativeList };\n};\n\nfunction mapDispatchToProps(dispatch: Dispatch):DispatchProps {\n    return {\n        onSubmitDispatch: () =>  dispatch(loadNarratives('public') as any), // cuz I can't figure it out. \n        onSubmitDispatchThat: () => dispatch(loadNarratives_original())\n    }\n}\n\n// View Component itself \nfunction TestContainer (props: Props) {\n    console.log('testcontainer',props, props.narrativeList)\n    // submit button is not aware of dispatch. \n    // It just calls onSumbit function. \n    function onSubmit(event:React.FormEvent<HTMLFormElement>){\n        event.preventDefault()\n        props.onSubmitDispatch('public')\n    }\n    function onSubmitThat(event:React.FormEvent<HTMLFormElement>){\n        event.preventDefault()\n        props.onSubmitDispatchThat()\n    }\n    let narrativeList = mapStateToProps;\n    // MapThatList(mapStateToProps);\n    return (\n        // <ul>{ MapThatList(narrativeList) }</ul>\n        <div>pow- <Form onSubmit={onSubmit}><Form.Item><Button htmlType=\"submit\" >push this</Button> </Form.Item></Form>\n        pow- <Form onSubmit={onSubmitThat}><Form.Item><Button htmlType=\"submit\" >push that</Button> </Form.Item></Form></div>\n    )\n}\n\nexport default connect<StateProps, DispatchProps, {}, StoreState>(mapStateToProps, mapDispatchToProps)(TestContainer);","import React from 'react';\nimport { updateProfileAPI } from '../../util/API'; \nimport { UserName, ProfileData, OrgProp, Affiliation, UserProfileService, UpdatedUserData} from '../../redux/interfaces';\nimport nouserpic from '../../assets/nouserpic.png';\n\nimport { Row, Col, Card, Input, Icon, Button, Form , Tooltip} from 'antd';\nconst { Meta } = Card;\nconst { TextArea } = Input;\n\n/**\n *  Profile.tsx is a view component\n *  Parent componenet - pages/Home.tsx\n *  -----!important---\n *  Setup the className on the save/edit button wrapper div to match its intput field id\n */\n\ninterface Props {\n    baseURL: string;\n    token: string;\n    userName: UserName;\n    editEnable: Boolean;\n    userProfile: ProfileData;\n    orgs: Array<OrgProp>;\n    gravatarHash: string;\n    profileloaded: Boolean;\n    orgsloaded: Boolean;\n}\ninterface State {\n    userName: {\n        name: string;\n        userID: string;\n    };\n    userProfile: {\n        organization: string;\n        department: string;\n        city: string;\n        state: string;\n        postalCode: string;\n        country: string;\n        affiliations: Array<Affiliation>;\n        researchStatement: string;\n        jobTitle: string;\n        researchInterests: Array<string>;\n        fundingSource: string;\n        gravatarDefault: string;\n        avatarOption: string;\n    }\n    userProfileLoading: boolean;\n    organizations: Array<OrgProp>;\n    organizationsLoading: boolean;\n    gravatar: any;\n}\n/**\n * Profile class component.\n * @param props\n */\nclass MockProfile extends React.Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            userName: {\n                name: '',\n                userID: ''\n            },\n            userProfile: {\n                organization: '',\n                department: '',\n                city: '',\n                state: '',\n                postalCode: '',\n                country: '',\n                affiliations: [],\n                researchStatement: '',\n                jobTitle: '',\n                researchInterests: [],\n                fundingSource: '',\n                gravatarDefault: '',\n                avatarOption: ''\n            },\n            userProfileLoading: true,\n            organizations: [],\n            organizationsLoading: true,\n            gravatar: <img style={{ maxWidth: '100%', margin: '8px 0px' }} alt=\"avatar\" src={nouserpic} />\n        }\n        this.inputEnable =this.inputEnable.bind(this);\n        // this.toggleSaveEdit = this.toggleSaveEdit.bind(this);\n        this.handleEdit = this.handleEdit.bind(this);\n        this.userNameDisplay = this.userNameDisplay.bind(this);\n        this.inputSave = this.inputSave.bind(this)\n        // this.editSaveButtons = this.editSaveButtons.bind(this);\n        // this.cardTitle = this.cardTitle.bind(this);\n    }\n    //TODO: AKIYO  to separate this props value checking from componentDidmount\n    // so that componentDidUpdate can also use it. \n    componentDidMount(){\n        console.log('profile props', this.props);\n        // after initial mounting, check props values\n        // before setting the state and using them.\n        if (this.props.userName) {\n            this.setState({ userName: this.props.userName});\n        }\n        // setting the state values into one variable: profile\n        // to avoid multiple re-rendering.\n        let profile = this.state.userProfile;\n        for ( let key in this.props.userProfile ) {\n            switch ( key ) {\n                case 'researchInterests':\n                case 'affiliations':\n                    if (typeof this.props.userProfile[key] !== 'undefined' && Array.isArray(this.props.userProfile[key])) {\n                        profile.researchInterests = this.props.userProfile.researchInterests;\n                    }\n                    break;\n                case 'jobTitle':\n                case 'jobTitleOther':\n                    if (this.props.userProfile.jobTitle === 'Other' && typeof this.props.userProfile.jobTitle !== 'undefined') {\n                        profile.jobTitle = this.props.userProfile.jobTitleOther;\n                    } else if (typeof profile.jobTitle !== 'undefined') {\n                        profile.jobTitle = this.props.userProfile.jobTitle;\n                    }\n                    break;\n                case 'avatarOption':\n                    // Set gravatarURL\n                    if (this.props.userProfile.avatarOption === 'silhoutte' || !this.props.gravatarHash) {\n                        this.setState({gravatar: <img style={{ maxWidth: '100%', margin: '8px 0px' }} alt=\"avatar\" src={nouserpic} />});\n                    } else if (this.props.gravatarHash) {\n                        let gravatarURL =\n                            'https://www.gravatar.com/avatar/' + this.props.gravatarHash + '?s=300&amp;r=pg&d=' + profile.gravatarDefault;\n                    this.setState({gravatar: <img style={{ maxWidth: '100%', margin: '8px 0px' }} alt=\"avatar\" src={gravatarURL} />});\n                    }\n                    break;\n                case 'organization':\n                case 'department':\n                case 'city':\n                case 'state':\n                case 'postalCode':\n                case 'country':\n                case 'researchStatement':\n                case 'fundingSource':\n                case 'gravatarDefault':\n                    if (typeof this.props.userProfile[key] !== 'undefined') {\n                        profile[key] = this.props.userProfile[key];\n                    }\n                break;\n                default: \n                console.error(key, \"what did you change to get here....\")\n            }\n        }\n        this.setState({ \n            userProfile: profile, \n            userProfileLoading: false\n        })\n        if (this.props.orgs) {\n            this.setState({\n                organizations: this.props.orgs,\n                organizationsLoading: false\n            })\n        }\n    }\n\n    componentDidUpdate(){\n        console.log(\"component did UPDATE in mock profile\", this.props)\n    }\n\n    /**\n     * Enable edit on text field\n     * @param event\n     * @param edit if the input field should be disabled or not false=disabled\n     */\n    inputEnable(event: any){\n        console.log(event.target)\n        console.log(event.target.attributes)\n        // let divID = event.target.parentNode.className;\n        // let selectorText = '#'+ divID;\n        // let el = document.querySelector(selectorText);\n        if( event.target instanceof HTMLElement ) {\n            // without this type check, dynamic styling doens't work.\n            if ( event.target.hasAttribute('readonly') ) {\n                event.target.removeAttribute('readonly');\n            } \n        } else {\n            throw new Error(\"element not in document\")\n        }\n    }\n    inputSave(event: any){\n        if( event.target instanceof HTMLElement ) {\n            if ( !event.target.hasAttribute('readonly')) {\n                event.target.setAttribute(\"readonly\", \"\");\n            }\n        } else {\n            throw new Error(\"element not in document\")\n        }\n\n           // TODO: AKIYO this is going to be action \n        interface foo {\n\n                userdata: ProfileData;\n\n        }\n            let profile:ProfileData = {\n                  \n                        organization: 'Lawrence Berkeley National Laboratory (LBNL)',\n                        department: 'BOOO',\n                        city: 'Berkeley',\n                        state: 'California',\n                        postalCode: '94720',\n                        country: 'United States',\n                        affiliations:[{title: 'foobarrrrrr', organization: 'buzz', started: '1969', ended: 'Present'}, {title: 'bazBuz barz', organization: 'Hello', started: '1969', ended: '1973'}],\n                        researchStatement: event.target.value,\n                        jobTitle: 'Other',\n                        jobTitleOther: 'Front end dev',\n                        researchInterests: ['Genome Annotation', 'Genome Assembly', 'Microbial Communities', 'Comparative Genomics', 'Expression', 'Metabolic Modeling', 'Read Processing', 'Sequence Analysis', 'Utilities', 'Other'],\n                        fundingSource: 'DOE National Nuclear Security Administration (NNSA)',\n                        gravatarDefault: 'mm',\n                        avatarOption: ''\n           }\n        \n\n        console.log(event.target.value)\n        // TODO: AKIYO FIX THE API USING HARD COREDED BASEURL\n        // let updatedProfileString:string = JSON.stringify(updatedProfile)\n        // updateProfileAPI(this.props.token, this.props.baseURL, updatedProfileString)\n        updateProfileAPI(this.props.token, this.props.baseURL, profile)\n\n    }\n    /**\n     * Taggle save/edit button\n     * @param event \n     */\n    // toggleSaveEdit(event:any){\n    //     event.target.style.visibility= \"hidden\";\n    //     if(event.target.className.includes('save-button-on-title')) {\n    //         // save button is clicked\n    //         let elem = event.target.parentNode\n    //         let el = elem.querySelector('.edit-button-on-title');\n    //         if ( el instanceof HTMLElement ) {\n    //             // without this type check, dynamic styling doens't work.\n    //             el.style.visibility= \"visible\";\n    //         } else {\n    //             throw new Error(\"element not in document\")\n    //         }\n    //     } else if(event.target.className.includes('edit-button-on-title')) {\n    //         // edit button is clicked\n    //         let elem = event.target.parentNode;\n    //         let el = elem.querySelector('.save-button-on-title');\n    //         if ( el instanceof HTMLElement ) {\n    //             // without this type check, dynamic styling doens't work.\n    //             el.style.visibility = 'visible';\n    //         } else {\n    //             throw new Error(\"element not in document\")\n    //         }\n    //     }\n    // } \n\n\n    /**\n     * handle edit/save button onclick\n     * event can be alot of things per MDN - \n     * \"Element, document, and window are the most common event targets,\n     * but other objects can be event targets too,\n     * for example XMLHttpRequest, AudioNode, AudioContext, and others.\"\n     * @param event \n     */\n    handleEdit(event:any) {\n        console.log('inhandleEdit')\n        // let edit:boolean = false;\n        // if( event.target.className.includes('save-button-on-title') ) {\n        //     edit = false;\n        // } else if (event.target.className.includes('edit-button-on-title')) {\n        //     edit = true;\n        // }\n        // console.log(event.target.parentNode)\n        // this.toggleSaveEdit(event); // toggle save/edit button\n        this.inputEnable(event); // enable and disable input/text field\n     \n    }\n    /**\n     * make edit and save buttons\n     * @param divClassName \n     */\n    // editSaveButtons(divClassName:string){\n    //     return (\n    //         <div className={divClassName}><Button className=\"edit-button-on-title\" icon=\"edit\" key='editing' onClick={this.handleEdit}/><Button className=\"save-button-on-title\" icon=\"save\" key='saving' onClick={this.handleEdit}/></div>\n    //         )\n    // }\n        \n    /**\n     * Due to Ant design dealing with React life cycle, \n     * to display name as a default value, state cannot be used \n     * props must be used instead\n     */\n    userNameDisplay(){\n        let name = '';\n        // probably I should flip this order\n        if(this.state.userName.name){\n            name = this.state.userName.name;\n        } else if (this.props.userName.name){\n            name = this.props.userName.name;\n        } else {\n            name = \"error\";\n        }\n        \n        // return <div><Input className='clear-disabled' id='userName-name' defaultValue={name}/>{this.editSaveButtons('userName-name')}</div>\n        return <div><Input className='clear-disabled' id='userName-name' defaultValue={name} onClick={this.handleEdit} /></div>\n    }\n    /**\n     * make card title with edit/save buttons\n     * @param title \n     * @param classname \n     */\n    // cardTitle(title:string, classname:string){\n    //     // return<div>{title}{this.editSaveButtons(classname)}</div>\n    // }\n\n    render(){\n        console.log(\"rendering\", this.state.userName.name)\n        return (\n            <Row style={{ padding: 16 }}>\n                <Row gutter={8}>\n                    <Col span={8}>\n                        <Card loading={this.state.userProfileLoading} style={{ margin: '8px 0px', textAlign: 'center' }}>\n                            {/* <img style={{ maxWidth: '100%', margin: '8px 0px' }} alt='avatar' src={ gravatarURL } /> */}\n                            {this.state.gravatar}\n                        </Card>\n                        <Card\n                            loading={this.state.userProfileLoading}\n                            style={{ margin: '8px 0px', textAlign: 'left' }}\n                            title={this.userNameDisplay()}\n                        >\n                            {/* {this.editSaveButtons('userProfile')} */}\n                            {/* TODO:AKIYO this is going to be form */}\n                            <Form layout='vertical'>\n                                <Form.Item label='User ID' >\n                                <Tooltip placement=\"top\" title=\"Once create an account with a user ID, the system does not allow you to change it later.\">\n                                        <Input className='clear-disabled' defaultValue={this.state.userName.userID} disabled={true} onClick={this.handleEdit}></Input>\n                                </Tooltip>\n                                </Form.Item>\n                                <Form.Item label='Position' >\n                                    <Input className='clear-disabled' defaultValue={this.state.userProfile.jobTitle} disabled={true}></Input>\n                                </Form.Item>\n                                <Form.Item label='Department' >\n                                    <Input className='clear-disabled' defaultValue={this.state.userProfile.department} disabled={true}></Input>\n                                </Form.Item>\n                                <Form.Item label='Organization' >\n                                    <Input className='clear-disabled' defaultValue={this.state.userProfile.organization} disabled={true}></Input>\n                                </Form.Item>\n                                <Form.Item label='Location' >\n                                    <Input className='clear-disabled' defaultValue={this.state.userProfile.city} disabled={true}></Input>\n                                    <Input className='clear-disabled' defaultValue={this.state.userProfile.state} disabled={true}></Input>\n                                    <Input className='clear-disabled' defaultValue={this.state.userProfile.country} disabled={true}></Input>\n                                </Form.Item>\n                                <Form.Item label='Primary Funding Source' >\n                                    <Input className='clear-disabled' defaultValue={this.state.userProfile.fundingSource} disabled={true}></Input>\n                                </Form.Item>\n                            </Form>\n                        </Card>\n                    </Col>\n                    <Col span={16}>\n                        <Row gutter={8}>\n                            <Col span={12}>\n                                <Card className=\"card-with-height\" loading={this.state.userProfileLoading} style={{ margin: '8px 0px' }} title=\"Research Interests\">\n                                    <ul style={{ textAlign: 'left' }}>\n                                        {this.state.userProfile.researchInterests.map((interest) => (\n                                            <li key={interest}>{interest}</li>\n                                        ))}\n                                    </ul>\n                                </Card>\n                            </Col>\n                            <Col span={12}>\n                                <Card className=\"card-with-height\" loading={this.state.organizationsLoading} style={{ margin: '8px 0px' }} title=\"Organizations\">\n                                    <ul style={{ textAlign: 'left' }}>\n                                        {this.state.organizations.map((org, index) => (\n                                            <li key={index}>\n                                                <a href={org.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                                                    {org.name}\n                                                </a>\n                                            </li>\n                                        ))}\n                                    </ul>\n                                </Card>\n                            </Col>\n                        </Row>\n                        <Row>\n                            {/* TODO:AKIYO FIX - when the box is very small it doesn't break or hide word */}\n                            <Card\n                                loading={this.state.userProfileLoading}\n                                style={{ margin: '8px 0px' }}\n                                title='Research or Personal Statement'\n                            >\n                                <TextArea className='clear-disabled' id=\"researchStatement\" defaultValue={this.state.userProfile.researchStatement} readOnly  onClick={this.handleEdit} onBlur={this.inputSave} onPressEnter={this.inputSave} />\n                            </Card>\n                            <Card loading={this.state.userProfileLoading} style={{ margin: '8px 0px' }} title=\"Affliations\">\n                                <ul style={{ textAlign: 'left' }}>\n                                    {this.state.userProfile.affiliations.map((position, index) => (\n                                        <li key={index}>\n                                            {position.title} @ {position.organization}, {position.started} -{' '}\n                                            {position.ended}{' '}\n                                        </li>\n                                    ))}\n                                </ul>\n                            </Card>\n                        </Row>\n                    </Col>\n                </Row>\n            </Row>\n        );\n    }\n}\n\nexport default MockProfile;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport MockProfile from './MockProfile';\nimport { StoreState, UserName, ProfileData, OrgProp } from '../../redux/interfaces';\n\n\n/// when home page is loaded, it triggers action to fetch API call\n// to get profile info.\n// then store state will get populated by the user profile \n// then dispatch? update the component this component? \n\nfunction mapStateToProps(state: StoreState): StoreState {\n    console.log(\"mockProfileContainer mapStateToProp\", state);\n    return state\n}\n\ninterface Props {\n    baseURL: string;\n    token: string;\n    userName: UserName;\n    editEnable: Boolean;\n    userProfile: ProfileData;\n    orgs: Array<OrgProp>;\n    gravatarHash: string;\n    profileloaded: Boolean;\n    orgsloaded: Boolean;\n}\n\nfunction MockProfileContainer(props:Props) {\n    console.log(\"mockProfileContainer props\", props);\n\n    return (\n    <MockProfile\n        baseURL={props.baseURL}\n        userName={props.userName}\n        editEnable={props.editEnable}\n        userProfile={props.userProfile}\n        orgs={props.orgs}\n        gravatarHash={props.gravatarHash}\n        profileloaded={props.profileloaded}\n        orgsloaded={props.orgsloaded}\n        token={props.token}\n    />)\n\n}\n\nexport default connect(mapStateToProps, null)(MockProfileContainer);\n","import React from 'react';\nimport { Select } from 'antd';\nimport { filteredUserAPI } from '../../util/API';\nimport { FilteredUser } from '../../redux/interfaces';\nconst { Option } = Select;\n\n\ninterface State {\n    data: Array<FilteredUser>;\n    mouseLeave: boolean;\n}\n\ninterface Props {\n    token: string;\n    baseURL: string;\n}\n\ninterface Response {\n    version: string;\n    result: Array<any>;\n}\n\n/**\n * View component with user search feature.\n * @param props\n */\nclass SearchUsers extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            data: [],\n            mouseLeave: false\n        };\n        this.onChangeHandler = this.onChangeHandler.bind(this);\n        this.onSearchHandler = this.onSearchHandler.bind(this);\n        this.onMouseLeaveHandler = this.onMouseLeaveHandler.bind(this);\n        this.onMouseEnterHandler = this.onMouseEnterHandler.bind(this);\n    }\n\n    onSearchHandler(value: string): void {\n        if (value.length > 2 && this.state.mouseLeave !== true) {\n            filteredUserAPI(value, this.props.token, this.props.baseURL).then((response: Response) => {\n                if (typeof response !== 'undefined') {\n                    this.setState({ data: response['result'][0] });\n                } else {\n                    this.setState({\n                        data: [{ username: 'error', realname: 'Something went wrong. Try again later.' }]\n                    });\n                }\n            });\n        } else {\n            return;\n        }\n    }\n    onMouseLeaveHandler(): void {\n        this.setState({ mouseLeave: true });\n    }\n    onMouseEnterHandler(): void {\n        this.setState({ mouseLeave: false });\n    }\n    onChangeHandler(value: string): void {\n        if (value !== 'error' && typeof value !== 'undefined') {\n            let url = '/#user/' + value;\n            window.open(url, '_blank');\n        }\n    }\n\n    render() {\n        let data = this.state.data;\n        return (\n            <Select\n                mode=\"single\"\n                style={{ width: 300 }}\n                allowClear\n                showSearch\n                placeholder=\"enter more than 3 characters\"\n                showArrow={false}\n                onSearch={this.onSearchHandler}\n                onChange={this.onChangeHandler}\n                onMouseLeave={this.onMouseLeaveHandler}\n                onMouseEnter={this.onMouseEnterHandler}\n                optionFilterProp=\"children\"\n                filterOption={(inputValue, option) => {\n                    return true;\n                }}\n            >\n                {data.map((item) => {\n                    return (\n                        <Option key={item['username']}>\n                            {item['realname']} ({item['username']})\n                        </Option>\n                    );\n                })}\n            </Select>\n        );\n    }\n}\n\nexport default SearchUsers;\n","import React from 'react';\nimport { connect} from 'react-redux';\n\nimport SearchUsers from './SearchUsers';\n\ninterface AppState {\n    app: {\n        config: {\n            baseUrl: string;\n        }\n    };\n    auth: AuthData;\n}\n\ninterface AuthData {\n    userAuthorization: {\n        realname: string;\n        roles: Array<string>;\n        token: string;\n        username: string;\n    }\n}\n\nconst mapStateToProps = (state:AppState) => {\n    // Since this component is just a redux wrapper \n    // and not modifying state to make component props\n    // simply return state asd props\n    return state\n}\nfunction SearchUsersRedux(mapStateToProps:AppState) {\n    return (\n        <SearchUsers token={mapStateToProps.auth.userAuthorization.token} baseURL={mapStateToProps.app.config.baseUrl}/>\n    )\n}\n\nexport default connect(mapStateToProps)(SearchUsersRedux);","import React from 'react';\nimport { Tabs } from 'antd';\nimport Profile from '../components/Profile/Profile';\nimport Narratives from '../components/Narratives/Narratives';\n\nimport { NarrativeData, OrgProp, Org, ProfileData,  UserName } from '../redux/interfaces';\n// import x from '../components/Test/TestContainer';\nimport {TestContainer, MockProfileContainer } from '../components/Test';\nimport SearchUsersContainer from '../components/SearchUsers/SearchUsersContainer';\nimport { fetchOrgsOfProfileAPI, fetchProfileAPI, fetchNarrativesAPI } from '../util/API';\n\nconst TabPane = Tabs.TabPane;\n/**\n * Class component that keeps states for all the variables that viewer/child components needs.\n * This can converted into Redux if needed.\n * Parent component App.tsx\n */\n\n// add Narrative_detail if needed. Currently, data in the object is not used - Akiyo.\n\ninterface HomeState {\n    tabTitle: Array<string>;\n    userName: UserName;\n    userProfile: ProfileData;\n    userProfileLoaded: Boolean;\n    editEnable: Boolean; // profile edit enable \n    narratives: Array<NarrativeData>;\n    narrativesLoaded: Boolean;\n    sharedNarratives: Array<NarrativeData>;\n    sharedNarrativesLoaded: Boolean;\n    organizations: Array<OrgProp>;\n    organizationsLoaded: Boolean;\n    gravatarHash: string;\n}\n\nexport interface HomeProps {\n    token: string;\n    authUsername: string;\n    username: string | null;\n    baseURL: string;\n    setTitle: (title: string) => void;\n    loadNarratives: (filter: string) => void;\n    loadNarratives_original: () => Array<NarrativeData>;\n}\n\nclass Home extends React.Component<HomeProps, HomeState> {\n    constructor(props: HomeProps) {\n        super(props);\n        this.state = {\n            tabTitle: ['Profile', 'Narratives', 'Shared narratives', 'Search users'],\n            userName: {\n                name: '',\n                userID: ''\n            },\n            editEnable: false,\n            userProfile: {\n                organization: '',\n                department: '',\n                city: '',\n                state: '',\n                postalCode: '',\n                country: '',\n                affiliations: [],\n                researchStatement: '',\n                jobTitle: '',\n                jobTitleOther: '',\n                researchInterests: [],\n                fundingSource: '',\n                gravatarDefault: '',\n                avatarOption: ''\n            },\n            userProfileLoaded: false,\n            narratives: [],\n            narrativesLoaded: false,\n            sharedNarratives: [],\n            sharedNarrativesLoaded: false,\n            organizations: [],\n            organizationsLoaded: false,\n            gravatarHash: ''\n        };\n    }\n\n    componentDidMount() {\n        console.log('home page props', this.props)\n        let username;\n        if (this.props.username) {\n            username = this.props.username;\n            this.props.setTitle('User Profile for ' + username);\n        } else {\n            username = this.props.authUsername;\n            this.props.setTitle('Your User Profile');\n            this.setState({ editEnable: true })\n        }\n        /**\n         * fetch user profile\n         *  @param {string} id  profile ID\n         */\n        fetchProfileAPI(username, this.props.token, this.props.baseURL).then((response) => {\n            console.log('user profile response', response)\n            if (typeof response !== 'undefined') {\n                if (this.props.username) {\n                    this.props.setTitle('User Profile for ' + response.user.realname);\n                }\n                this.setState({\n                    userName: {\n                        name: response.user.realname,\n                        userID: response.user.username\n                    },\n                    gravatarHash: response.profile.synced.gravatarHash,\n                    userProfile: response.profile.userdata,\n                    userProfileLoaded: true\n                });\n            } else {\n                // something went wrong during fetching.\n                this.setState({\n                    userName: {\n                        name: 'Something went wrong. Please check console for error messages..',\n                        userID: ''\n                    }\n                });\n            }\n        });\n\n        /**\n         * fetch orgs that user blongs to the profile\n         *  @param {string} id  profile ID\n         */\n        fetchOrgsOfProfileAPI(username, this.props.token, this.props.baseURL).then((response: Array<Org>) => {\n            let orgArr: Array<OrgProp> = [];\n            if (typeof response !== 'undefined') {\n                response.forEach((org) => {\n                    orgArr.push({ name: org.name, url: this.props.baseURL + '/#org/' + org.id });\n                });\n                this.setState({\n                    organizations: orgArr,\n                    organizationsLoaded: true\n                });\n            } else {\n                // something went wrong during fetching.\n                this.setState({\n                    organizations: [\n                        { name: 'Something went wrong. Please check console for error messages.', url: '' }\n                    ],\n                    organizationsLoaded: true\n                });\n            }\n        });\n\n        /**\n         * Returns narratives that shows in Narrative table.\n         *\n         *\n         * Below logic determines which set of narratives needs to be fetched.\n         * if the viewing profile userid is not the logged in user,\n         * then fetch all of shared and public narrative and filter with the viewing profile userid.\n         */\n        let profileID = this.props.username; // profile to be viewed \n        if (typeof this.props.username === 'undefined'|| typeof this.props.authUsername === 'undefined') {\n            // if there is no logged in user in run time config (redux app state)\n            // returns an empty narrative list\n            this.setState({\n                narratives: [\n                    {\n                        wsID: '',\n                        permission: '',\n                        name: 'Something went wrong. Please check console for error messages.',\n                        last_saved: 1,\n                        users: {},\n                        narrative_detail: { creator: '' }\n                    }\n                ],\n                narrativesLoaded: true\n            });\n            return;\n        } else {            \n            // when logged in user is viewing his/her profile\n            // fetch both \"mine\" and \"shared\" profile\n            // if (this.props.username === this.props.authUsername) {\n            if (this.props.username === profileID) {\n                this.props.loadNarratives('mine'); // redux \n                fetchNarrativesAPI('mine', this.props.token, this.props.baseURL).then(\n                    (response: Array<NarrativeData>) => {\n                        if (typeof response !== 'undefined') {\n                            console.log('response fetchNarrativesAPI', response)\n                            this.setState({\n                                narratives: response,\n                                narrativesLoaded: true\n                            });\n                        } else {\n                            // fetch failed\n                            this.setState({\n                                narratives: [\n                                    {\n                                        wsID: '',\n                                        permission: '',\n                                        name: 'Something went wrong. Please check console for error messages.',\n                                        last_saved: 0,\n                                        users: {},\n                                        narrative_detail: { creator: '' }\n                                    }\n                                ],\n                                narrativesLoaded: true\n                            });\n                        }\n                    }\n                );\n                    \n                    // this.props.loadNarratives('public');\n                \n                fetchNarrativesAPI('shared', this.props.token, this.props.baseURL).then(\n                    (response: Array<NarrativeData>) => {\n                        if (typeof response !== 'undefined') {\n                            this.setState({\n                                sharedNarratives: response,\n                                sharedNarrativesLoaded: true\n                            });\n                        } else {\n                            // something went wrong during fetching.\n                            this.setState({\n                                sharedNarratives: [\n                                    {\n                                        wsID: '',\n                                        permission: '',\n                                        name: 'Something went wrong. Please check console for error messages.',\n                                        last_saved: 0,\n                                        users: {},\n                                        narrative_detail: { creator: '' }\n                                    }\n                                ],\n                                sharedNarrativesLoaded: true\n                            });\n                        }\n                    }\n                );\n            } else {\n                // when logged in user is not viewing other user's profile\n                // fetch both \"public\" and \"shared\" profile and fileter response with profileID\n                let publicNarratives = fetchNarrativesAPI('public', this.props.token, this.props.baseURL).then(\n                    (response: Array<NarrativeData>) => {\n                        if (typeof response === 'undefined') {\n                            // fetch failed.\n                            this.setState({\n                                narratives: [\n                                    {\n                                        wsID: '',\n                                        permission: '',\n                                        name: 'Something went wrong. Please check console for error messages.',\n                                        last_saved: 0,\n                                        users: {},\n                                        narrative_detail: { creator: '' }\n                                    }\n                                ],\n                                narrativesLoaded: true\n                            });\n                            return;\n                        }\n                        return response;\n                    }\n                );\n                let sharedNarratives = fetchNarrativesAPI('shared', this.props.token, this.props.baseURL).then(\n                    (response: Array<NarrativeData>) => {\n                        return response;\n                    }\n                );\n                Promise.all([publicNarratives, sharedNarratives]).then((values) => {\n                    let sharedNarrativeList = [];\n                    if (typeof values[1] !== 'undefined') {\n                        for (let i = 0; i < values[1].length; i++) {\n                            let narrative = values[1][i];\n                            if (narrative.narrative_detail.creator !== profileID) {\n                                for (let user in narrative.users) {\n                                    if (user === profileID) {\n                                        sharedNarrativeList.push(narrative);\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    let narrativeList = [];\n                    if (typeof values[0] !== 'undefined') {\n                        let allNarratives = values[0].concat(values[1]);\n                        for (let i = 0; i < allNarratives.length; i += 1) {\n                            if (allNarratives[i]['narrative_detail']['creator'] === profileID) {\n                                narrativeList.push(allNarratives[i]);\n                            }\n                        }\n                    }\n                    this.setState({\n                        narratives: narrativeList,\n                        narrativesLoaded: true,\n                        sharedNarratives: sharedNarrativeList,\n                        sharedNarrativesLoaded: true\n                    });\n                });\n            }\n        }\n    }\n\n    componentDidUpdate(prevProps: any, prevState: any) {\n        // This privents from infinate component loading loop.\n        if (this.state === prevState) {\n            return;\n        }\n    }\n    // wrap search user component with a div so that display can be controlled.\n    // in order to place search component/box on the navigation tab, \n    // make it into a variable and insert it as tab title. \n    searchOnATab = <div className=\"search-on-a-tab\">Search other users <SearchUsersContainer /></div>\n    \n    render() {\n        return (\n            <div>\n            <Tabs type=\"line\" defaultActiveKey=\"1\">\n                <TabPane tab=\"Profile\" key=\"1\">\n                    <Profile\n                        userName={this.state.userName}\n                        editEnable={this.state.editEnable}\n                        userProfile={this.state.userProfile}\n                        orgs={this.state.organizations}\n                        gravatarHash={this.state.gravatarHash}\n                        profileloaded={this.state.userProfileLoaded}\n                        orgsloaded={this.state.organizationsLoaded}\n                        token={this.props.token}\n                    />\n                </TabPane>\n                <TabPane tab=\"Narratives\" key=\"3\">\n                    <Narratives\n                        narratives={this.state.narratives}\n                        narrativesloaded={this.state.narrativesLoaded}\n                    />\n                </TabPane>\n                <TabPane tab=\"Testing\" key=\"6\">\n                    <MockProfileContainer\n                        baseURL={this.props.baseURL}\n                        userName={this.state.userName}\n                        editEnable={this.state.editEnable}\n                        userProfile={this.state.userProfile}\n                        orgs={this.state.organizations}\n                        gravatarHash={this.state.gravatarHash}\n                        profileloaded={this.state.userProfileLoaded}\n                        orgsloaded={this.state.organizationsLoaded}\n                        token={this.props.token}\n                    />\n                </TabPane>\n                {/* Insert search user component div as a title to place it on the navigation tab  */}\n                <TabPane disabled tab={this.searchOnATab} key=\"8\"></TabPane>\n            </Tabs>\n            </div>\n        );\n    }\n}\n\nexport default Home;\n","import { connect } from 'react-redux';\nimport { Action, Dispatch } from 'redux';\n\nimport Home from './Home';\nimport { StoreState, NarrativeData } from '../redux/interfaces';\nimport { sendTitle } from '@kbase/ui-lib';\nimport { loadNarratives, loadNarratives_original } from '../redux/actions/index';\n\n\ninterface OwnProps {}\n\ninterface StateProps {\n    token: string;\n    authUsername: string;\n    username: string | null;\n    baseURL: string;\n}\n\ninterface DispatchProps {\n    setTitle: (title: string) => void;\n    loadNarratives: (filter:string) => void;\n    loadNarratives_original: () => Array<NarrativeData>;\n}\n\n// TODO this should be part of the view definition\ninterface UserProfileViewParams {\n    username?: string;\n}\n\nfunction mapStateToProps(state: StoreState, ownProps: OwnProps): StateProps {\n    const {\n        auth: { userAuthorization },\n        app: {\n            config: { baseUrl },\n            runtime: {\n                navigation: { params: rawParams }\n            }\n        }\n    } = state;\n    if (!userAuthorization) {\n        throw new Error('This plugin only operates with authentication; no KBase token in store');\n    }\n    const params = (rawParams as unknown) as UserProfileViewParams;\n    return {\n        token: userAuthorization.token,\n        authUsername: userAuthorization.username,\n        username: params.username || null,\n        baseURL: baseUrl\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, ownProps: OwnProps): DispatchProps {\n    return {\n        // action creator loadNarratives is passed as props to the home page.\n        loadNarratives: (filter: string) => {\n            return dispatch(loadNarratives(filter)as any);\n        },\n        setTitle: (title: string) => {\n            return dispatch(sendTitle(title) as any);\n        },\n        loadNarratives_original: () => {\n            return dispatch(loadNarratives_original() as any);\n        }\n    };\n}\n\n// function HomeRedux(mapStateToProps:AppState) {\n//     return (\n//         <Home userData={mapStateToProps.auth.userAuthorization} baseURL={mapStateToProps.app.config.baseUrl}/>\n//     )\n// }\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(Home);\n","import React from 'react';\nimport { Layout } from 'antd';\nimport { Provider } from 'react-redux';\nimport { createReduxStore } from './redux/store';\nimport { AppBase, AuthGate } from '@kbase/ui-lib';\n\nimport './App.css';\nimport HomeRedux from './pages/HomeRedux';\n\nconst { Content } = Layout;\nconst store = createReduxStore();\ninterface AppProps {}\ninterface AppState {}\n\nconst App: React.FC = () => {\n    return (\n        <Provider store={store}>\n            <AppBase>\n                <AuthGate required={true}>\n                    <div className=\"App\">\n                        <Layout style={{ minHeight: '100vh' }}>\n                            <Content style={{ backgroundColor: 'white' }}>\n                                <HomeRedux />\n                            </Content>\n                        </Layout>\n                    </div>\n                </AuthGate>\n            </AppBase>\n        </Provider>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n//TODO:AKIYO add service worker\n"],"sourceRoot":""}