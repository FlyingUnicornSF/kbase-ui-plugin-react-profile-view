{"version":3,"sources":["assets/nouserpic.png","redux/reducers/narrative_reducers.ts","redux/reducers/reducer.ts","redux/reducers/index.ts","redux/reducers/profile_reducers.ts","redux/store.ts","util/API.tsx","redux/actions/narrativeActions.ts","redux/actions/profileActions.ts","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Narratives/Narratives.tsx","util/dateDisplay.tsx","components/Narratives/NarrativeContainer.tsx","components/SearchUsers/SearchUsers.tsx","components/SearchUsers/SearchUsersContainer.tsx","pages/Home.tsx","pages/HomeRedux.tsx","App.tsx","index.tsx"],"names":["module","exports","__webpack_require__","p","narrativeReducer","state","action","payload","type","console","log","_objectSpread","narrativeDataArray","reducer","baseReducer","rootReducer","kbaseUIStore","profileReducer","makeInitialStoreState","baseStoreState","makeBaseStoreState","store_objectSpread","wsID","permission","name","last_saved","users","narrative_detail","creator","profileView","user","username","realname","profile","userdata","affiliations","avatarOption","city","country","department","fundingSource","gravatarDefault","jobTitle","jobTitleOther","organization","postalCode","researchInterests","researchStatement","synced","gravatarHash","getBFFServiceUrl","_x","_x2","_getBFFServiceUrl","apply","this","arguments","_callee","token","baseURL","url","body","stringBody","response","responseJson","regenerator_default","a","wrap","_context","prev","next","id","method","version","params","module_name","JSON","stringify","fetch","mode","headers","Authorization","sent","json","abrupt","result","stop","fetchProfileAPI","_x3","_x4","_x5","_fetchProfileAPI","_callee2","bffServiceUrl","_context2","status","warn","error","t0","updateProfileAPI","_x6","_x7","_x8","_updateProfileAPI","_callee3","_context3","Content-Type","fetchNarrativesAPI","_x9","_x10","_x11","_fetchNarrativesAPI","_callee4","param","narratives","_context4","_callee5","orgs","_context5","_callee6","searchValue","res","_context6","filter","LOAD_NARRATIVES","LOAD_PROFILE","updateProfile","_ref2","Object","asyncToGenerator","mark","dispatch","getState","rootStore","auth","userAuthorization","app","config","baseUrl","Meta","TextArea","Profile","props","gravatar","userProfile","gravatarURL","title","started","ended","profileloading","profileloaded","orgloading","orgsloaded","Array","isArray","react_default","createElement","style","maxWidth","margin","alt","src","nouserpic","es_row","padding","gutter","col","span","card","loading","textAlign","userName","input","className","disabled","defaultValue","userID","map","interest","key","org","index","href","target","rel","autosize","readOnly","position","connect","editEnable","profileID","Narratives","data","colums","dataIndex","width","render","text","row","sorter","b","nameA","toUpperCase","nameB","day","date","delta","Date","now","dayString","toString","slice","dayAndTime","toFixed","dateDisplay","popover","placement","content","lastSavedA","lastSavedB","i","length","narrative","keys","push","narrativeDetail","table","columns","dataSource","mapStateToProps","Narratives_Narratives","narrativesloaded","Option","SearchUsers","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","mouseLeave","onChangeHandler","bind","assertThisInitialized","onSearchHandler","onMouseLeaveHandler","onMouseEnterHandler","value","_this2","_x15","_x16","_x17","_filteredUserAPI","filteredUserAPI","then","setState","window","open","es_select","allowClear","showSearch","placeholder","showArrow","onSearch","onChange","onMouseLeave","onMouseEnter","optionFilterProp","filterOption","inputValue","option","item","React","Component","components_SearchUsers_SearchUsers","TabPane","tabs","Home","searchOnATab","SearchUsersContainer","userProfileLoaded","narrativesLoaded","organizations","organizationsLoaded","setTitle","authUsername","loadProfile","_x12","_x13","_x14","_fetchOrgsOfProfileAPI","fetchOrgsOfProfileAPI","orgArr","forEach","loadNarratives","prevProps","prevState","defaultActiveKey","tab","ProfileContainer","Narratives_NarrativeContainer","ownProps","_state$app","rawParams","runtime","navigation","Error","_ref","publicNarratives","sharedNarratives","narrativeList","narrativePayload","Promise","all","concat","sendTitle","Content","store","createStore","compose","applyMiddleware","thunk","App","es","lib","required","layout","minHeight","backgroundColor","HomeRedux","ReactDOM","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.552d2c21.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nouserpic.9af42ba9.png\";","import { Action } from \"redux\";\nimport { StoreState } from \"../interfaces\";\nimport { NarrativeData } from \"../interfaces\";\n\ninterface narrativeFetchActionType {\n    type: string;\n    payload: Array<NarrativeData>\n}\n\nexport default function narrativeReducer(state: StoreState, action: narrativeFetchActionType):StoreState   {\n    const payload = action.payload;\n    switch (action.type) {\n        \n        case 'LOAD_NARRATIVES':\n            console.log('im in narrative reducer', payload)\n            return (\n                { ...state,\n                    narrativeDataArray: payload\n                }\n            );\n            \n        break;\n        \n        default: \n                return state;\n    }\n}","import { Action, Reducer } from \"redux\";\nimport { baseReducer } from \"@kbase/ui-lib\"; \nimport { BaseStoreState } from \"@kbase/ui-lib\"; \nimport { StoreState } from \"../interfaces\";\n\nconst reducer: Reducer<StoreState | undefined, Action> = (state: StoreState | undefined, action: Action) => {\n  const baseState = baseReducer(state as BaseStoreState, action);\n  // if (baseState) {\n  //   return baseState as StoreState;\n  // }\n  return baseState as StoreState;\n};\n\nexport default reducer;","import { Action, Reducer } from 'redux';\nimport narrativeReducer from './narrative_reducers';\nimport profileReducer from './profile_reducers';\nimport reducer from './reducer';\nimport { StoreState, NarrativeData, UserProfileService } from  \"../interfaces\";\n\ninterface narrativeFetchActionType {\n  type: string;\n  payload: Array<NarrativeData>\n}\ninterface profileActionType {\n    type: string;\n    payload: UserProfileService;\n}\n//TODO:AKIYO convert this to combine reducers\n\n\nconst rootReducer: Reducer<StoreState | undefined, Action> = (state: StoreState | undefined, action: Action) => {\n\n  // Inital combine state created by store is loaded first \n  const kbaseUIStore = reducer(state as StoreState, action);\n  // if state doesn't load for whatever the reason possibly could be \n  if (!state) {\n    console.log('return state ')\n    return state // honestly I don't know what this returns\n  }\n  \n  // when reducer is creating KbaseUIStore \n  if (kbaseUIStore) {\n    return kbaseUIStore as StoreState;\n  } \n  else {\n      console.log('Reducer', state, action)\n    // when actions from app needs specific reducers\n    switch(action.type) {\n        case \"LOAD_NARRATIVES\": \n            return narrativeReducer(state, action as narrativeFetchActionType);\n        case \"LOAD_PROFILE\": \n            return profileReducer(state, action as profileActionType);\n        \n      default:\n        return state;\n    }\n  }\n}\n\n\nexport default rootReducer;\n","import { StoreState, UserProfileService } from \"../interfaces\";\n\n\ninterface profileActionType {\n    type: string;\n    payload: UserProfileService;\n}\n\nexport default function profileReducer(state:StoreState, action: profileActionType): StoreState {\n    const payload = action.payload;\n    console.log('profile reducers', action)\n    // switch (action.type) {\n    //     case 'LOAD_PROFILE':\n    //         console.log('in LOAD profile reducer', payload);\n    //         // return (\n    //         //     {\n    //         //         ...state,\n    //         //         profile: payload\n    //         //     }\n    //         // )\n    //         break;\n\n    //     default:\n            return state;\n    // }\n\n}","import { createStore, compose, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\n\nimport { makeBaseStoreState } from \"@kbase/ui-lib\";\nimport { StoreState,  NarrativeData, UserProfileService } from './interfaces';\nimport rootReducer from \"./reducers/index\";\n\n\n// When app starts, this runs first to set the initial state.\nexport function makeInitialStoreState(): StoreState {\n    const baseStoreState = makeBaseStoreState();\n    // setting initial empty narrative state\n    const narrativePreloadedState: Array<NarrativeData>  = [{\n        wsID: '',\n        permission: '',\n        name: '',\n        last_saved: 0,\n        users: {},\n        narrative_detail: { creator: '' }\n    }];\n    // \n    const profileViewInitialState: UserProfileService = {\n        \n            user: {\n                username: '',\n                realname: ''\n            },\n            profile: {\n                userdata: {\n                    affiliations: [],\n                    avatarOption: '',\n                    city: '',\n                    country: '',\n                    department: '',\n                    fundingSource: '',\n                    gravatarDefault: '',\n                    jobTitle: '',\n                    jobTitleOther: '',\n                    organization: '',\n                    postalCode: '',\n                    researchInterests: [],\n                    researchStatement: '', \n                    state: '', \n                },\n                synced: {\n                    gravatarHash: ''\n                }\n            }\n    }\n    console.log('baseStoreState', baseStoreState)\n    return {\n        // ...baseStoreState, userProfileApp:{ narrativeDataArray: narrativePreloadedState }\n        ...baseStoreState,  narrativeDataArray: narrativePreloadedState, profileView: profileViewInitialState\n    };\n}\nexport function createReduxStore() {\n    return createStore(rootReducer, makeInitialStoreState(), compose(applyMiddleware(thunk)));\n}","import { UserProfileService, ProfileData} from \"../redux/interfaces\";\ninterface foo {\n\n    userdata: ProfileData;\n\n}\nexport async function getBFFServiceUrl(token: string, baseURL: string) {\n    // TODO: for dev, the baseUrl will be whatever works for the CRA workflow, which is ''.\n    // baseURL = 'https://ci.kbase.us/services'; // for dev\n    let url = baseURL + '/services/service_wizard';\n    const body = {\n        id: 0,\n        method: 'ServiceWizard.get_service_status',\n        version: '1.1',\n        params: [\n            {\n                module_name: 'bff',\n                version: null\n            }\n        ]\n    };\n    const stringBody = JSON.stringify(body);\n    const response = await fetch(url, {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n            Authorization: token\n        },\n        body: stringBody\n    });\n    const responseJson = await response.json();\n    return responseJson.result[0]['url'];\n}\n\n/**\n * Return profile data\n * @param id profile id\n * @param token KBase session cookie\n * @param baseUrl hostname\n */\nexport async function fetchProfileAPI(id: string, token: string, baseURL: string) {\n    const bffServiceUrl = await getBFFServiceUrl(token, baseURL);\n    let url = bffServiceUrl + '/fetchUserProfile/' + id;\n    const response = await fetch(url, {\n        method: 'GET'\n    });\n    if (response.status === 404) {\n        console.warn('404 response:', response);\n    } else if (response.status === 500) {\n        console.error('500 response:', response);\n        return;\n    }\n    try {\n        const profile = await response.json();\n        return profile;\n    } catch (err) {\n        console.error('profile fetch failed', response);\n    }\n}\n\n/**\n * update profile \n * method \"UserProfile.update_user_profile\" takes top level key of profile object. \n * @param token \n * @param baseURL \n * @param userdata \n */\nexport async function updateProfileAPI(token: string, baseURL: string, userdata:ProfileData) {\n    \n// export async function updateProfileAPI(token: string, baseURL: string, updatedUserProfleString:string) {\n    const body = {\n        version: '1.1',\n        method: 'UserProfile.update_user_profile',\n        params: [ {profile: {user: {realname: \"Akiyo Marukawa\", username: \"amarukawa\"}, userdata: {userdata}}}]\n    };\n    const stringBody = JSON.stringify(body);\n    //TODO: Akiyo - remove this after testing\n    baseURL = 'https://ci.kbase.us';\n    const url = baseURL + '/services/user_profile/rpc';\n    const response = await fetch(url, {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n            Authorization: token,\n            'Content-Type': 'application/json'\n        },\n        body: stringBody\n    });\n    if( response.status === 500) {\n        console.error('500 response:', response);\n        return;\n    }\n}\n\n/**\n * Return list of narratives\n * @param param shared/mine/public\n * @param token kbase session cookie\n */\nexport async function fetchNarrativesAPI(param: string, token: string, baseURL: string) {\n    const bffServiceUrl = await getBFFServiceUrl(token, baseURL);\n    let url = bffServiceUrl + '/narrative_list/' + param;\n    const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n            Authorization: token\n        }\n    });\n    if (response.status === 500) {\n        console.error('Fetch Narratives 500 response:', response);\n        return;\n    }\n    try {\n        const narratives = await response.json();\n        return narratives;\n    } catch (err) {\n        console.error('fetch narratives failed', response);\n    }\n}\n\n/**\n * returns list of orgs that profile and logged in user are both associated with.\n * @param id id of the profile\n * @param token kbase session cookie\n */\nexport async function fetchOrgsOfProfileAPI(id: string, token: string, baseURL: string) {\n    const bffServiceUrl = await getBFFServiceUrl(token, baseURL);\n    const url = bffServiceUrl + '/org_list/' + id;\n    const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n            Authorization: token\n        }\n    });\n    if (response.status === 500) {\n        console.error('500 response:', response);\n        return;\n    }\n    try {\n        const orgs = await response.json();\n        return orgs;\n    } catch (err) {\n        console.error('fetch org failed', response);\n    }\n}\n\n/**\n * returns list of users that are filtered by search values\n * @param searchValue search values\n * @param token kbase session cookie\n */\nexport async function filteredUserAPI(searchValue: string, token: string, baseURL: string) {\n    const body = {\n        version: '1.1',\n        method: 'UserProfile.filter_users',\n        params: [{ filter: searchValue }]\n    };\n    const stringBody = JSON.stringify(body);\n    const url = baseURL + '/services/user_profile/rpc';\n    const response = await fetch(url, {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n            Authorization: token,\n            'Content-Type': 'application/json'\n        },\n        body: stringBody\n    });\n    if (response.status === 500) {\n        console.error('500 response:', response);\n        return;\n    }\n    try {\n        const res = await response.json();\n        // if you try to: return response.json, it will get error below\n        // Unhandled Rejection (TypeError): Failed to execute 'json' on 'Response': body stream is locked\n        // but assiging it to a vairable somehow magically works.\n        return res;\n    } catch (err) {\n        console.error('fetch search users failed', response);\n    }\n}\n","import { ThunkDispatch } from \"redux-thunk\";\nimport { StoreState, NarrativeData } from \"../interfaces\";\nimport { AnyAction} from 'redux';\nimport { fetchNarrativesAPI } from '../../util/API';\n\n\nconst LOAD_NARRATIVES = 'LOAD_NARRATIVES';\n\n/**\n * Fetch narratives dependeing on the filter.\n * filter is one of following: \"mine\", \"shared\", \"public\", \"they\" <-- gender-neutral singular they\n * \"they\" is when logged-in user is viewing other user's profile. \n * \"they\" - fetch both \"public\" and \"shared\" profile and fileter response with profileID\n * @param filter \n */\nexport function loadNarratives (filter:string, profileID: string) {\n    // ThunkDispatch<RootState(Store), ExtraArg, Action>;\n    return async function (dispatch:ThunkDispatch<StoreState, void, AnyAction>, getState: () => StoreState) {\n        const rootStore = getState();\n        if(rootStore.auth.userAuthorization !== null){ \n            const token = rootStore.auth.userAuthorization.token;\n            const baseURL = rootStore.app.config.baseUrl;\n\n            //TODO: AKIYO replace ci.kbase with baseURL\n            switch(filter) {\n                case \"they\":\n                    const publicNarratives = fetchNarrativesAPI('public', token, 'https://ci.kbase.us/');\n                    const sharedNarratives = fetchNarrativesAPI('shared', token, 'https://ci.kbase.us/');\n                    let narrativeList = [];\n                    let narrativePayload:Array<NarrativeData> = [];\n                    Promise.all([publicNarratives, sharedNarratives]).then((response) => {\n                        // generate combined narrative list \n                        if ( typeof response[0] !== 'undefined' && typeof response[1] !== 'undefined') {\n                            narrativeList = response[0].concat(response[1]);\n                        } else if (typeof response[0] === 'undefined' && typeof response[1] !== 'undefined' ) {\n                            // if public narrative fetch came back empty, there is something major wrong happened\n                            console.error('error occuerred during fetching narratives.');\n                            narrativeList = response[1];\n                        } else if (typeof response[0] !== 'undefined' && typeof response[1] === 'undefined' ) {\n                            narrativeList = response[0];\n                        } else {\n                            // if public narrative fetch came back empty, there is something major wrong happened\n                            console.error('error occuerred during fetching narratives.');\n                            narrativeList  = [\n                                {\n                                    wsID: '',\n                                    permission: '',\n                                    name: 'Something went wrong. Please check console for error messages.',\n                                    last_saved: 0,\n                                    users: {},\n                                    narrative_detail: { creator: '' }\n                                }\n                            ]\n                        }\n                        \n                        for (let i = 0; i < narrativeList.length; i +=1) {\n  \n                            if( narrativeList[i].narrative_detail.creator ===  profileID) {\n                                narrativePayload.push(narrativeList[i]);\n                            }\n                        }\n                        \n                        dispatch({ type: LOAD_NARRATIVES, payload: narrativePayload })     \n                                \n                    })\n                    break;\n                case 'mine':\n                case 'shared':\n                case 'public':\n                    const response = await fetchNarrativesAPI(filter, token, 'https://ci.kbase.us/');\n\n                    if(typeof response !== 'undefined') {\n                        // console.log(\"rootstore\", rootStore)\n                        dispatch({ type: LOAD_NARRATIVES, payload: response })\n                    } else {\n                        let fetchFailed =  [\n                            {\n                                wsID: '',\n                                permission: '',\n                                name: 'Something went wrong. Please check console for error messages.',\n                                last_saved: 0,\n                                users: {},\n                                narrative_detail: { creator: '' }\n                            }\n                        ]\n                        dispatch({ type: LOAD_NARRATIVES, payload: fetchFailed})\n                    }\n                    break;\n\n            }            \n                        \n        } else {\n            console.error(\"I don't think this even should happen, but if it did, I must ask 'what kind of horrible bugs did you you create?'\")\n        }\n    }\n}\n","import { ThunkDispatch } from \"redux-thunk\";\nimport { StoreState, UserProfileService } from \"../interfaces\";\nimport { AnyAction } from 'redux';\nimport { fetchProfileAPI, updateProfileAPI } from '../../util/API';\nimport { sendTitle } from '@kbase/ui-lib';\n\nconst LOAD_PROFILE = 'LOAD_PROFILE';\n\n        // fetchProfileAPI().then((response) => {\n        //     console.log('user profile response', response)\n        //     if (typeof response !== 'undefined') {\n        //         if (this.props.username) {\n        //             this.props.setTitle('User Profile for ' + response.user.realname);\n        //         }\n        //         this.setState({\n        //             userName: {\n        //                 name: response.user.realname,\n        //                 userID: response.user.username\n        //             },\n        //             gravatarHash: response.profile.synced.gravatarHash,\n        //             userProfile: response.profile.userdata,\n        //             userProfileLoaded: true\n        //         });\n        //     } else {\n        //         // something went wrong during fetching.\n        //         this.setState({\n        //             userName: {\n        //                 name: 'Something went wrong. Please check console for error messages..',\n        //                 userID: ''\n        //             }\n        //         });\n        //     }\n        // });\n\n\n/**\n * fetch user profile\n *  @param {string} id  profile ID\n */\nexport function loadProfile(profileID:string) {\n    return async function (dispatch:ThunkDispatch<StoreState, void, AnyAction>, getState:() => StoreState ) {\n        const rootStore = getState();\n        if(rootStore.auth.userAuthorization !== null) {\n            const token = rootStore.auth.userAuthorization.token;\n            const baseURL = rootStore.app.config.baseUrl;\n            let payload:any;\n            let response:UserProfileService = await fetchProfileAPI(profileID, token, baseURL);\n            if (typeof response !== 'undefined') {\n                console.log(\"in profileAction loadProfile\", response)\n                if (response.user.username !== rootStore.auth.userAuthorization.username) {\n                    dispatch(sendTitle('User Profile for ' + response.user.realname));\n                }\n                // // shape response to profile\n                payload = {\n                    userName: {\n                        userID: response.user.username,\n                        username: response.user.realname\n                    },\n                    userProfile: {\n                        department: response.profile.userdata.department,\n                        city: response.profile.userdata.city,\n                        state: response.profile.userdata.state,\n                        postalCode: response.profile.userdata.postalCode,\n                        country: response.profile.userdata.country,\n                        affiliations: response.profile.userdata.affiliations,\n                        researchStatement: response.profile.userdata.researchStatement,\n                        jobTitle: response.profile.userdata.jobTitle,\n                        jobTitleOther: response.profile.userdata.jobTitleOther,\n                        researchInterests: response.profile.userdata.researchInterests,\n                        fundingSource: response.profile.userdata.fundingSource,\n                        gravatarDefault: response.profile.userdata.gravatarDefault,\n                        avatarOption: response.profile.userdata.avatarOption\n                    },\n                    gravatarHash: response.profile.synced.gravatarHash\n                }\n\n                // payload = profile;\n            } else {\n                payload = {\n                    userName: {\n                        name: 'Something went wrong. Please check console for error messages..',\n                        userID: ''\n                    }\n                }\n            }\n            \n            dispatch({ type: LOAD_PROFILE, payload: payload});\n\n        }\n    }\n}\n\nexport function updateProfile(profile:any) {\n    return async function (dispatch:ThunkDispatch<StoreState, void, AnyAction> , getState:() => StoreState ) {\n        const rootStore = getState();\n        if(rootStore.auth.userAuthorization !== null) {\n            const token = rootStore.auth.userAuthorization.token;\n            const baseURL = rootStore.app.config.baseUrl;\n            updateProfileAPI(token, baseURL, profile);\n\n            // humm it does update profile data in the database, but it's not going to call\n            // new fetch \n            // also, i need to set something that shows user it's been udpated and \n            // still fetching the new updated profile data\n        }\n    }\n}","import React from 'react';\nimport { UserName, ProfileData, OrgProp } from '../../redux/interfaces';\nimport { Row, Col, Card, Input } from 'antd';\nimport nouserpic from '../../assets/nouserpic.png';\nconst { Meta } = Card;\nconst { TextArea } = Input;\n\n/**\n *  Profile.tsx is a view component\n *  Parent componenet - pages/Home.tsx\n *\n */\n\ninterface Props {\n    baseURL: string;\n    token: string;\n    userName: UserName;\n    editEnable: Boolean;\n    userProfile: ProfileData;\n    orgs: Array<OrgProp>;\n    gravatarHash: string;\n    profileloaded: Boolean;\n    orgsloaded: Boolean;\n}\n\n/**\n * Returns profile component.\n * @param props\n */\nfunction Profile(props: Props) {\n    // console.log('profile props', props)\n    const profile = props.userProfile;\n    // Set initial value to props for initial render and no-data\n    let jobTitle = '';\n    let gravatarURL = '';\n    let affiliations = [\n        {\n            title: '',\n            organization: '',\n            started: '',\n            ended: ''\n        }\n    ];\n    let researchInterests: Array<string> = [];\n    let orgs = [\n        {\n            name: '',\n            url: ''\n        }\n    ];\n    let profileloading = true;\n    let gravatar;\n    if (props.profileloaded) {\n        profileloading = false;\n    }\n    let orgloading = true;\n    if (props.orgsloaded) {\n        orgloading = false;\n    }\n    // Set affiliations\n    if (typeof profile.affiliations !== 'undefined') {\n        affiliations = profile.affiliations;\n    }\n\n    // Set researchInterests\n    if (typeof profile.researchInterests !== 'undefined' && Array.isArray(profile.researchInterests)) {\n        researchInterests = profile.researchInterests;\n    }\n    // Set jobTitle\n    if (profile.jobTitle === 'Other' && typeof profile.jobTitle !== 'undefined') {\n        jobTitle = profile.jobTitleOther;\n    } else if (typeof profile.jobTitle !== 'undefined') {\n        jobTitle = profile.jobTitle;\n    } else {\n        jobTitle = '';\n    }\n    // set orgs\n    if (props.orgs) {\n        orgs = props.orgs;\n    }\n    // Set gravatarURL\n    if (profile['avatarOption'] === 'silhoutte' || !props.gravatarHash) {\n        gravatar = <img style={{ maxWidth: '100%', margin: '8px 0px' }} alt=\"avatar\" src={nouserpic} />;\n    } else if (props.gravatarHash) {\n        gravatarURL =\n            'https://www.gravatar.com/avatar/' + props.gravatarHash + '?s=300&amp;r=pg&d=' + profile.gravatarDefault;\n        gravatar = <img style={{ maxWidth: '100%', margin: '8px 0px' }} alt=\"avatar\" src={gravatarURL} />;\n    }\n\n    return (\n        <Row style={{ padding: 16 }}>\n            <Row gutter={8}>\n                <Col span={8}>\n                    <Card loading={profileloading} style={{ margin: '8px 0px', textAlign: 'center' }}>\n                        {/* <img style={{ maxWidth: '100%', margin: '8px 0px' }} alt='avatar' src={ gravatarURL } /> */}\n                        {gravatar}\n                    </Card>\n                    <Card\n                        loading={profileloading}\n                        style={{ margin: '8px 0px', textAlign: 'left' }}\n                        title={props.userName.name}\n                    >\n                        <Meta title=\"User ID\" />\n                        <Input className=\"clear-disabled\" disabled defaultValue={props.userName.userID}/>\n                        <Meta title=\"Position\" />\n                        <Input className=\"clear-disabled\" disabled defaultValue={jobTitle}/>\n                        <Meta title=\"Department\" />\n                        <Input className=\"clear-disabled\" disabled defaultValue={profile.department} />\n                        <Meta title=\"Organization\" />\n                        <Input className=\"clear-disabled\" disabled defaultValue={profile.organization}/>\n                        <Meta title=\"Location\" />\n                        <Input className=\"clear-disabled\" disabled defaultValue={profile.city}/>\n                        <Input className=\"clear-disabled\" disabled defaultValue={profile.state}/>\n                        <Input className=\"clear-disabled\" disabled defaultValue={profile.country}/>\n                        <Meta title=\"Primary Funding Source\" />\n                        <Input className=\"clear-disabled\" disabled defaultValue={profile.fundingSource}/>\n                    </Card>\n                </Col>\n                <Col span={16}>\n                    <Row gutter={8}>\n                        <Col span={12}>\n                            <Card className=\"card-with-height\" loading={profileloading} style={{ margin: '8px 0px' }} title=\"Research Interests\">\n                                <ul style={{ textAlign: 'left' }}>\n                                    {researchInterests.map((interest) => (\n                                        <li key={interest}>{interest}</li>\n                                    ))}\n                                </ul>\n                            </Card>\n                        </Col>\n                        <Col span={12}>\n                            <Card className=\"card-with-height\" loading={orgloading} style={{ margin: '8px 0px' }} title=\"Organizations\">\n                                <ul style={{ textAlign: 'left' }}>\n                                    {orgs.map((org, index) => (\n                                        <li key={index}>\n                                            <a href={org.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                                                {org.name}\n                                            </a>\n                                        </li>\n                                    ))}\n                                </ul>\n                            </Card>\n                        </Col>\n                    </Row>\n                    <Row>\n                        {/* TODO:AKIYO FIX - when the box is very small it doesn't break or hide word */}\n                        <Card\n                            loading={profileloading}\n                            style={{ margin: '8px 0px' }}\n                            title=\"Research or Personal Statement\"\n                        >\n                            <TextArea autosize readOnly className='clear-disabled' defaultValue={profile.researchStatement}/>\n                        </Card>\n                        <Card loading={profileloading} style={{ margin: '8px 0px' }} title=\"Afflications\">\n                            <ul style={{ textAlign: 'left' }}>\n                                {affiliations.map((position, index) => (\n                                    <li key={index}>\n                                        {position.title} @ {position.organization}, {position.started} -{' '}\n                                        {position.ended}{' '}\n                                    </li>\n                                ))}\n                            </ul>\n                        </Card>\n                    </Row>\n                </Col>\n            </Row>\n        </Row>\n    );\n}\n\nexport default Profile;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Action, Dispatch } from 'redux';\n\nimport { OrgProp, UserName, ProfileData, StoreState } from '../../redux/interfaces';\nimport {  updateProfile } from '../../redux/actions';\nimport Profile from './Profile';\n\n\ninterface Props {\n    baseURL: string;\n    token: string;\n    userName: UserName;\n    editEnable: Boolean;\n    userProfile: ProfileData;\n    orgs: Array<OrgProp>;\n    gravatarHash: string;\n    profileloaded: Boolean;\n    orgsloaded: Boolean;\n}\n\ninterface DispatchProps {\n    updateProfile: (profileID: string) => void;\n}\n\n\ninterface OwnProps {}\n\nfunction mapStateToProps(state: StoreState): Props {\n    console.log(\"ProfileContainer mapStateToProp\", state);\n    return {\n        baseURL: \"\",\n        token: \"\",\n        userName: {\n            userID: \"\",\n            name:''\n        },\n        editEnable:false,\n        userProfile: {\n            organization: '',\n            department: '',\n            city: '',\n            state: '',\n            postalCode: '',\n            country: '',\n            affiliations: [],\n            researchStatement: '',\n            jobTitle: '',\n            jobTitleOther: '',\n            researchInterests: [],\n            fundingSource: '',\n            gravatarDefault: '',\n            avatarOption: ''\n        },\n        orgs: [],\n        gravatarHash:\"\",\n        profileloaded: true,\n        orgsloaded: true\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>): DispatchProps {\n    return {\n        updateProfile: (profileID: string) => {\n            return dispatch(updateProfile(profileID) as any);\n        }\n    }\n}\n\n// function ProfileContainer(props:Props) {\n    \n//     return (\n//         <Profile\n//             baseURL={props.baseURL}\n//             token={props.token}\n//             userName={props.userName}\n//             editEnable={props.editEnable}\n//             userProfile={props.userProfile}\n//             orgs={props.orgs}\n//             gravatarHash={props.gravatarHash}\n//             profileloaded={props.profileloaded}\n//             orgsloaded={props.orgsloaded}\n//         />\n//     )\n\n// }\nexport default connect<Props, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps, \n    mapDispatchToProps\n    )(Profile);\n","/**\n *  Narrative.tsx is a view component\n *  Parent componenet - pages/Home.tsx\n *\n */\nimport React from 'react';\nimport { dateDisplay } from '../../util/dateDisplay'; // date format\nimport { Table, Popover } from 'antd';\nimport { Narrative_detail, NarrativeData } from '../../redux/interfaces'; //interface\n\ninterface TableData {\n    key: string;\n    wsID: string;\n    name: string;\n    last_saved: number;\n}\n\ninterface Props {\n    narratives: Array<NarrativeData>;\n    narrativesloaded: Boolean;\n}\n\n/**\n * Returns a component with list of narratives in a table.\n * @param props\n */\nfunction Narratives(props: Props) {\n    console.log(\"Narrative props\", props)\n    let data: Array<TableData> = [];\n    let loading = false;\n    // let loading = true;\n    // if (props.narrativesloaded) {\n    //     loading = false;\n    // }\n    // initialize data for the table to be an empty array.\n    const colums = [\n        {\n            title: 'Title',\n            dataIndex: 'name',\n            width: 350,\n            key: 'wsID',\n            render: (text: string, row: TableData) => {\n                let url = '/narrative/' + row.wsID;\n                return (\n                    <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n                        {text}\n                    </a>\n                );\n            },\n            sorter: (a: TableData, b: TableData) => {\n                let nameA = a.name.toUpperCase();\n                let nameB = b.name.toUpperCase();\n                if (nameA < nameB) {\n                    return -1;\n                }\n                if (nameA > nameB) {\n                    return 1;\n                }\n                return 0;\n            }\n        },\n        {\n            title: 'Last Saved',\n            dataIndex: 'last_saved',\n            width: 190,\n            render: (text: string, row: TableData) => {\n                let day = dateDisplay(row.last_saved);\n                return (\n                    <Popover placement=\"right\" content={day[0]}>\n                        {day[1]}\n                    </Popover>\n                );\n            },\n            sorter: (a: TableData, b: TableData) => {\n                let lastSavedA = a.last_saved;\n                let lastSavedB = b.last_saved;\n                if (lastSavedA < lastSavedB) {\n                    return 1;\n                }\n                if (lastSavedA > lastSavedB) {\n                    return -1;\n                }\n                return 0;\n            }\n        }\n    ];\n\n    for (let i = 0; i < props.narratives.length; i += 1) {\n        let narrative = props.narratives[i];\n        if (narrative.permission === 'r' || narrative.permission === 'n') {\n            if (Object.keys(narrative.users).length <= 0) {\n                data.push({\n                    key: narrative.wsID,\n                    wsID: narrative.wsID,\n                    name: narrative.name,\n                    last_saved: narrative.last_saved\n                });\n            } else {\n                data.push({\n                    key: narrative.wsID,\n                    wsID: narrative.wsID,\n                    name: narrative.name,\n                    last_saved: narrative.last_saved\n                });\n            }\n        } else {\n            const narrativeDetail: Narrative_detail = narrative['narrative_detail'];\n            let users = '';\n            for (let user in narrative.users) {\n                if (user !== narrativeDetail.creator) users = users + user + ', ';\n            }\n            data.push({\n                key: narrative.wsID,\n                wsID: narrative.wsID,\n                name: narrative.name,\n                last_saved: narrative.last_saved\n            });\n        }\n    }\n\n    return (\n        <Table<TableData>\n            style={{ width: '85%', margin: 'auto' }}\n            columns={colums}\n            dataSource={data}\n            loading={loading}\n        />\n    );\n}\n\nexport default Narratives;\n","/**\n * returns array of date in MMM DD YYY HH:MM:SS and one of below:\n * less than a min ago, # hours ago, # days ago, day: MMM DD YYYY (if it's more than a month)\n * @param {string} date date format\n * \n */\nexport function dateDisplay(date: number): Array<string> {\n    let delta = (Date.now() - +new Date(date))/1000000 ;\n    let dayString = (new Date(date)).toString();\n    // date format: MMM DD YYYY\n    let day = dayString.slice(4, 7) + ' ' + dayString.slice(8, 10) + ' ' + dayString.slice(11, 15);\n    //  date format: MMM DD YYYY HH:MM:SS\n    let dayAndTime = day + ' ' + dayString.slice(16, 24);\n    if( delta >= 2628 ) {\n        // more than a month ago\n        return [dayAndTime, day];\n    } else if( delta < 2628 && delta >= 86.4) {\n        // less than a month ago, but more than a day ago\n        let days = (delta/(86.4)).toFixed(0);\n        return [dayAndTime, days + ' days ago'];\n    }\n    else if( delta < 86.4 && delta >= 3.6) {\n        return [day, (delta/3.6).toFixed(0) + ' hours ago'];\n    } else if(delta < 3.6 && delta >= 0.06) {\n        return [dayAndTime, ((delta)*10).toFixed(0) + ' min ago'];\n    } else {\n        return [dayAndTime, 'less than a min ago']\n    }\n};","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { StoreState } from '../../redux/interfaces';\nimport Narratives from './Narratives';\n\n\n\nfunction mapStateToProps (state: StoreState) { \n    console.log(\"narrativeContainer\", state)\n    let narratives = state.narrativeDataArray\n    // Since this component is just a redux wrapper \n    // and not modifying state to make component props\n    // simply return state as props\n    return state \n}\n//TODO: AKIYO narrative loading \nfunction NarrativeContainer (mapStateToProps:StoreState) {\n    console.log('load NarrativeContainer', mapStateToProps.narrativeDataArray)\n    return (\n        <Narratives \n            narratives={mapStateToProps.narrativeDataArray} \n            narrativesloaded={true}\n        />\n    )\n}\n\nexport default connect(mapStateToProps)(NarrativeContainer);","import React from 'react';\nimport { Select } from 'antd';\nimport { filteredUserAPI } from '../../util/API';\nimport { UsernameRealname } from '../../redux/interfaces';\nconst { Option } = Select;\n\n\ninterface State {\n    data: Array<UsernameRealname>;\n    mouseLeave: boolean;\n}\n\ninterface Props {\n    token: string;\n    baseURL: string;\n}\n\ninterface Response {\n    version: string;\n    result: Array<any>;\n}\n\n/**\n * View component with user search feature.\n * @param props\n */\nclass SearchUsers extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            data: [],\n            mouseLeave: false\n        };\n        this.onChangeHandler = this.onChangeHandler.bind(this);\n        this.onSearchHandler = this.onSearchHandler.bind(this);\n        this.onMouseLeaveHandler = this.onMouseLeaveHandler.bind(this);\n        this.onMouseEnterHandler = this.onMouseEnterHandler.bind(this);\n    }\n\n    onSearchHandler(value: string): void {\n        if (value.length > 2 && this.state.mouseLeave !== true) {\n            filteredUserAPI(value, this.props.token, this.props.baseURL).then((response: Response) => {\n                if (typeof response !== 'undefined') {\n                    this.setState({ data: response['result'][0] });\n                } else {\n                    this.setState({\n                        data: [{ username: 'error', realname: 'Something went wrong. Try again later.' }]\n                    });\n                }\n            });\n        } else {\n            return;\n        }\n    }\n    onMouseLeaveHandler(): void {\n        this.setState({ mouseLeave: true });\n    }\n    onMouseEnterHandler(): void {\n        this.setState({ mouseLeave: false });\n    }\n    onChangeHandler(value: string): void {\n        if (value !== 'error' && typeof value !== 'undefined') {\n            let url = '/#user/' + value;\n            window.open(url, '_blank');\n        }\n    }\n\n    render() {\n        let data = this.state.data;\n        return (\n            <Select\n                mode=\"single\"\n                style={{ width: 250 }}\n                allowClear\n                showSearch\n                placeholder=\"enter more than 3 characters\"\n                showArrow={false}\n                onSearch={this.onSearchHandler}\n                onChange={this.onChangeHandler}\n                onMouseLeave={this.onMouseLeaveHandler}\n                onMouseEnter={this.onMouseEnterHandler}\n                optionFilterProp=\"children\"\n                filterOption={(inputValue, option) => {\n                    return true;\n                }}\n            >\n                {data.map((item) => {\n                    return (\n                        <Option key={item['username']}>\n                            {item['realname']} ({item['username']})\n                        </Option>\n                    );\n                })}\n            </Select>\n        );\n    }\n}\n\nexport default SearchUsers;\n","import React from 'react';\nimport { connect} from 'react-redux';\n\nimport SearchUsers from './SearchUsers';\n\ninterface AppState {\n    app: {\n        config: {\n            baseUrl: string;\n        }\n    };\n    auth: AuthData;\n}\n\ninterface AuthData {\n    userAuthorization: {\n        realname: string;\n        roles: Array<string>;\n        token: string;\n        username: string;\n    }\n}\n\nconst mapStateToProps = (state:AppState) => {\n    // Since this component is just a redux wrapper \n    // and not modifying state to make component props\n    // simply return state asd props\n    return state\n}\nfunction SearchUsersRedux(mapStateToProps:AppState) {\n    return (\n        <SearchUsers token={mapStateToProps.auth.userAuthorization.token} baseURL={mapStateToProps.app.config.baseUrl}/>\n    )\n}\n\nexport default connect(mapStateToProps)(SearchUsersRedux);","import React from 'react';\n\nimport { Tabs } from 'antd';\n\nimport ProfileContainer from '../components/Profile/ProfileContainer';\nimport NarrativeContainer from '../components/Narratives';\nimport { NarrativeData, OrgProp, Org, ProfileData,  UserName } from '../redux/interfaces';\nimport SearchUsersContainer from '../components/SearchUsers/SearchUsersContainer';\nimport { fetchOrgsOfProfileAPI, fetchProfileAPI } from '../util/API';\n\n\nconst TabPane = Tabs.TabPane;\n/**\n * Class component that keeps states for all the variables that viewer/child components needs.\n * This can converted into Redux if needed.\n * Parent component App.tsx\n */\n\n// add Narrative_detail if needed. Currently, data in the object is not used - Akiyo.\nconsole.log(\"home home home \")\ninterface HomeState {\n    userName: UserName;\n    userProfile: ProfileData;\n    userProfileLoaded: Boolean;\n    editEnable: Boolean; // profile edit enable \n    narrativesLoaded: Boolean;\n    organizations: Array<OrgProp>;\n    organizationsLoaded: Boolean;\n    gravatarHash: string;\n}\n\n\nexport interface HomeProps {\n    token: string;\n    authUsername: string;\n    username: string | null;\n    baseURL: string;\n    setTitle: (title: string) => void;\n    loadNarratives: (filter: string, profileID: string) => void;\n    loadProfile: (profileID: string) => void;\n    updateProfile: (profileID: string) => void;\n}\n\nclass Home extends React.Component<HomeProps, HomeState> {\n    constructor(props: HomeProps) {\n        super(props);\n        this.state = {\n            userName: {\n                name: '',\n                userID: ''\n            },\n            editEnable: false,\n            userProfile: {\n                organization: '',\n                department: '',\n                city: '',\n                state: '',\n                postalCode: '',\n                country: '',\n                affiliations: [],\n                researchStatement: '',\n                jobTitle: '',\n                jobTitleOther: '',\n                researchInterests: [],\n                fundingSource: '',\n                gravatarDefault: '',\n                avatarOption: ''\n            },\n            userProfileLoaded: false,\n            narrativesLoaded: false,\n            organizations: [],\n            organizationsLoaded: false,\n            gravatarHash: ''\n        };\n    }\n\n\n    componentDidMount() {\n        console.log('homeprops in compDidMount', this.props)\n        let username;\n        if (this.props.username) {\n            username = this.props.username;\n            this.props.setTitle('User Profile for ' + username);\n        } else {\n            username = this.props.authUsername;\n            this.props.setTitle('Your User Profile');\n            this.setState({ editEnable: true })\n        }\n\n        this.props.loadProfile(username);\n        /**\n         * fetch user profile\n         *  @param {string} id  profile ID\n         */\n        fetchProfileAPI(username, this.props.token, this.props.baseURL).then((response) => {\n            console.log('user profile response', response)\n            if (typeof response !== 'undefined') {\n                // if (this.props.username) {\n                //     this.props.setTitle('User Profile for ' + response.user.realname);\n                // }\n                this.setState({\n                    userName: {\n                        name: response.user.realname,\n                        userID: response.user.username\n                    },\n                    gravatarHash: response.profile.synced.gravatarHash,\n                    userProfile: response.profile.userdata,\n                    userProfileLoaded: true\n                });\n            } else {\n                // something went wrong during fetching.\n                this.setState({\n                    userName: {\n                        name: 'Something went wrong. Please check console for error messages..',\n                        userID: ''\n                    }\n                });\n            }\n        });\n\n        /**\n         * fetch orgs that user blongs to the profile\n         *  @param {string} id  profile ID\n         */\n        fetchOrgsOfProfileAPI(username, this.props.token, this.props.baseURL).then((response: Array<Org>) => {\n            let orgArr: Array<OrgProp> = [];\n            if (typeof response !== 'undefined') {\n                response.forEach((org) => {\n                    orgArr.push({ name: org.name, url: this.props.baseURL + '/#org/' + org.id });\n                });\n                this.setState({\n                    organizations: orgArr,\n                    organizationsLoaded: true\n                });\n            } else {\n                // something went wrong during fetching.\n                this.setState({\n                    organizations: [\n                        { name: 'Something went wrong. Please check console for error messages.', url: '' }\n                    ],\n                    organizationsLoaded: true\n                });\n            }\n        });\n\n        /**\n         * Returns narratives that shows in Narrative table.\n         *\n         *\n         * Below logic determines which set of narratives needs to be fetched.\n         * if the viewing profile userid is not the logged in user,\n         * then fetch all of shared and public narrative and filter with the viewing profile userid.\n         */\n        if (typeof this.props.username === 'undefined'|| typeof this.props.authUsername === 'undefined') {\n            // if there is no logged in user in run time config (redux app state)\n            // returns an empty narrative list\n\n            //TODO: AKIYO OMG WHAT AM I GOING TO DO HERE!!\n            return;\n        } else {            \n            // when logged-in user is viewing own profile. \n            if (this.props.username === this.props.authUsername || this.props.username === null) {\n                console.log(\"fetch 'mine'\")\n                    this.props.loadNarratives('mine', this.props.authUsername ); // redux \n            } else {\n                /**\n                 * when logged in user is not viewing other user's profile\n                 * pass filter \"they\" <-- gender-neutral singular they\n                 * which tfetch both \"public\" and \"shared\" and filter response with profileID\n                 */\n\n                console.log(\"fetch 'they'\")\n                this.props.loadNarratives('they', this.props.username); // redux \n\n            }\n        }\n    }\n\n    componentDidUpdate(prevProps: any, prevState: any) {\n        console.log('homeprops in compDidUpdate', this.props)\n        // This privents from infinate component loading loop.\n        if (this.state === prevState) {\n            return;\n        }\n    }\n    // wrap search user component with a div so that display can be controlled.\n    // in order to place search component/box on the navigation tab, \n    // make it into a variable and insert it as tab title. \n    searchOnATab = <div className=\"search-on-a-tab\">Search other users <SearchUsersContainer /></div>\n    \n    render() {\n        return (\n            <div className=\"profile-tabs\">\n                <Tabs type=\"line\" defaultActiveKey=\"1\">\n                    <TabPane  tab=\"Profile\" key=\"1\">\n                        <ProfileContainer />\n                    </TabPane>\n                    <TabPane tab=\"Narratives\" key=\"3\">\n                        <NarrativeContainer />\n                    </TabPane>\n                    {/* Insert search user component div as a title to place it on the navigation tab  */}\n                    <TabPane disabled tab={this.searchOnATab} key=\"8\"></TabPane>\n                </Tabs>\n            </div>\n        );\n    }\n}\n\nexport default Home;\n","import { connect } from 'react-redux';\nimport { Action, Dispatch } from 'redux';\n\nimport Home from './Home';\nimport { StoreState, NarrativeData } from '../redux/interfaces';\nimport { sendTitle } from '@kbase/ui-lib';\nimport { loadNarratives, loadProfile, updateProfile } from '../redux/actions/index';\n\ninterface OwnProps {}\n\ninterface StateProps {\n    token: string;\n    authUsername: string;\n    username: string | null;\n    baseURL: string;\n}\n\ninterface DispatchProps {\n    setTitle: (title: string) => void;\n    loadNarratives: (filter:string, profileID: string) => void;\n    loadProfile: (profileID: string) => void;\n    updateProfile: (profileID: string) => void;\n}\n\n// TODO this should be part of the view definition\ninterface UserProfileViewParams {\n    username?: string;\n}\n\nfunction mapStateToProps(state: StoreState, ownProps: OwnProps): StateProps {\n    const {\n        auth: { userAuthorization },\n        app: {\n            config: { baseUrl },\n            runtime: {\n                navigation: { params: rawParams }\n            }\n        }\n    } = state;\n    if (!userAuthorization) {\n        throw new Error('This plugin only operates with authentication; no KBase token in store');\n    }\n    const params = (rawParams as unknown) as UserProfileViewParams;\n    return {\n        token: userAuthorization.token,\n        authUsername: userAuthorization.username,\n        username: params.username || null,\n        baseURL: baseUrl\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<Action>, ownProps: OwnProps): DispatchProps {\n    return {\n        // action creator loadNarratives is passed as props to the home page.\n        loadNarratives: (filter: string, profileID: string) => {\n            return dispatch(loadNarratives(filter, profileID) as any);\n        },\n        setTitle: (title: string) => {\n            return dispatch(sendTitle(title) as any);\n        },\n        updateProfile: (profileID: string) => {\n            return dispatch(updateProfile(profileID) as any);\n        },\n        loadProfile: (profileID: string) => {\n            return dispatch(loadProfile(profileID) as any);\n        }\n        \n    };\n}\n\nconsole.log(\"Im in homeredux\")\n\nexport default connect<StateProps, DispatchProps, OwnProps, StoreState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(Home);\n","import React from 'react';\nimport { Layout } from 'antd';\nimport { Provider } from 'react-redux';\nimport { createReduxStore } from './redux/store';\nimport { AppBase, AuthGate } from '@kbase/ui-lib';\n\nimport './App.css';\nimport HomeRedux from './pages/HomeRedux';\n\nconst { Content } = Layout;\nconsole.log(\"i'm in app!!!\")\nconst store = createReduxStore();\ninterface AppProps {}\ninterface AppState {}\n\nconst App: React.FC = () => {\n    return (\n        <Provider store={store}>\n            <AppBase>\n                <AuthGate required={true}>\n                    <div className=\"App\">\n                        <Layout style={{ minHeight: '100vh' }}>\n                            <Content style={{ backgroundColor: 'white' }}>\n                                <HomeRedux />\n                            </Content>\n                        </Layout>\n                    </div>\n                </AuthGate>\n            </AppBase>\n        </Provider>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n//TODO:AKIYO add service worker\n"],"sourceRoot":""}